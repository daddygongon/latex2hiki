%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 104 575 687
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, June 11, 2012 11:54:16 PM JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
166 174 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
166.000 0 l
166.000 174.000 l
0 174.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 156 164 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
8.00000 6.04651 145.482 124.953 rc
1.00000 0 0 RG
newpath
9.00000 130.000 m
12.6062 123.829 l
14.7211 120.216 l
16.1954 117.703 l
16.8539 116.582 l
17.5952 115.322 l
18.3395 114.058 l
19.0567 112.841 l
19.7081 111.738 l
20.4826 110.428 l
21.1388 109.320 l
21.9020 108.034 l
22.5776 106.897 l
23.3188 105.653 l
24.0246 104.470 l
24.7611 103.239 l
25.4374 102.110 l
26.1669 100.896 l
26.9246 99.6387 l
27.5842 98.5464 l
28.2966 97.3698 l
29.0325 96.1577 l
29.7525 94.9753 l
30.4491 93.8347 l
31.2226 92.5724 l
31.9177 91.4418 l
32.6597 90.2388 l
33.3322 89.1524 l
34.0673 87.9688 l
34.7590 86.8593 l
35.4821 85.7038 l
36.1890 84.5785 l
36.9290 83.4053 l
37.6418 82.2801 l
38.3707 81.1343 l
39.0936 80.0031 l
39.7579 78.9681 l
40.5192 77.7874 l
41.2001 76.7364 l
41.9261 75.6212 l
42.6209 74.5591 l
43.3925 73.3860 l
44.0606 72.3755 l
44.8190 71.2347 l
45.5101 70.2008 l
46.2661 69.0763 l
46.9184 68.1116 l
47.6613 67.0192 l
48.3788 65.9705 l
49.0960 64.9290 l
49.8104 63.8978 l
50.4968 62.9135 l
51.2389 61.8564 l
51.9460 60.8558 l
52.6903 59.8101 l
53.3641 58.8701 l
54.1087 57.8386 l
54.8219 56.8580 l
55.5334 55.8870 l
56.2766 54.8808 l
56.9610 53.9613 l
57.6620 53.0268 l
58.4360 52.0037 l
59.1368 51.0853 l
59.8534 50.1540 l
60.5823 49.2151 l
61.2522 48.3596 l
61.9663 47.4556 l
62.6750 46.5666 l
63.4331 45.6249 l
64.1021 44.8017 l
64.8740 43.8614 l
65.5705 43.0214 l
66.2597 42.1985 l
67.0008 41.3228 l
67.7449 40.4532 l
68.4219 39.6705 l
69.1409 38.8483 l
69.8426 38.0548 l
70.6032 37.2047 l
71.2613 36.4776 l
72.0172 35.6525 l
72.7277 34.8864 l
73.4314 34.1371 l
74.1357 33.3966 l
74.8540 32.6510 l
75.6154 31.8715 l
76.3135 31.1667 l
77.0026 30.4802 l
77.7393 29.7567 l
78.4744 29.0454 l
79.1341 28.4161 l
79.9157 27.6820 l
80.5696 27.0771 l
81.3345 26.3807 l
82.0645 25.7272 l
82.7163 25.1529 l
83.4493 24.5176 l
84.1872 23.8893 l
84.9216 23.2754 l
85.6024 22.7163 l
86.3074 22.1477 l
87.0365 21.5707 l
87.7633 21.0070 l
88.5109 20.4389 l
89.1693 19.9485 l
89.9106 19.4077 l
90.6549 18.8767 l
91.3722 18.3765 l
92.0235 17.9321 l
92.7981 17.4158 l
93.4542 16.9888 l
94.2174 16.5043 l
94.8930 16.0862 l
95.6342 15.6393 l
96.3401 15.2252 l
97.0765 14.8052 l
97.7528 14.4304 l
98.4823 14.0377 l
99.2400 13.6427 l
99.8996 13.3096 l
100.612 12.9610 l
101.348 12.6132 l
102.068 12.2851 l
102.764 11.9791 l
103.538 11.6525 l
104.233 11.3710 l
104.975 11.0828 l
105.647 10.8328 l
106.382 10.5717 l
107.074 10.3376 l
107.797 10.1050 l
108.504 9.88957 l
109.244 9.67662 l
109.957 9.48382 l
110.686 9.29913 l
111.409 9.12844 l
112.073 8.98257 l
112.834 8.82832 l
113.515 8.70209 l
114.241 8.57970 l
114.936 8.47437 l
115.708 8.37096 l
116.376 8.29293 l
117.134 8.21735 l
117.825 8.16047 l
118.581 8.11140 l
119.233 8.08009 l
119.976 8.05688 l
120.694 8.04705 l
121.411 8.04958 l
122.125 8.06440 l
122.812 8.09017 l
123.554 8.13077 l
124.261 8.18177 l
125.005 8.24841 l
125.679 8.32019 l
126.424 8.41219 l
127.137 8.51276 l
127.848 8.62521 l
128.592 8.75560 l
129.276 8.88736 l
129.977 9.03389 l
130.751 9.20929 l
131.452 9.38039 l
132.168 9.56744 l
132.897 9.77017 l
133.567 9.96761 l
134.281 10.1897 l
134.990 10.4221 l
135.748 10.6838 l
136.417 10.9259 l
137.189 11.2183 l
137.886 11.4941 l
138.575 11.7782 l
139.316 12.0961 l
140.060 12.4280 l
140.737 12.7412 l
141.456 13.0853 l
142.158 13.4327 l
142.918 13.8220 l
143.576 14.1695 l
144.332 14.5809 l
145.043 14.9795 l
145.746 15.3854 l
146.451 15.8029 l
147.169 16.2403 l
147.930 16.7164 l
148.629 17.1644 l
149.318 17.6172 l
150.054 18.1130 l
150.789 18.6195 l
151.482 19.1080 l
S
cliprestore
newpath
0 0 m
0 164.000 l
156.000 164.000 l
156.000 0 l
h
W
Q
q
8.00000 6.04651 145.482 124.953 rc
0.196078 0.803922 0.196078 RG
newpath
9.00000 8.04650 m
9.74911 10.5977 l
10.4009 12.7956 l
11.1339 15.2430 l
11.8718 17.6805 l
12.6062 20.0804 l
13.2870 22.2823 l
13.9920 24.5388 l
14.7211 26.8473 l
15.4479 29.1230 l
16.1954 31.4373 l
16.8539 33.4535 l
17.5952 35.6984 l
18.3395 37.9259 l
19.0567 40.0473 l
19.7081 41.9524 l
20.4826 44.1911 l
21.1388 46.0650 l
21.9020 48.2189 l
22.5776 50.1020 l
23.3188 52.1429 l
24.0246 54.0617 l
24.7611 56.0383 l
25.4374 57.8305 l
26.1669 59.7389 l
26.9246 61.6942 l
27.5842 63.3738 l
28.2966 65.1643 l
29.0325 66.9885 l
29.7525 68.7479 l
30.4491 70.4266 l
31.2226 72.2631 l
31.9177 73.8887 l
32.6597 75.5988 l
33.3322 77.1256 l
34.0673 78.7698 l
34.7590 80.2933 l
35.4821 81.8611 l
36.1890 83.3696 l
36.9290 84.9232 l
37.6418 86.3946 l
38.3707 87.8741 l
39.0936 89.3161 l
39.7579 90.6190 l
40.5192 92.0862 l
41.2001 93.3749 l
41.9261 94.7244 l
42.6209 95.9923 l
43.3925 97.3729 l
44.0606 98.5454 l
44.8190 99.8501 l
45.5101 101.015 l
46.2661 102.263 l
46.9184 103.318 l
47.6613 104.494 l
48.3788 105.605 l
49.0960 106.691 l
49.8104 107.748 l
50.4968 108.741 l
51.2389 109.788 l
51.9460 110.762 l
52.6903 111.760 l
53.3641 112.642 l
54.1087 113.590 l
54.8219 114.473 l
55.5334 115.330 l
56.2766 116.200 l
56.9610 116.977 l
57.6620 117.749 l
58.4360 118.575 l
59.1368 119.297 l
59.8534 120.012 l
60.5823 120.713 l
61.2522 121.335 l
61.9663 121.975 l
62.6750 122.585 l
63.4331 123.211 l
64.1021 123.741 l
64.8740 124.325 l
65.5705 124.828 l
66.2597 125.302 l
67.0008 125.787 l
67.7449 126.247 l
68.4219 126.643 l
69.1409 127.039 l
69.8426 127.401 l
70.6032 127.767 l
71.2613 128.062 l
72.0172 128.374 l
72.7277 128.643 l
73.4314 128.885 l
74.1357 129.104 l
74.8540 129.302 l
75.6154 129.485 l
76.3135 129.629 l
77.0026 129.748 l
77.7393 129.849 l
78.4744 129.925 l
79.1341 129.970 l
79.9157 129.997 l
80.5696 129.997 l
81.3345 129.971 l
82.0645 129.920 l
82.7163 129.852 l
83.4493 129.752 l
84.1872 129.625 l
84.9216 129.473 l
85.6024 129.309 l
86.3074 129.115 l
87.0365 128.890 l
87.7633 128.640 l
88.5109 128.356 l
89.1693 128.084 l
89.9106 127.753 l
90.6549 127.394 l
91.3722 127.023 l
92.0235 126.664 l
92.7981 126.211 l
93.4542 125.805 l
94.2174 125.306 l
94.8930 124.841 l
95.6342 124.306 l
96.3401 123.772 l
97.0765 123.189 l
97.7528 122.631 l
98.4823 122.005 l
99.2400 121.326 l
99.8996 120.714 l
100.612 120.029 l
101.348 119.295 l
102.068 118.552 l
102.764 117.810 l
103.538 116.958 l
104.233 116.169 l
104.975 115.300 l
105.647 114.490 l
106.382 113.579 l
107.074 112.699 l
107.797 111.754 l
108.504 110.806 l
109.244 109.787 l
109.957 108.782 l
110.686 107.728 l
111.409 106.658 l
112.073 105.652 l
112.834 104.474 l
113.515 103.396 l
114.241 102.222 l
114.936 101.075 l
115.708 99.7749 l
116.376 98.6254 l
117.134 97.2948 l
117.825 96.0579 l
118.581 94.6787 l
119.233 93.4666 l
119.976 92.0613 l
120.694 90.6787 l
121.411 89.2722 l
122.125 87.8463 l
122.812 86.4534 l
123.554 84.9221 l
124.261 83.4381 l
125.005 81.8503 l
125.679 80.3899 l
126.424 78.7506 l
127.137 77.1555 l
127.848 75.5398 l
128.592 73.8263 l
129.276 72.2247 l
129.977 70.5610 l
130.751 68.6966 l
131.452 66.9838 l
132.168 65.2077 l
132.897 63.3762 l
133.567 61.6701 l
134.281 59.8277 l
134.990 57.9751 l
135.748 55.9667 l
136.417 54.1714 l
137.189 52.0734 l
137.886 50.1554 l
138.575 48.2348 l
139.316 46.1440 l
140.060 44.0182 l
140.737 42.0609 l
141.456 39.9582 l
142.158 37.8823 l
142.918 35.6052 l
143.576 33.6125 l
144.332 31.2981 l
145.043 29.0974 l
145.746 26.8940 l
146.451 24.6651 l
147.169 22.3671 l
147.930 19.9043 l
148.629 17.6216 l
149.318 15.3454 l
150.054 12.8868 l
150.789 10.4077 l
151.482 8.04650 l
S
cliprestore
newpath
0 0 m
0 164.000 l
156.000 164.000 l
156.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
9.00000 130.000 m
151.482 130.000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
108 148 14 15 rc
newpath
114.278 154.255 m
114.486 154.475 114.642 154.695 114.748 154.915  c
114.824 155.067 114.949 155.467 115.123 156.115  c
115.681 155.277 l
115.829 155.074 116.009 154.880 116.221 154.696  c
116.432 154.512 116.619 154.386 116.779 154.318  c
116.881 154.276 116.993 154.255 117.116 154.255  c
117.298 154.255 117.443 154.304 117.551 154.401  c
117.658 154.498 117.712 154.617 117.712 154.756  c
117.712 154.917 117.681 155.027 117.617 155.086  c
117.499 155.192 117.363 155.245 117.211 155.245  c
117.122 155.245 117.027 155.226 116.925 155.188  c
116.726 155.120 116.593 155.086 116.525 155.086  c
116.424 155.086 116.303 155.146 116.164 155.264  c
115.901 155.484 115.588 155.910 115.224 156.540  c
115.745 158.724 l
115.825 159.058 115.893 159.258 115.948 159.324  c
116.003 159.389 116.058 159.422 116.113 159.422  c
116.202 159.422 116.305 159.373 116.424 159.276  c
116.657 159.081 116.856 158.827 117.021 158.514  c
117.243 158.628 l
116.976 159.128 116.638 159.543 116.227 159.873  c
115.994 160.059 115.798 160.152 115.637 160.152  c
115.400 160.152 115.211 160.019 115.072 159.752  c
114.983 159.587 114.799 158.876 114.520 157.619  c
113.859 158.766 113.330 159.504 112.933 159.835  c
112.675 160.046 112.425 160.152 112.184 160.152  c
112.014 160.152 111.860 160.091 111.720 159.968  c
111.619 159.875 111.568 159.750 111.568 159.593  c
111.568 159.454 111.614 159.337 111.708 159.244  c
111.801 159.151 111.915 159.105 112.050 159.105  c
112.186 159.105 112.330 159.172 112.482 159.308  c
112.592 159.405 112.677 159.454 112.736 159.454  c
112.787 159.454 112.852 159.420 112.933 159.352  c
113.132 159.191 113.402 158.844 113.745 158.311  c
114.088 157.778 114.312 157.393 114.418 157.156  c
114.156 156.127 114.014 155.584 113.993 155.524  c
113.895 155.249 113.768 155.055 113.612 154.940  c
113.455 154.826 113.225 154.769 112.920 154.769  c
112.823 154.769 112.710 154.773 112.584 154.782  c
112.584 154.553 l
h
f
Q
cliprestore
newpath
0 0 m
0 164.000 l
156.000 164.000 l
156.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
9.00000 130.000 m
9.00000 133.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 140 7 13 rc
newpath
16.7900 147.438 m
8.21000 147.438 l
8.21000 146.762 l
16.7900 146.762 l
h
f
Q
newpath
16.5234 143.236 m
18.6181 142.214 l
18.8276 142.214 l
18.8276 149.482 l
18.8276 149.965 18.8477 150.265 18.8879 150.384  c
18.9281 150.502 19.0117 150.593 19.1386 150.657  c
19.2656 150.720 19.5237 150.756 19.9130 150.765  c
19.9130 151.000 l
16.6757 151.000 l
16.6757 150.765 l
17.0820 150.756 17.3444 150.721 17.4628 150.660  c
17.5813 150.599 17.6639 150.516 17.7104 150.412  c
17.7570 150.309 17.7802 149.999 17.7802 149.482  c
17.7802 144.836 l
17.7802 144.210 17.7591 143.808 17.7168 143.630  c
17.6871 143.495 17.6332 143.395 17.5549 143.332  c
17.4766 143.268 17.3824 143.236 17.2724 143.236  c
17.1158 143.236 16.8979 143.302 16.6186 143.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
45.0000 130.000 m
45.0000 133.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
36 140 7 13 rc
newpath
46.7900 147.438 m
38.2100 147.438 l
38.2100 146.762 l
46.7900 146.762 l
h
f
Q
newpath
45.4697 146.747 m
45.4697 145.765 45.6178 144.920 45.9140 144.211  c
46.2102 143.502 46.6038 142.974 47.0947 142.627  c
47.4755 142.352 47.8691 142.214 48.2753 142.214  c
48.9355 142.214 49.5279 142.551 50.0527 143.224  c
50.7086 144.057 51.0366 145.187 51.0366 146.613  c
51.0366 147.612 50.8927 148.460 50.6049 149.159  c
50.3172 149.857 49.9501 150.364 49.5036 150.679  c
49.0572 150.994 48.6266 151.152 48.2119 151.152  c
47.3909 151.152 46.7075 150.667 46.1616 149.698  c
45.7003 148.882 45.4697 147.898 45.4697 146.747  c
h
46.7138 146.905 m
46.7138 148.090 46.8598 149.057 47.1518 149.806  c
47.3930 150.437 47.7527 150.752 48.2309 150.752  c
48.4594 150.752 48.6964 150.649 48.9418 150.444  c
49.1873 150.239 49.3735 149.895 49.5004 149.413  c
49.6951 148.685 49.7924 147.659 49.7924 146.334  c
49.7924 145.352 49.6909 144.533 49.4877 143.877  c
49.3354 143.391 49.1386 143.046 48.8974 142.843  c
48.7239 142.703 48.5144 142.633 48.2690 142.633  c
47.9812 142.633 47.7252 142.762 47.5009 143.021  c
47.1962 143.372 46.9889 143.924 46.8789 144.677  c
46.7688 145.431 46.7138 146.173 46.7138 146.905  c
h
53.6250 149.768 m
53.8238 149.768 53.9910 149.837 54.1264 149.974  c
54.2618 150.112 54.3295 150.278 54.3295 150.473  c
54.3295 150.667 54.2608 150.833 54.1232 150.971  c
53.9857 151.109 53.8196 151.177 53.6250 151.177  c
53.4303 151.177 53.2642 151.109 53.1267 150.971  c
52.9891 150.833 52.9204 150.667 52.9204 150.473  c
52.9204 150.274 52.9891 150.107 53.1267 149.971  c
53.2642 149.836 53.4303 149.768 53.6250 149.768  c
h
60.6430 142.392 m
60.1479 143.471 l
57.5581 143.471 l
56.9931 144.627 l
58.1145 144.792 59.0032 145.208 59.6591 145.877  c
60.2220 146.453 60.5034 147.130 60.5034 147.908  c
60.5034 148.361 60.4113 148.780 60.2272 149.165  c
60.0432 149.550 59.8115 149.878 59.5322 150.149  c
59.2529 150.420 58.9418 150.638 58.5991 150.803  c
58.1124 151.036 57.6131 151.152 57.1010 151.152  c
56.5848 151.152 56.2092 151.064 55.9743 150.888  c
55.7395 150.713 55.6220 150.519 55.6220 150.308  c
55.6220 150.189 55.6707 150.084 55.7680 149.993  c
55.8654 149.902 55.9881 149.857 56.1362 149.857  c
56.2462 149.857 56.3425 149.874 56.4250 149.908  c
56.5075 149.942 56.6482 150.028 56.8471 150.168  c
57.1645 150.388 57.4861 150.498 57.8120 150.498  c
58.3071 150.498 58.7419 150.311 59.1164 149.936  c
59.4909 149.562 59.6782 149.106 59.6782 148.568  c
59.6782 148.048 59.5110 147.562 59.1767 147.112  c
58.8424 146.661 58.3811 146.313 57.7929 146.067  c
57.3317 145.877 56.7032 145.767 55.9077 145.737  c
57.5581 142.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 130.000 m
80.0000 133.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
82.4697 146.747 m
82.4697 145.765 82.6178 144.920 82.9140 144.211  c
83.2102 143.502 83.6038 142.974 84.0947 142.627  c
84.4755 142.352 84.8691 142.214 85.2753 142.214  c
85.9355 142.214 86.5279 142.551 87.0527 143.224  c
87.7086 144.057 88.0366 145.187 88.0366 146.613  c
88.0366 147.612 87.8927 148.460 87.6049 149.159  c
87.3172 149.857 86.9501 150.364 86.5036 150.679  c
86.0572 150.994 85.6266 151.152 85.2119 151.152  c
84.3909 151.152 83.7075 150.667 83.1616 149.698  c
82.7003 148.882 82.4697 147.898 82.4697 146.747  c
h
83.7138 146.905 m
83.7138 148.090 83.8598 149.057 84.1518 149.806  c
84.3930 150.437 84.7527 150.752 85.2309 150.752  c
85.4594 150.752 85.6964 150.649 85.9418 150.444  c
86.1873 150.239 86.3735 149.895 86.5004 149.413  c
86.6951 148.685 86.7924 147.659 86.7924 146.334  c
86.7924 145.352 86.6909 144.533 86.4877 143.877  c
86.3354 143.391 86.1386 143.046 85.8974 142.843  c
85.7239 142.703 85.5144 142.633 85.2690 142.633  c
84.9812 142.633 84.7252 142.762 84.5009 143.021  c
84.1962 143.372 83.9889 143.924 83.8789 144.677  c
83.7688 145.431 83.7138 146.173 83.7138 146.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
116.000 130.000 m
116.000 133.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
112.469 146.747 m
112.469 145.765 112.617 144.920 112.914 144.211  c
113.210 143.502 113.603 142.974 114.094 142.627  c
114.475 142.352 114.869 142.214 115.275 142.214  c
115.935 142.214 116.528 142.551 117.052 143.224  c
117.708 144.057 118.036 145.187 118.036 146.613  c
118.036 147.612 117.892 148.460 117.605 149.159  c
117.317 149.857 116.950 150.364 116.503 150.679  c
116.057 150.994 115.626 151.152 115.211 151.152  c
114.391 151.152 113.707 150.667 113.161 149.698  c
112.700 148.882 112.469 147.898 112.469 146.747  c
h
113.713 146.905 m
113.713 148.090 113.859 149.057 114.151 149.806  c
114.393 150.437 114.752 150.752 115.231 150.752  c
115.459 150.752 115.696 150.649 115.941 150.444  c
116.187 150.239 116.373 149.895 116.500 149.413  c
116.695 148.685 116.792 147.659 116.792 146.334  c
116.792 145.352 116.690 144.533 116.487 143.877  c
116.335 143.391 116.138 143.046 115.897 142.843  c
115.724 142.703 115.514 142.633 115.269 142.633  c
114.981 142.633 114.725 142.762 114.501 143.021  c
114.196 143.372 113.988 143.924 113.878 144.677  c
113.768 145.431 113.713 146.173 113.713 146.905  c
h
120.625 149.768 m
120.823 149.768 120.991 149.837 121.126 149.974  c
121.261 150.112 121.329 150.278 121.329 150.473  c
121.329 150.667 121.260 150.833 121.123 150.971  c
120.985 151.109 120.819 151.177 120.625 151.177  c
120.430 151.177 120.264 151.109 120.126 150.971  c
119.989 150.833 119.920 150.667 119.920 150.473  c
119.920 150.274 119.989 150.107 120.126 149.971  c
120.264 149.836 120.430 149.768 120.625 149.768  c
h
127.643 142.392 m
127.147 143.471 l
124.558 143.471 l
123.993 144.627 l
125.114 144.792 126.003 145.208 126.659 145.877  c
127.222 146.453 127.503 147.130 127.503 147.908  c
127.503 148.361 127.411 148.780 127.227 149.165  c
127.043 149.550 126.811 149.878 126.532 150.149  c
126.252 150.420 125.941 150.638 125.599 150.803  c
125.112 151.036 124.613 151.152 124.101 151.152  c
123.584 151.152 123.209 151.064 122.974 150.888  c
122.739 150.713 122.622 150.519 122.622 150.308  c
122.622 150.189 122.670 150.084 122.768 149.993  c
122.865 149.902 122.988 149.857 123.136 149.857  c
123.246 149.857 123.342 149.874 123.425 149.908  c
123.507 149.942 123.648 150.028 123.847 150.168  c
124.164 150.388 124.486 150.498 124.812 150.498  c
125.307 150.498 125.741 150.311 126.116 149.936  c
126.491 149.562 126.678 149.106 126.678 148.568  c
126.678 148.048 126.511 147.562 126.176 147.112  c
125.842 146.661 125.381 146.313 124.793 146.067  c
124.331 145.877 123.703 145.767 122.907 145.737  c
124.558 142.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
151.000 130.000 m
151.000 133.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
154.523 143.236 m
156.618 142.214 l
156.827 142.214 l
156.827 149.482 l
156.827 149.965 156.847 150.265 156.887 150.384  c
156.928 150.502 157.011 150.593 157.138 150.657  c
157.265 150.720 157.523 150.756 157.913 150.765  c
157.913 151.000 l
154.675 151.000 l
154.675 150.765 l
155.082 150.756 155.344 150.721 155.462 150.660  c
155.581 150.599 155.663 150.516 155.710 150.412  c
155.757 150.309 155.780 149.999 155.780 149.482  c
155.780 144.836 l
155.780 144.210 155.759 143.808 155.716 143.630  c
155.687 143.495 155.633 143.395 155.554 143.332  c
155.476 143.268 155.382 143.236 155.272 143.236  c
155.115 143.236 154.897 143.302 154.618 143.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
16.0000 130.000 m
16.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
23.0000 130.000 m
23.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 130.000 m
30.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
37.0000 130.000 m
37.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
52.0000 130.000 m
52.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
59.0000 130.000 m
59.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
66.0000 130.000 m
66.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 130.000 m
73.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
87.0000 130.000 m
87.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
94.0000 130.000 m
94.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
102.000 130.000 m
102.000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
109.000 130.000 m
109.000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
123.000 130.000 m
123.000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
130.000 130.000 m
130.000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
137.000 130.000 m
137.000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
144.000 130.000 m
144.000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
80.0000 130.000 m
80.0000 8.04650 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
49 62 8 15 rc
Q
cliprestore
newpath
0 0 m
0 164.000 l
156.000 164.000 l
156.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
80.0000 130.000 m
77.0000 130.000 l
S
Q
q
0 J
1 j
newpath
80.0000 106.000 m
77.0000 106.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
63.4697 110.747 m
63.4697 109.765 63.6178 108.920 63.9140 108.211  c
64.2102 107.502 64.6038 106.974 65.0947 106.627  c
65.4755 106.352 65.8691 106.214 66.2753 106.214  c
66.9355 106.214 67.5279 106.551 68.0527 107.224  c
68.7086 108.057 69.0366 109.187 69.0366 110.613  c
69.0366 111.612 68.8927 112.460 68.6049 113.159  c
68.3172 113.857 67.9501 114.364 67.5036 114.679  c
67.0572 114.994 66.6266 115.152 66.2119 115.152  c
65.3909 115.152 64.7075 114.667 64.1616 113.698  c
63.7003 112.882 63.4697 111.898 63.4697 110.747  c
h
64.7138 110.905 m
64.7138 112.090 64.8598 113.057 65.1518 113.806  c
65.3930 114.437 65.7527 114.752 66.2309 114.752  c
66.4594 114.752 66.6964 114.649 66.9418 114.444  c
67.1873 114.239 67.3735 113.895 67.5004 113.413  c
67.6951 112.685 67.7924 111.659 67.7924 110.334  c
67.7924 109.352 67.6909 108.533 67.4877 107.877  c
67.3354 107.391 67.1386 107.046 66.8974 106.843  c
66.7239 106.703 66.5144 106.633 66.2690 106.633  c
65.9812 106.633 65.7252 106.762 65.5009 107.021  c
65.1962 107.372 64.9889 107.924 64.8789 108.677  c
64.7688 109.431 64.7138 110.173 64.7138 110.905  c
h
71.6250 113.768 m
71.8238 113.768 71.9910 113.837 72.1264 113.974  c
72.2618 114.112 72.3295 114.278 72.3295 114.473  c
72.3295 114.667 72.2608 114.833 72.1232 114.971  c
71.9857 115.109 71.8196 115.177 71.6250 115.177  c
71.4303 115.177 71.2642 115.109 71.1267 114.971  c
70.9891 114.833 70.9204 114.667 70.9204 114.473  c
70.9204 114.274 70.9891 114.107 71.1267 113.971  c
71.2642 113.836 71.4303 113.768 71.6250 113.768  c
h
78.9604 113.343 m
78.3574 115.000 l
73.2793 115.000 l
73.2793 114.765 l
74.7731 113.402 75.8247 112.289 76.4340 111.426  c
77.0434 110.563 77.3481 109.773 77.3481 109.058  c
77.3481 108.512 77.1809 108.064 76.8466 107.712  c
76.5123 107.361 76.1124 107.186 75.6469 107.186  c
75.2238 107.186 74.8439 107.309 74.5075 107.557  c
74.1711 107.804 73.9225 108.167 73.7617 108.646  c
73.5268 108.646 l
73.6326 107.863 73.9045 107.262 74.3425 106.843  c
74.7805 106.424 75.3274 106.214 75.9834 106.214  c
76.6816 106.214 77.2645 106.439 77.7321 106.887  c
78.1997 107.336 78.4335 107.865 78.4335 108.474  c
78.4335 108.910 78.3320 109.346 78.1289 109.782  c
77.8157 110.467 77.3079 111.193 76.6054 111.959  c
75.5517 113.110 74.8937 113.804 74.6313 114.041  c
76.8784 114.041 l
77.3354 114.041 77.6560 114.024 77.8400 113.990  c
78.0241 113.956 78.1902 113.888 78.3383 113.784  c
78.4864 113.680 78.6155 113.533 78.7255 113.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 81.0000 m
77.0000 81.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
63.4697 86.7470 m
63.4697 85.7653 63.6178 84.9200 63.9140 84.2111  c
64.2102 83.5023 64.6038 82.9744 65.0947 82.6274  c
65.4755 82.3523 65.8691 82.2148 66.2753 82.2148  c
66.9355 82.2148 67.5279 82.5512 68.0527 83.2241  c
68.7086 84.0577 69.0366 85.1876 69.0366 86.6137  c
69.0366 87.6124 68.8927 88.4609 68.6049 89.1591  c
68.3172 89.8574 67.9501 90.3641 67.5036 90.6794  c
67.0572 90.9947 66.6266 91.1523 66.2119 91.1523  c
65.3909 91.1523 64.7075 90.6678 64.1616 89.6987  c
63.7003 88.8820 63.4697 87.8981 63.4697 86.7470  c
h
64.7138 86.9057 m
64.7138 88.0906 64.8598 89.0576 65.1518 89.8066  c
65.3930 90.4371 65.7527 90.7524 66.2309 90.7524  c
66.4594 90.7524 66.6964 90.6498 66.9418 90.4445  c
67.1873 90.2393 67.3735 89.8955 67.5004 89.4130  c
67.6951 88.6852 67.7924 87.6590 67.7924 86.3344  c
67.7924 85.3527 67.6909 84.5338 67.4877 83.8779  c
67.3354 83.3912 67.1386 83.0463 66.8974 82.8432  c
66.7239 82.7036 66.5144 82.6337 66.2690 82.6337  c
65.9812 82.6337 65.7252 82.7628 65.5009 83.0210  c
65.1962 83.3722 64.9889 83.9244 64.8789 84.6777  c
64.7688 85.4309 64.7138 86.1736 64.7138 86.9057  c
h
71.6250 89.7685 m
71.8238 89.7685 71.9910 89.8373 72.1264 89.9748  c
72.2618 90.1123 72.3295 90.2784 72.3295 90.4731  c
72.3295 90.6678 72.2608 90.8339 72.1232 90.9714  c
71.9857 91.1089 71.8196 91.1777 71.6250 91.1777  c
71.4303 91.1777 71.2642 91.1089 71.1267 90.9714  c
70.9891 90.8339 70.9204 90.6678 70.9204 90.4731  c
70.9204 90.2742 70.9891 90.1071 71.1267 89.9716  c
71.2642 89.8362 71.4303 89.7685 71.6250 89.7685  c
h
79.0493 87.8261 m
79.0493 88.7275 l
77.8940 88.7275 l
77.8940 91.0000 l
76.8466 91.0000 l
76.8466 88.7275 l
73.2031 88.7275 l
73.2031 87.9150 l
77.1958 82.2148 l
77.8940 82.2148 l
77.8940 87.8261 l
h
76.8466 87.8261 m
76.8466 83.5542 l
73.8252 87.8261 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 57.0000 m
77.0000 57.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
63.4697 61.7470 m
63.4697 60.7653 63.6178 59.9200 63.9140 59.2111  c
64.2102 58.5023 64.6038 57.9744 65.0947 57.6274  c
65.4755 57.3523 65.8691 57.2148 66.2753 57.2148  c
66.9355 57.2148 67.5279 57.5512 68.0527 58.2241  c
68.7086 59.0577 69.0366 60.1876 69.0366 61.6137  c
69.0366 62.6124 68.8927 63.4609 68.6049 64.1591  c
68.3172 64.8574 67.9501 65.3641 67.5036 65.6794  c
67.0572 65.9947 66.6266 66.1523 66.2119 66.1523  c
65.3909 66.1523 64.7075 65.6678 64.1616 64.6987  c
63.7003 63.8820 63.4697 62.8981 63.4697 61.7470  c
h
64.7138 61.9057 m
64.7138 63.0906 64.8598 64.0576 65.1518 64.8066  c
65.3930 65.4371 65.7527 65.7524 66.2309 65.7524  c
66.4594 65.7524 66.6964 65.6498 66.9418 65.4445  c
67.1873 65.2393 67.3735 64.8955 67.5004 64.4130  c
67.6951 63.6852 67.7924 62.6590 67.7924 61.3344  c
67.7924 60.3527 67.6909 59.5338 67.4877 58.8779  c
67.3354 58.3912 67.1386 58.0463 66.8974 57.8432  c
66.7239 57.7036 66.5144 57.6337 66.2690 57.6337  c
65.9812 57.6337 65.7252 57.7628 65.5009 58.0210  c
65.1962 58.3722 64.9889 58.9244 64.8789 59.6777  c
64.7688 60.4309 64.7138 61.1736 64.7138 61.9057  c
h
71.6250 64.7685 m
71.8238 64.7685 71.9910 64.8373 72.1264 64.9748  c
72.2618 65.1123 72.3295 65.2784 72.3295 65.4731  c
72.3295 65.6678 72.2608 65.8339 72.1232 65.9714  c
71.9857 66.1089 71.8196 66.1777 71.6250 66.1777  c
71.4303 66.1777 71.2642 66.1089 71.1267 65.9714  c
70.9891 65.8339 70.9204 65.6678 70.9204 65.4731  c
70.9204 65.2742 70.9891 65.1071 71.1267 64.9716  c
71.2642 64.8362 71.4303 64.7685 71.6250 64.7685  c
h
78.8271 57.2148 m
78.8271 57.4497 l
78.2685 57.5047 77.8125 57.6158 77.4592 57.7829  c
77.1058 57.9501 76.7567 58.2050 76.4118 58.5478  c
76.0669 58.8906 75.7813 59.2725 75.5549 59.6936  c
75.3285 60.1146 75.1391 60.6150 74.9868 61.1948  c
75.5961 60.7758 76.2076 60.5664 76.8212 60.5664  c
77.4095 60.5664 77.9194 60.8033 78.3510 61.2773  c
78.7827 61.7513 78.9985 62.3606 78.9985 63.1054  c
78.9985 63.8248 78.7806 64.4807 78.3447 65.0732  c
77.8199 65.7926 77.1259 66.1523 76.2627 66.1523  c
75.6744 66.1523 75.1751 65.9576 74.7646 65.5683  c
73.9606 64.8108 73.5585 63.8291 73.5585 62.6230  c
73.5585 61.8528 73.7130 61.1207 74.0219 60.4267  c
74.3308 59.7327 74.7720 59.1170 75.3454 58.5795  c
75.9188 58.0421 76.4679 57.6803 76.9926 57.4941  c
77.5174 57.3079 78.0061 57.2148 78.4589 57.2148  c
h
74.8789 61.6582 m
74.8027 62.2294 74.7646 62.6907 74.7646 63.0419  c
74.7646 63.4482 74.8397 63.8894 74.9899 64.3654  c
75.1402 64.8415 75.3634 65.2192 75.6596 65.4985  c
75.8754 65.6974 76.1378 65.7968 76.4467 65.7968  c
76.8149 65.7968 77.1439 65.6233 77.4338 65.2763  c
77.7237 64.9293 77.8686 64.4342 77.8686 63.7910  c
77.8686 63.0673 77.7247 62.4410 77.4370 61.9121  c
77.1492 61.3831 76.7408 61.1186 76.2119 61.1186  c
76.0511 61.1186 75.8786 61.1525 75.6945 61.2202  c
75.5105 61.2879 75.2386 61.4339 74.8789 61.6582  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 32.0000 m
77.0000 32.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
63.4697 37.7470 m
63.4697 36.7653 63.6178 35.9200 63.9140 35.2111  c
64.2102 34.5023 64.6038 33.9744 65.0947 33.6274  c
65.4755 33.3523 65.8691 33.2148 66.2753 33.2148  c
66.9355 33.2148 67.5279 33.5512 68.0527 34.2241  c
68.7086 35.0577 69.0366 36.1876 69.0366 37.6137  c
69.0366 38.6124 68.8927 39.4609 68.6049 40.1591  c
68.3172 40.8574 67.9501 41.3641 67.5036 41.6794  c
67.0572 41.9947 66.6266 42.1523 66.2119 42.1523  c
65.3909 42.1523 64.7075 41.6678 64.1616 40.6987  c
63.7003 39.8820 63.4697 38.8981 63.4697 37.7470  c
h
64.7138 37.9057 m
64.7138 39.0906 64.8598 40.0576 65.1518 40.8066  c
65.3930 41.4371 65.7527 41.7524 66.2309 41.7524  c
66.4594 41.7524 66.6964 41.6498 66.9418 41.4445  c
67.1873 41.2393 67.3735 40.8955 67.5004 40.4130  c
67.6951 39.6852 67.7924 38.6590 67.7924 37.3344  c
67.7924 36.3527 67.6909 35.5338 67.4877 34.8779  c
67.3354 34.3912 67.1386 34.0463 66.8974 33.8432  c
66.7239 33.7036 66.5144 33.6337 66.2690 33.6337  c
65.9812 33.6337 65.7252 33.7628 65.5009 34.0210  c
65.1962 34.3722 64.9889 34.9244 64.8789 35.6777  c
64.7688 36.4309 64.7138 37.1736 64.7138 37.9057  c
h
71.6250 40.7685 m
71.8238 40.7685 71.9910 40.8373 72.1264 40.9748  c
72.2618 41.1123 72.3295 41.2784 72.3295 41.4731  c
72.3295 41.6678 72.2608 41.8339 72.1232 41.9714  c
71.9857 42.1089 71.8196 42.1777 71.6250 42.1777  c
71.4303 42.1777 71.2642 42.1089 71.1267 41.9714  c
70.9891 41.8339 70.9204 41.6678 70.9204 41.4731  c
70.9204 41.2742 70.9891 41.1071 71.1267 40.9716  c
71.2642 40.8362 71.4303 40.7685 71.6250 40.7685  c
h
75.4946 37.6645 m
74.8133 37.1059 74.3742 36.6573 74.1774 36.3188  c
73.9807 35.9803 73.8823 35.6290 73.8823 35.2651  c
73.8823 34.7065 74.0981 34.2251 74.5297 33.8210  c
74.9614 33.4169 75.5348 33.2148 76.2500 33.2148  c
76.9440 33.2148 77.5026 33.4031 77.9257 33.7797  c
78.3489 34.1564 78.5605 34.5859 78.5605 35.0683  c
78.5605 35.3899 78.4462 35.7179 78.2177 36.0522  c
77.9892 36.3865 77.5131 36.7801 76.7895 37.2329  c
77.5343 37.8084 78.0273 38.2612 78.2685 38.5913  c
78.5901 39.0229 78.7509 39.4778 78.7509 39.9560  c
78.7509 40.5612 78.5203 41.0785 78.0590 41.5080  c
77.5978 41.9375 76.9926 42.1523 76.2436 42.1523  c
75.4269 42.1523 74.7900 41.8963 74.3330 41.3842  c
73.9690 40.9738 73.7871 40.5252 73.7871 40.0385  c
73.7871 39.6577 73.9151 39.2800 74.1711 38.9055  c
74.4271 38.5310 74.8683 38.1173 75.4946 37.6645  c
h
76.4912 36.9853 m
76.9990 36.5283 77.3206 36.1675 77.4560 35.9030  c
77.5914 35.6385 77.6591 35.3391 77.6591 35.0048  c
77.6591 34.5605 77.5343 34.2124 77.2846 33.9606  c
77.0349 33.7089 76.6943 33.5830 76.2627 33.5830  c
75.8310 33.5830 75.4798 33.7078 75.2089 33.9575  c
74.9381 34.2071 74.8027 34.4991 74.8027 34.8335  c
74.8027 35.0535 74.8588 35.2736 74.9709 35.4936  c
75.0830 35.7137 75.2428 35.9231 75.4502 36.1220  c
h
75.7929 37.9057 m
75.4417 38.2019 75.1814 38.5246 75.0122 38.8737  c
74.8429 39.2229 74.7583 39.6005 74.7583 40.0068  c
74.7583 40.5527 74.9074 40.9896 75.2058 41.3176  c
75.5041 41.6455 75.8839 41.8095 76.3452 41.8095  c
76.8022 41.8095 77.1682 41.6805 77.4433 41.4223  c
77.7184 41.1642 77.8559 40.8510 77.8559 40.4829  c
77.8559 40.1782 77.7755 39.9052 77.6147 39.6640  c
77.3142 39.2154 76.7070 38.6293 75.7929 37.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 8.00000 m
77.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
74.5234 10.2368 m
76.6181 9.21484 l
76.8276 9.21484 l
76.8276 16.4829 l
76.8276 16.9653 76.8477 17.2657 76.8879 17.3842  c
76.9281 17.5027 77.0117 17.5937 77.1386 17.6572  c
77.2656 17.7207 77.5237 17.7566 77.9130 17.7651  c
77.9130 18.0000 l
74.6757 18.0000 l
74.6757 17.7651 l
75.0820 17.7566 75.3444 17.7217 75.4628 17.6604  c
75.5813 17.5990 75.6639 17.5165 75.7104 17.4128  c
75.7570 17.3091 75.7802 16.9991 75.7802 16.4829  c
75.7802 11.8364 l
75.7802 11.2101 75.7591 10.8081 75.7168 10.6303  c
75.6871 10.4949 75.6332 10.3955 75.5549 10.3320  c
75.4766 10.2685 75.3824 10.2368 75.2724 10.2368  c
75.1158 10.2368 74.8979 10.3024 74.6186 10.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 118.000 m
79.0000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 93.0000 m
79.0000 93.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 69.0000 m
79.0000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 45.0000 m
79.0000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
80.0000 20.0000 m
79.0000 20.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 166 174 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
