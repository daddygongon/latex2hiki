%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, June 11, 2012 11:54:17 PM JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
154 154 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
154.000 0 l
154.000 154.000 l
0 154.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 144 144 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
1.00000 -1.00000 144.000 144.000 rc
1.00000 0 0 RG
newpath
2.00000 71.4050 m
2.74132 71.3998 l
3.38634 71.3951 l
4.11173 71.3896 l
4.84193 71.3837 l
5.56866 71.3776 l
6.24244 71.3716 l
6.94009 71.3651 l
7.66160 71.3580 l
8.38080 71.3506 l
9.12059 71.3425 l
9.77219 71.3351 l
10.5057 71.3263 l
11.2423 71.3170 l
11.9521 71.3075 l
12.5967 71.2985 l
13.3631 71.2873 l
14.0124 71.2772 l
14.7677 71.2650 l
15.4363 71.2536 l
16.1698 71.2404 l
16.8683 71.2272 l
17.5971 71.2128 l
18.2663 71.1988 l
18.9882 71.1830 l
19.7380 71.1657 l
20.3908 71.1498 l
21.0957 71.1319 l
21.8240 71.1124 l
22.5365 71.0923 l
23.2259 71.0719 l
23.9914 71.0480 l
24.6791 71.0254 l
25.4135 71.0000 l
26.0789 70.9759 l
26.8064 70.9481 l
27.4909 70.9207 l
28.2065 70.8905 l
28.9060 70.8595 l
29.6384 70.8254 l
30.3437 70.7908 l
31.0651 70.7535 l
31.7804 70.7147 l
32.4377 70.6772 l
33.1911 70.6321 l
33.8650 70.5896 l
34.5834 70.5420 l
35.2710 70.4941 l
36.0346 70.4381 l
36.6957 70.3872 l
37.4462 70.3263 l
38.1301 70.2680 l
38.8782 70.2009 l
39.5237 70.1400 l
40.2589 70.0672 l
40.9690 69.9932 l
41.6787 69.9155 l
42.3857 69.8340 l
43.0650 69.7518 l
43.7993 69.6583 l
44.4991 69.5646 l
45.2356 69.4608 l
45.9024 69.3621 l
46.6392 69.2474 l
47.3450 69.1317 l
48.0491 69.0105 l
48.7845 68.8772 l
49.4619 68.7481 l
50.1556 68.6093 l
50.9215 68.4480 l
51.6150 68.2941 l
52.3242 68.1288 l
53.0454 67.9518 l
53.7084 67.7810 l
54.4151 67.5899 l
55.1164 67.3905 l
55.8666 67.1659 l
56.5286 66.9576 l
57.2925 66.7047 l
57.9817 66.4644 l
58.6638 66.2149 l
59.3972 65.9327 l
60.1335 65.6342 l
60.8035 65.3488 l
61.5150 65.0304 l
62.2093 64.7039 l
62.9620 64.3313 l
63.6133 63.9924 l
64.3613 63.5833 l
65.0645 63.1785 l
65.7608 62.7572 l
66.4578 62.3142 l
67.1686 61.8393 l
67.9221 61.3090 l
68.6129 60.7972 l
69.2949 60.2669 l
70.0239 59.6708 l
70.7513 59.0445 l
71.4042 58.4542 l
72.1776 57.7186 l
72.8248 57.0714 l
73.5817 56.2757 l
74.3041 55.4753 l
74.9491 54.7252 l
75.6745 53.8396 l
76.4047 52.9010 l
77.1314 51.9172 l
77.8052 50.9587 l
78.5029 49.9168 l
79.2244 48.7836 l
79.9436 47.5949 l
80.6834 46.3072 l
81.3350 45.1156 l
82.0685 43.7066 l
82.8051 42.2161 l
83.5149 40.7042 l
84.1595 39.2637 l
84.9259 37.4629 l
85.5752 35.8588 l
86.3305 33.8976 l
86.9991 32.0717 l
87.7326 29.9663 l
88.4311 27.8570 l
89.1599 25.5419 l
89.8291 23.3079 l
90.5510 20.7764 l
91.3008 18.0059 l
91.9536 15.4713 l
92.6585 12.5987 l
93.3868 9.47642 l
94.0993 6.26170 l
94.7887 2.99279 l
95.5542 -0.829041 l
S
cliprestore
newpath
0 0 m
0 144.000 l
144.000 144.000 l
144.000 0 l
h
W
Q
q
1.00000 -1.00000 144.000 144.000 rc
0.196078 0.803922 0.196078 RG
newpath
72.5821 144.052 m
72.6225 138.406 l
72.6630 134.386 l
72.7439 128.704 l
72.8248 124.666 l
73.0140 118.193 l
73.2032 113.774 l
73.3925 110.414 l
73.5817 107.703 l
74.3041 100.490 l
74.9491 96.1810 l
75.6745 92.5232 l
76.4047 89.6041 l
77.1314 87.1974 l
77.8052 85.2824 l
78.5029 83.5404 l
79.2244 81.9400 l
79.9436 80.5073 l
80.6834 79.1713 l
81.3350 78.0910 l
82.0685 76.9664 l
82.8051 75.9208 l
83.5149 74.9816 l
84.1595 74.1797 l
84.9259 73.2820 l
85.5752 72.5638 l
86.3305 71.7720 l
86.9991 71.1064 l
87.7326 70.4105 l
88.4311 69.7784 l
89.1599 69.1476 l
89.8291 68.5923 l
90.5510 68.0168 l
91.3008 67.4430 l
91.9536 66.9617 l
92.6585 66.4598 l
93.3868 65.9594 l
94.0993 65.4864 l
94.7887 65.0434 l
95.5542 64.5674 l
96.2420 64.1529 l
96.9763 63.7233 l
97.6417 63.3451 l
98.3692 62.9429 l
99.0538 62.5747 l
99.7693 62.1998 l
100.468 61.8426 l
101.201 61.4782 l
101.906 61.1358 l
102.627 60.7941 l
103.343 60.4633 l
104.000 60.1659 l
104.754 59.8327 l
105.427 59.5411 l
106.146 59.2368 l
106.833 58.9515 l
107.597 58.6414 l
108.258 58.3783 l
109.009 58.0854 l
109.693 57.8237 l
110.441 57.5429 l
111.086 57.3051 l
111.821 57.0390 l
112.531 56.7866 l
113.241 56.5388 l
113.948 56.2962 l
114.627 56.0670 l
115.362 55.8234 l
116.061 55.5950 l
116.798 55.3586 l
117.465 55.1480 l
118.202 54.9188 l
118.907 54.7027 l
119.612 54.4904 l
120.347 54.2720 l
121.024 54.0738 l
121.718 53.8736 l
122.484 53.6559 l
123.177 53.4616 l
123.887 53.2657 l
124.608 53.0692 l
125.271 52.8909 l
125.977 52.7033 l
126.679 52.5196 l
127.429 52.3257 l
128.091 52.1568 l
128.855 51.9644 l
129.544 51.7930 l
130.226 51.6254 l
130.960 51.4474 l
131.696 51.2709 l
132.366 51.1122 l
133.077 50.9456 l
133.772 50.7849 l
134.524 50.6128 l
135.176 50.4655 l
135.924 50.2982 l
136.627 50.1427 l
137.323 49.9904 l
138.020 49.8397 l
138.731 49.6875 l
139.484 49.5280 l
140.175 49.3834 l
140.857 49.2420 l
141.586 49.0924 l
142.314 48.9447 l
143.000 48.8069 l
S
cliprestore
newpath
0 0 m
0 144.000 l
144.000 144.000 l
144.000 0 l
h
W
Q
q
1.00000 -1.00000 144.000 144.000 rc
0.854902 0.647059 0.125490 RG
newpath
2.00000 142.000 m
143.000 1.00000 l
S
cliprestore
newpath
0 0 m
0 144.000 l
144.000 144.000 l
144.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
2.00000 72.0000 m
143.000 72.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
100 90 14 15 rc
newpath
106.278 96.2553 m
106.486 96.4754 106.642 96.6954 106.748 96.9155  c
106.824 97.0678 106.949 97.4677 107.123 98.1152  c
107.681 97.2773 l
107.829 97.0742 108.009 96.8806 108.221 96.6965  c
108.432 96.5124 108.619 96.3865 108.779 96.3188  c
108.881 96.2765 108.993 96.2553 109.116 96.2553  c
109.298 96.2553 109.443 96.3040 109.551 96.4013  c
109.658 96.4987 109.712 96.6171 109.712 96.7568  c
109.712 96.9176 109.681 97.0276 109.617 97.0869  c
109.499 97.1927 109.363 97.2456 109.211 97.2456  c
109.122 97.2456 109.027 97.2265 108.925 97.1884  c
108.726 97.1207 108.593 97.0869 108.525 97.0869  c
108.424 97.0869 108.303 97.1461 108.164 97.2646  c
107.901 97.4847 107.588 97.9099 107.224 98.5405  c
107.745 100.724 l
107.825 101.058 107.893 101.258 107.948 101.324  c
108.003 101.389 108.058 101.422 108.113 101.422  c
108.202 101.422 108.305 101.373 108.424 101.276  c
108.657 101.081 108.856 100.827 109.021 100.514  c
109.243 100.628 l
108.976 101.128 108.638 101.543 108.227 101.873  c
107.994 102.059 107.798 102.152 107.637 102.152  c
107.400 102.152 107.211 102.019 107.072 101.752  c
106.983 101.587 106.799 100.876 106.520 99.6196  c
105.859 100.766 105.330 101.504 104.933 101.835  c
104.675 102.046 104.425 102.152 104.184 102.152  c
104.014 102.152 103.860 102.091 103.720 101.968  c
103.619 101.875 103.568 101.750 103.568 101.593  c
103.568 101.454 103.614 101.337 103.708 101.244  c
103.801 101.151 103.915 101.105 104.050 101.105  c
104.186 101.105 104.330 101.172 104.482 101.308  c
104.592 101.405 104.677 101.454 104.736 101.454  c
104.787 101.454 104.852 101.420 104.933 101.352  c
105.132 101.191 105.402 100.844 105.745 100.311  c
106.088 99.7783 106.312 99.3932 106.418 99.1562  c
106.156 98.1279 106.014 97.5841 105.993 97.5249  c
105.895 97.2498 105.768 97.0551 105.612 96.9409  c
105.455 96.8266 105.225 96.7695 104.920 96.7695  c
104.823 96.7695 104.710 96.7737 104.584 96.7822  c
104.584 96.5537 l
h
f
Q
cliprestore
newpath
0 0 m
0 144.000 l
144.000 144.000 l
144.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
16.0000 72.0000 m
16.0000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
13 81 7 13 rc
newpath
23.7900 88.4380 m
15.2100 88.4380 l
15.2100 87.7620 l
23.7900 87.7620 l
h
f
Q
newpath
28.0493 88.8261 m
28.0493 89.7275 l
26.8940 89.7275 l
26.8940 92.0000 l
25.8466 92.0000 l
25.8466 89.7275 l
22.2031 89.7275 l
22.2031 88.9150 l
26.1958 83.2148 l
26.8940 83.2148 l
26.8940 88.8261 l
h
25.8466 88.8261 m
25.8466 84.5542 l
22.8252 88.8261 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
44.0000 72.0000 m
44.0000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
41 81 7 13 rc
newpath
51.7900 88.4380 m
43.2100 88.4380 l
43.2100 87.7620 l
51.7900 87.7620 l
h
f
Q
newpath
55.9604 90.3432 m
55.3574 92.0000 l
50.2793 92.0000 l
50.2793 91.7651 l
51.7731 90.4025 52.8247 89.2895 53.4340 88.4262  c
54.0434 87.5629 54.3481 86.7737 54.3481 86.0585  c
54.3481 85.5127 54.1809 85.0641 53.8466 84.7128  c
53.5123 84.3616 53.1124 84.1860 52.6469 84.1860  c
52.2238 84.1860 51.8439 84.3098 51.5075 84.5573  c
51.1711 84.8049 50.9225 85.1678 50.7617 85.6460  c
50.5268 85.6460 l
50.6326 84.8631 50.9045 84.2622 51.3425 83.8432  c
51.7805 83.4243 52.3274 83.2148 52.9834 83.2148  c
53.6816 83.2148 54.2645 83.4391 54.7321 83.8877  c
55.1997 84.3362 55.4335 84.8652 55.4335 85.4746  c
55.4335 85.9104 55.3320 86.3463 55.1289 86.7822  c
54.8157 87.4677 54.3079 88.1935 53.6054 88.9594  c
52.5517 90.1105 51.8937 90.8045 51.6313 91.0415  c
53.8784 91.0415 l
54.3354 91.0415 54.6560 91.0245 54.8400 90.9907  c
55.0241 90.9568 55.1902 90.8881 55.3383 90.7844  c
55.4864 90.6807 55.6155 90.5336 55.7255 90.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 72.0000 m
73.0000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
69.4697 86.7470 m
69.4697 85.7653 69.6178 84.9200 69.9140 84.2111  c
70.2102 83.5023 70.6038 82.9744 71.0947 82.6274  c
71.4755 82.3523 71.8691 82.2148 72.2753 82.2148  c
72.9355 82.2148 73.5279 82.5512 74.0527 83.2241  c
74.7086 84.0577 75.0366 85.1876 75.0366 86.6137  c
75.0366 87.6124 74.8927 88.4609 74.6049 89.1591  c
74.3172 89.8574 73.9501 90.3641 73.5036 90.6794  c
73.0572 90.9947 72.6266 91.1523 72.2119 91.1523  c
71.3909 91.1523 70.7075 90.6678 70.1616 89.6987  c
69.7003 88.8820 69.4697 87.8981 69.4697 86.7470  c
h
70.7138 86.9057 m
70.7138 88.0906 70.8598 89.0576 71.1518 89.8066  c
71.3930 90.4371 71.7527 90.7524 72.2309 90.7524  c
72.4594 90.7524 72.6964 90.6498 72.9418 90.4445  c
73.1873 90.2393 73.3735 89.8955 73.5004 89.4130  c
73.6951 88.6852 73.7924 87.6590 73.7924 86.3344  c
73.7924 85.3527 73.6909 84.5338 73.4877 83.8779  c
73.3354 83.3912 73.1386 83.0463 72.8974 82.8432  c
72.7239 82.7036 72.5144 82.6337 72.2690 82.6337  c
71.9812 82.6337 71.7252 82.7628 71.5009 83.0210  c
71.1962 83.3722 70.9889 83.9244 70.8789 84.6777  c
70.7688 85.4309 70.7138 86.1736 70.7138 86.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
101.000 72.0000 m
101.000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
107.960 90.3432 m
107.357 92.0000 l
102.279 92.0000 l
102.279 91.7651 l
103.773 90.4025 104.824 89.2895 105.434 88.4262  c
106.043 87.5629 106.348 86.7737 106.348 86.0585  c
106.348 85.5127 106.181 85.0641 105.846 84.7128  c
105.512 84.3616 105.112 84.1860 104.647 84.1860  c
104.223 84.1860 103.844 84.3098 103.507 84.5573  c
103.171 84.8049 102.922 85.1678 102.761 85.6460  c
102.526 85.6460 l
102.632 84.8631 102.904 84.2622 103.342 83.8432  c
103.780 83.4243 104.327 83.2148 104.983 83.2148  c
105.681 83.2148 106.264 83.4391 106.732 83.8877  c
107.199 84.3362 107.433 84.8652 107.433 85.4746  c
107.433 85.9104 107.332 86.3463 107.128 86.7822  c
106.815 87.4677 106.307 88.1935 105.605 88.9594  c
104.551 90.1105 103.893 90.8045 103.631 91.0415  c
105.878 91.0415 l
106.335 91.0415 106.656 91.0245 106.840 90.9907  c
107.024 90.9568 107.190 90.8881 107.338 90.7844  c
107.486 90.6807 107.615 90.5336 107.725 90.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
129.000 72.0000 m
129.000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
136.049 88.8261 m
136.049 89.7275 l
134.894 89.7275 l
134.894 92.0000 l
133.846 92.0000 l
133.846 89.7275 l
130.203 89.7275 l
130.203 88.9150 l
134.195 83.2148 l
134.894 83.2148 l
134.894 88.8261 l
h
133.846 88.8261 m
133.846 84.5542 l
130.825 88.8261 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
2.00000 72.0000 m
2.00000 73.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 72.0000 m
30.0000 73.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 72.0000 m
58.0000 73.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
87.0000 72.0000 m
87.0000 73.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
115.000 72.0000 m
115.000 73.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
143.000 72.0000 m
143.000 73.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
73.0000 142.000 m
73.0000 1.00000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
36 29 14 15 rc
newpath
42.1010 35.2553 m
42.2449 35.5008 42.3444 35.7303 42.3994 35.9440  c
42.4544 36.1578 42.5094 36.5778 42.5644 37.2041  c
42.8437 40.3271 l
43.0976 40.0224 43.4658 39.5400 43.9482 38.8798  c
44.1809 38.5582 44.4687 38.1202 44.8115 37.5659  c
45.0188 37.2273 45.1458 36.9904 45.1923 36.8549  c
45.2177 36.7872 45.2304 36.7174 45.2304 36.6455  c
45.2304 36.5989 45.2156 36.5608 45.1860 36.5312  c
45.1564 36.5016 45.0791 36.4667 44.9543 36.4265  c
44.8295 36.3863 44.7258 36.3122 44.6433 36.2043  c
44.5607 36.0964 44.5195 35.9726 44.5195 35.8330  c
44.5195 35.6595 44.5703 35.5198 44.6718 35.4140  c
44.7734 35.3082 44.9003 35.2553 45.0527 35.2553  c
45.2389 35.2553 45.3976 35.3326 45.5288 35.4870  c
45.6599 35.6415 45.7255 35.8541 45.7255 36.1250  c
45.7255 36.4593 45.6113 36.8412 45.3828 37.2707  c
45.1543 37.7002 44.7141 38.3593 44.0625 39.2480  c
43.4108 40.1367 42.6215 41.1057 41.6948 42.1552  c
41.0558 42.8789 40.5818 43.3348 40.2729 43.5231  c
39.9640 43.7115 39.6995 43.8056 39.4794 43.8056  c
39.3483 43.8056 39.2329 43.7559 39.1335 43.6564  c
39.0341 43.5570 38.9843 43.4417 38.9843 43.3105  c
38.9843 43.1455 39.0531 42.9952 39.1906 42.8598  c
39.3282 42.7244 39.4773 42.6567 39.6381 42.6567  c
39.7228 42.6567 39.7926 42.6757 39.8476 42.7138  c
39.8815 42.7350 39.9185 42.7953 39.9587 42.8947  c
39.9989 42.9942 40.0359 43.0608 40.0698 43.0947  c
40.0909 43.1158 40.1163 43.1264 40.1460 43.1264  c
40.1713 43.1264 40.2158 43.1053 40.2793 43.0629  c
40.5120 42.9191 40.7828 42.6905 41.0918 42.3774  c
41.4980 41.9627 41.7985 41.6241 41.9931 41.3618  c
41.6377 37.3374 l
41.5784 36.6730 41.4895 36.2688 41.3710 36.1250  c
41.2526 35.9811 41.0537 35.9091 40.7744 35.9091  c
40.6855 35.9091 40.5268 35.9218 40.2983 35.9472  c
40.2412 35.7124 l
h
f
Q
cliprestore
newpath
0 0 m
0 144.000 l
144.000 144.000 l
144.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
73.0000 128.000 m
70.0000 128.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
57 126 7 13 rc
newpath
67.7900 133.438 m
59.2100 133.438 l
59.2100 132.762 l
67.7900 132.762 l
h
f
Q
newpath
72.0493 133.826 m
72.0493 134.727 l
70.8940 134.727 l
70.8940 137.000 l
69.8466 137.000 l
69.8466 134.727 l
66.2031 134.727 l
66.2031 133.915 l
70.1958 128.214 l
70.8940 128.214 l
70.8940 133.826 l
h
69.8466 133.826 m
69.8466 129.554 l
66.8252 133.826 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 100.000 m
70.0000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
57 98 7 13 rc
newpath
67.7900 105.438 m
59.2100 105.438 l
59.2100 104.762 l
67.7900 104.762 l
h
f
Q
newpath
71.9604 107.343 m
71.3574 109.000 l
66.2793 109.000 l
66.2793 108.765 l
67.7731 107.402 68.8247 106.289 69.4340 105.426  c
70.0434 104.563 70.3481 103.773 70.3481 103.058  c
70.3481 102.512 70.1809 102.064 69.8466 101.712  c
69.5123 101.361 69.1124 101.186 68.6469 101.186  c
68.2238 101.186 67.8439 101.309 67.5075 101.557  c
67.1711 101.804 66.9225 102.167 66.7617 102.646  c
66.5268 102.646 l
66.6326 101.863 66.9045 101.262 67.3425 100.843  c
67.7805 100.424 68.3274 100.214 68.9834 100.214  c
69.6816 100.214 70.2645 100.439 70.7321 100.887  c
71.1997 101.336 71.4335 101.865 71.4335 102.474  c
71.4335 102.910 71.3320 103.346 71.1289 103.782  c
70.8157 104.467 70.3079 105.193 69.6054 105.959  c
68.5517 107.110 67.8937 107.804 67.6313 108.041  c
69.8784 108.041 l
70.3354 108.041 70.6560 108.024 70.8400 107.990  c
71.0241 107.956 71.1902 107.888 71.3383 107.784  c
71.4864 107.680 71.6155 107.533 71.7255 107.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 72.0000 m
70.0000 72.0000 l
S
Q
q
0 J
1 j
newpath
73.0000 43.0000 m
70.0000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
71.9604 51.3432 m
71.3574 53.0000 l
66.2793 53.0000 l
66.2793 52.7651 l
67.7731 51.4025 68.8247 50.2895 69.4340 49.4262  c
70.0434 48.5629 70.3481 47.7737 70.3481 47.0585  c
70.3481 46.5127 70.1809 46.0641 69.8466 45.7128  c
69.5123 45.3616 69.1124 45.1860 68.6469 45.1860  c
68.2238 45.1860 67.8439 45.3098 67.5075 45.5573  c
67.1711 45.8049 66.9225 46.1678 66.7617 46.6460  c
66.5268 46.6460 l
66.6326 45.8631 66.9045 45.2622 67.3425 44.8432  c
67.7805 44.4243 68.3274 44.2148 68.9834 44.2148  c
69.6816 44.2148 70.2645 44.4391 70.7321 44.8877  c
71.1997 45.3362 71.4335 45.8652 71.4335 46.4746  c
71.4335 46.9104 71.3320 47.3463 71.1289 47.7822  c
70.8157 48.4677 70.3079 49.1935 69.6054 49.9594  c
68.5517 51.1105 67.8937 51.8045 67.6313 52.0415  c
69.8784 52.0415 l
70.3354 52.0415 70.6560 52.0245 70.8400 51.9907  c
71.0241 51.9568 71.1902 51.8881 71.3383 51.7844  c
71.4864 51.6807 71.6155 51.5336 71.7255 51.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 15.0000 m
70.0000 15.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
72.0493 21.8261 m
72.0493 22.7275 l
70.8940 22.7275 l
70.8940 25.0000 l
69.8466 25.0000 l
69.8466 22.7275 l
66.2031 22.7275 l
66.2031 21.9150 l
70.1958 16.2148 l
70.8940 16.2148 l
70.8940 21.8261 l
h
69.8466 21.8261 m
69.8466 17.5542 l
66.8252 21.8261 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 142.000 m
71.0000 142.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 114.000 m
71.0000 114.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 86.0000 m
71.0000 86.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 57.0000 m
71.0000 57.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 29.0000 m
71.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 1.00000 m
71.0000 1.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 154 154 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
