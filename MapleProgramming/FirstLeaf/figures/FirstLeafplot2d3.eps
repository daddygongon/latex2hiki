%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 333 575 458
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N5ŒŽ31“ú 11Žž17•ª35•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
414 93 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
414.000 0 l
414.000 93.0000 l
0 93.0000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 404 83 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
1.00000 0 0 RG
1.00000 6.08221 404.000 69.4161 rc
newpath
2.00000 41.2907 m
4.10829 39.0982 l
5.94271 37.1980 l
8.00571 35.0774 l
10.0823 32.9691 l
12.1491 30.9057 l
14.0653 29.0314 l
16.0494 27.1373 l
18.1014 25.2361 l
20.1468 23.4070 l
22.2507 21.6022 l
24.1039 20.0832 l
26.1901 18.4590 l
28.2848 16.9263 l
30.3035 15.5484 l
32.1367 14.3863 l
34.3165 13.1202 l
36.1631 12.1503 l
38.3111 11.1450 l
40.2125 10.3689 l
42.2985 9.64376 l
44.2850 9.07889 l
46.3577 8.62255 l
48.2610 8.32481 l
49.2875 8.21285 l
50.3140 8.13511 l
51.3803 8.09069 l
52.4465 8.08334 l
53.3747 8.10711 l
54.3029 8.15897 l
55.3053 8.24645 l
56.3078 8.36654 l
58.3791 8.71742 l
60.4054 9.19345 l
62.3660 9.77722 l
64.5429 10.5646 l
66.4989 11.3941 l
68.5874 12.4037 l
70.4799 13.4255 l
72.5489 14.6545 l
74.4956 15.9133 l
76.5305 17.3299 l
78.5200 18.8091 l
80.6028 20.4512 l
82.6088 22.1167 l
84.6603 23.8983 l
86.6947 25.7360 l
88.5641 27.4806 l
90.7067 29.5380 l
92.6231 31.4234 l
94.6663 33.4726 l
96.6220 35.4640 l
98.7935 37.7006 l
100.673 39.6511 l
104.753 43.8930 l
106.880 46.0930 l
108.716 47.9745 l
110.807 50.0899 l
112.826 52.0976 l
114.845 54.0607 l
116.856 55.9658 l
118.787 57.7412 l
120.876 59.5926 l
122.866 61.2842 l
124.961 62.9805 l
126.857 64.4356 l
128.952 65.9486 l
130.960 67.2982 l
132.962 68.5420 l
135.054 69.7265 l
136.980 70.7096 l
138.953 71.6053 l
141.131 72.4596 l
143.103 73.1079 l
145.120 73.6453 l
147.171 74.0593 l
149.057 74.3205 l
150.062 74.4126 l
151.067 74.4719 l
152.064 74.4982 l
153.061 74.4921 l
154.128 74.4497 l
155.195 74.3702 l
157.078 74.1398 l
159.250 73.7320 l
161.210 73.2349 l
163.150 72.6244 l
165.236 71.8389 l
167.330 70.9190 l
169.235 69.9710 l
171.259 68.8525 l
173.233 67.6541 l
175.374 66.2412 l
177.226 64.9278 l
179.353 63.3213 l
181.353 61.7218 l
183.334 60.0587 l
185.316 58.3219 l
187.337 56.4828 l
189.480 54.4671 l
191.445 52.5664 l
193.384 50.6483 l
195.458 48.5598 l
197.526 46.4452 l
199.383 44.5286 l
201.583 42.2446 l
203.423 40.3295 l
205.576 38.0940 l
207.630 35.9740 l
209.465 34.0994 l
211.528 32.0198 l
213.605 29.9657 l
215.671 27.9689 l
217.588 26.1673 l
219.572 24.3594 l
221.624 22.5586 l
223.669 20.8406 l
225.773 19.1611 l
227.626 17.7613 l
229.712 16.2805 l
231.807 14.9012 l
233.826 13.6795 l
235.659 12.6656 l
237.839 11.5832 l
239.685 10.7745 l
241.833 9.96252 l
243.735 9.36203 l
245.821 8.83364 l
247.807 8.45935 l
249.880 8.20442 l
250.832 8.13406 l
251.783 8.09319 l
252.810 8.08221 l
253.836 8.10559 l
254.902 8.16623 l
255.969 8.26385 l
257.825 8.52169 l
259.830 8.92466 l
261.901 9.47509 l
263.928 10.1432 l
265.888 10.9092 l
268.065 11.8940 l
270.021 12.8956 l
272.110 14.0826 l
274.002 15.2591 l
276.071 16.6498 l
278.018 18.0530 l
280.053 19.6121 l
282.042 21.2216 l
284.125 22.9901 l
286.131 24.7672 l
288.182 26.6519 l
290.217 28.5808 l
292.086 30.3990 l
294.229 32.5284 l
296.145 34.4667 l
298.189 36.5602 l
300.144 38.5823 l
302.316 40.8392 l
304.196 42.7955 l
306.330 45.0093 l
308.275 47.0126 l
310.403 49.1794 l
312.239 51.0211 l
314.330 53.0791 l
316.349 55.0191 l
318.367 56.9028 l
320.378 58.7176 l
322.310 60.3960 l
324.398 62.1314 l
326.388 63.7025 l
328.483 65.2617 l
330.379 66.5843 l
332.475 67.9420 l
334.482 69.1347 l
336.485 70.2149 l
338.576 71.2214 l
340.503 72.0349 l
342.475 72.7519 l
344.654 73.4038 l
346.626 73.8651 l
348.643 74.2082 l
349.668 74.3323 l
350.694 74.4223 l
351.637 74.4748 l
352.579 74.4984 l
353.584 74.4916 l
354.589 74.4518 l
355.587 74.3799 l
356.584 74.2757 l
358.717 73.9447 l
360.600 73.5313 l
362.772 72.9150 l
364.733 72.2331 l
366.672 71.4434 l
368.758 70.4701 l
370.852 69.3674 l
372.758 68.2590 l
374.781 66.9768 l
376.756 65.6259 l
378.897 64.0565 l
380.749 62.6156 l
382.876 60.8723 l
384.876 59.1541 l
386.856 57.3833 l
388.838 55.5491 l
390.860 53.6217 l
393.003 51.5249 l
394.968 49.5615 l
396.907 47.5927 l
398.980 45.4624 l
401.049 43.3193 l
403.000 41.2907 l
S
cliprestore
newpath
0 0 m
0 83.0000 l
404.000 83.0000 l
404.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
2.00000 41.0000 m
403.000 41.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
295 61 14 15 rc
newpath
301.278 67.2553 m
301.486 67.4754 301.642 67.6954 301.748 67.9155  c
301.824 68.0678 301.949 68.4677 302.123 69.1152  c
302.681 68.2773 l
302.829 68.0742 303.009 67.8806 303.221 67.6965  c
303.432 67.5124 303.619 67.3865 303.779 67.3188  c
303.881 67.2765 303.993 67.2553 304.116 67.2553  c
304.298 67.2553 304.443 67.3040 304.551 67.4013  c
304.658 67.4987 304.712 67.6171 304.712 67.7568  c
304.712 67.9176 304.681 68.0276 304.617 68.0869  c
304.499 68.1927 304.363 68.2456 304.211 68.2456  c
304.122 68.2456 304.027 68.2265 303.925 68.1884  c
303.726 68.1207 303.593 68.0869 303.525 68.0869  c
303.424 68.0869 303.303 68.1461 303.164 68.2646  c
302.901 68.4847 302.588 68.9099 302.224 69.5405  c
302.745 71.7241 l
302.825 72.0584 302.893 72.2583 302.948 72.3239  c
303.003 72.3895 303.058 72.4223 303.113 72.4223  c
303.202 72.4223 303.305 72.3737 303.424 72.2763  c
303.657 72.0817 303.856 71.8278 304.021 71.5146  c
304.243 71.6289 l
303.976 72.1282 303.638 72.5429 303.227 72.8730  c
302.994 73.0592 302.798 73.1523 302.637 73.1523  c
302.400 73.1523 302.211 73.0190 302.072 72.7524  c
301.983 72.5874 301.799 71.8764 301.520 70.6196  c
300.859 71.7664 300.330 72.5048 299.933 72.8349  c
299.675 73.0465 299.425 73.1523 299.184 73.1523  c
299.014 73.1523 298.860 73.0909 298.720 72.9682  c
298.619 72.8751 298.568 72.7503 298.568 72.5937  c
298.568 72.4541 298.614 72.3377 298.708 72.2446  c
298.801 72.1515 298.915 72.1049 299.050 72.1049  c
299.186 72.1049 299.330 72.1726 299.482 72.3081  c
299.592 72.4054 299.677 72.4541 299.736 72.4541  c
299.787 72.4541 299.852 72.4202 299.933 72.3525  c
300.132 72.1917 300.402 71.8447 300.745 71.3115  c
301.088 70.7783 301.312 70.3932 301.418 70.1562  c
301.156 69.1279 301.014 68.5841 300.993 68.5249  c
300.895 68.2498 300.768 68.0551 300.612 67.9409  c
300.455 67.8266 300.225 67.7695 299.920 67.7695  c
299.823 67.7695 299.710 67.7737 299.584 67.7822  c
299.584 67.5537 l
h
f
Q
cliprestore
newpath
0 0 m
0 83.0000 l
404.000 83.0000 l
404.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
11.0000 41.0000 m
11.0000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
8 52 7 13 rc
newpath
18.7900 59.4380 m
10.2100 59.4380 l
10.2100 58.7620 l
18.7900 58.7620 l
h
f
Q
newpath
17.6601 56.0302 m
17.9056 55.4505 18.2155 55.0030 18.5900 54.6877  c
18.9646 54.3724 19.4311 54.2148 19.9897 54.2148  c
20.6795 54.2148 21.2085 54.4391 21.5766 54.8877  c
21.8559 55.2220 21.9956 55.5795 21.9956 55.9604  c
21.9956 56.5867 21.6020 57.2342 20.8149 57.9028  c
21.3439 58.1101 21.7438 58.4064 22.0146 58.7915  c
22.2854 59.1766 22.4209 59.6293 22.4209 60.1499  c
22.4209 60.8946 22.1839 61.5400 21.7099 62.0859  c
21.0921 62.7968 20.1971 63.1523 19.0249 63.1523  c
18.4451 63.1523 18.0505 63.0804 17.8410 62.9365  c
17.6315 62.7926 17.5268 62.6381 17.5268 62.4731  c
17.5268 62.3504 17.5765 62.2425 17.6760 62.1494  c
17.7754 62.0563 17.8950 62.0097 18.0346 62.0097  c
18.1404 62.0097 18.2483 62.0266 18.3584 62.0605  c
18.4303 62.0817 18.5932 62.1589 18.8471 62.2922  c
19.1010 62.4255 19.2766 62.5048 19.3740 62.5302  c
19.5306 62.5768 19.6977 62.6001 19.8754 62.6001  c
20.3071 62.6001 20.6827 62.4329 21.0022 62.0986  c
21.3217 61.7643 21.4814 61.3686 21.4814 60.9116  c
21.4814 60.5773 21.4073 60.2514 21.2592 59.9340  c
21.1492 59.6971 21.0286 59.5172 20.8974 59.3945  c
20.7154 59.2252 20.4658 59.0718 20.1484 58.9343  c
19.8310 58.7967 19.5073 58.7280 19.1772 58.7280  c
18.9741 58.7280 l
18.9741 58.5376 l
19.3084 58.4952 19.6438 58.3746 19.9802 58.1757  c
20.3166 57.9768 20.5610 57.7377 20.7133 57.4585  c
20.8657 57.1792 20.9418 56.8724 20.9418 56.5380  c
20.9418 56.1022 20.8054 55.7499 20.5324 55.4812  c
20.2595 55.2124 19.9199 55.0781 19.5136 55.0781  c
18.8577 55.0781 18.3097 55.4293 17.8696 56.1318  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
75.0000 41.0000 m
75.0000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
71 52 7 13 rc
newpath
81.7900 59.4380 m
73.2100 59.4380 l
73.2100 58.7620 l
81.7900 58.7620 l
h
f
Q
newpath
85.9604 61.3432 m
85.3574 63.0000 l
80.2793 63.0000 l
80.2793 62.7651 l
81.7731 61.4025 82.8247 60.2895 83.4340 59.4262  c
84.0434 58.5629 84.3481 57.7737 84.3481 57.0585  c
84.3481 56.5127 84.1809 56.0641 83.8466 55.7128  c
83.5123 55.3616 83.1124 55.1860 82.6469 55.1860  c
82.2238 55.1860 81.8439 55.3098 81.5075 55.5573  c
81.1711 55.8049 80.9225 56.1678 80.7617 56.6460  c
80.5268 56.6460 l
80.6326 55.8631 80.9045 55.2622 81.3425 54.8432  c
81.7805 54.4243 82.3274 54.2148 82.9834 54.2148  c
83.6816 54.2148 84.2645 54.4391 84.7321 54.8877  c
85.1997 55.3362 85.4335 55.8652 85.4335 56.4746  c
85.4335 56.9104 85.3320 57.3463 85.1289 57.7822  c
84.8157 58.4677 84.3079 59.1935 83.6054 59.9594  c
82.5517 61.1105 81.8937 61.8045 81.6313 62.0415  c
83.8784 62.0415 l
84.3354 62.0415 84.6560 62.0245 84.8400 61.9907  c
85.0241 61.9568 85.1902 61.8881 85.3383 61.7844  c
85.4864 61.6807 85.6155 61.5336 85.7255 61.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
139.000 41.0000 m
139.000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
135 52 7 13 rc
newpath
145.790 59.4380 m
137.210 59.4380 l
137.210 58.7620 l
145.790 58.7620 l
h
f
Q
newpath
145.523 55.2368 m
147.618 54.2148 l
147.827 54.2148 l
147.827 61.4829 l
147.827 61.9653 147.847 62.2657 147.887 62.3842  c
147.928 62.5027 148.011 62.5937 148.138 62.6572  c
148.265 62.7207 148.523 62.7566 148.913 62.7651  c
148.913 63.0000 l
145.675 63.0000 l
145.675 62.7651 l
146.082 62.7566 146.344 62.7217 146.462 62.6604  c
146.581 62.5990 146.663 62.5165 146.710 62.4128  c
146.757 62.3091 146.780 61.9991 146.780 61.4829  c
146.780 56.8364 l
146.780 56.2101 146.759 55.8081 146.716 55.6303  c
146.687 55.4949 146.633 55.3955 146.554 55.3320  c
146.476 55.2685 146.382 55.2368 146.272 55.2368  c
146.115 55.2368 145.897 55.3024 145.618 55.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 41.0000 m
203.000 45.0000 l
S
Q
q
0 J
1 j
newpath
266.000 41.0000 m
266.000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
269.523 55.2368 m
271.618 54.2148 l
271.827 54.2148 l
271.827 61.4829 l
271.827 61.9653 271.847 62.2657 271.887 62.3842  c
271.928 62.5027 272.011 62.5937 272.138 62.6572  c
272.265 62.7207 272.523 62.7566 272.913 62.7651  c
272.913 63.0000 l
269.675 63.0000 l
269.675 62.7651 l
270.082 62.7566 270.344 62.7217 270.462 62.6604  c
270.581 62.5990 270.663 62.5165 270.710 62.4128  c
270.757 62.3091 270.780 61.9991 270.780 61.4829  c
270.780 56.8364 l
270.780 56.2101 270.759 55.8081 270.716 55.6303  c
270.687 55.4949 270.633 55.3955 270.554 55.3320  c
270.476 55.2685 270.382 55.2368 270.272 55.2368  c
270.115 55.2368 269.897 55.3024 269.618 55.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
330.000 41.0000 m
330.000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
337.960 61.3432 m
337.357 63.0000 l
332.279 63.0000 l
332.279 62.7651 l
333.773 61.4025 334.824 60.2895 335.434 59.4262  c
336.043 58.5629 336.348 57.7737 336.348 57.0585  c
336.348 56.5127 336.181 56.0641 335.846 55.7128  c
335.512 55.3616 335.112 55.1860 334.647 55.1860  c
334.223 55.1860 333.844 55.3098 333.507 55.5573  c
333.171 55.8049 332.922 56.1678 332.761 56.6460  c
332.526 56.6460 l
332.632 55.8631 332.904 55.2622 333.342 54.8432  c
333.780 54.4243 334.327 54.2148 334.983 54.2148  c
335.681 54.2148 336.264 54.4391 336.732 54.8877  c
337.199 55.3362 337.433 55.8652 337.433 56.4746  c
337.433 56.9104 337.332 57.3463 337.128 57.7822  c
336.815 58.4677 336.307 59.1935 335.605 59.9594  c
334.551 61.1105 333.893 61.8045 333.631 62.0415  c
335.878 62.0415 l
336.335 62.0415 336.656 62.0245 336.840 61.9907  c
337.024 61.9568 337.190 61.8881 337.338 61.7844  c
337.486 61.6807 337.615 61.5336 337.725 61.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
394.000 41.0000 m
394.000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
395.660 56.0302 m
395.905 55.4505 396.215 55.0030 396.590 54.6877  c
396.964 54.3724 397.431 54.2148 397.989 54.2148  c
398.679 54.2148 399.208 54.4391 399.576 54.8877  c
399.856 55.2220 399.995 55.5795 399.995 55.9604  c
399.995 56.5867 399.602 57.2342 398.814 57.9028  c
399.343 58.1101 399.743 58.4064 400.014 58.7915  c
400.285 59.1766 400.420 59.6293 400.420 60.1499  c
400.420 60.8946 400.183 61.5400 399.710 62.0859  c
399.092 62.7968 398.197 63.1523 397.024 63.1523  c
396.445 63.1523 396.050 63.0804 395.841 62.9365  c
395.631 62.7926 395.526 62.6381 395.526 62.4731  c
395.526 62.3504 395.576 62.2425 395.676 62.1494  c
395.775 62.0563 395.895 62.0097 396.034 62.0097  c
396.140 62.0097 396.248 62.0266 396.358 62.0605  c
396.430 62.0817 396.593 62.1589 396.847 62.2922  c
397.101 62.4255 397.276 62.5048 397.374 62.5302  c
397.530 62.5768 397.697 62.6001 397.875 62.6001  c
398.307 62.6001 398.682 62.4329 399.002 62.0986  c
399.321 61.7643 399.481 61.3686 399.481 60.9116  c
399.481 60.5773 399.407 60.2514 399.259 59.9340  c
399.149 59.6971 399.028 59.5172 398.897 59.3945  c
398.715 59.2252 398.465 59.0718 398.148 58.9343  c
397.831 58.7967 397.507 58.7280 397.177 58.7280  c
396.974 58.7280 l
396.974 58.5376 l
397.308 58.4952 397.643 58.3746 397.980 58.1757  c
398.316 57.9768 398.561 57.7377 398.713 57.4585  c
398.865 57.1792 398.941 56.8724 398.941 56.5380  c
398.941 56.1022 398.805 55.7499 398.532 55.4812  c
398.259 55.2124 397.919 55.0781 397.513 55.0781  c
396.857 55.0781 396.309 55.4293 395.869 56.1318  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
43.0000 41.0000 m
43.0000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
107.000 41.0000 m
107.000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
171.000 41.0000 m
171.000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
234.000 41.0000 m
234.000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
298.000 41.0000 m
298.000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
362.000 41.0000 m
362.000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
203.000 74.4984 m
203.000 8.08221 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
159 17 8 15 rc
Q
cliprestore
newpath
0 0 m
0 83.0000 l
404.000 83.0000 l
404.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
203.000 74.0000 m
199.000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
185 73 7 13 rc
newpath
195.790 80.4380 m
187.210 80.4380 l
187.210 79.7620 l
195.790 79.7620 l
h
f
Q
newpath
195.523 76.2368 m
197.618 75.2148 l
197.827 75.2148 l
197.827 82.4829 l
197.827 82.9653 197.847 83.2657 197.887 83.3842  c
197.928 83.5027 198.011 83.5937 198.138 83.6572  c
198.265 83.7207 198.523 83.7566 198.913 83.7651  c
198.913 84.0000 l
195.675 84.0000 l
195.675 83.7651 l
196.082 83.7566 196.344 83.7217 196.462 83.6604  c
196.581 83.5990 196.663 83.5165 196.710 83.4128  c
196.757 83.3091 196.780 82.9991 196.780 82.4829  c
196.780 77.8364 l
196.780 77.2101 196.759 76.8081 196.716 76.6303  c
196.687 76.4949 196.633 76.3955 196.554 76.3320  c
196.476 76.2685 196.382 76.2368 196.272 76.2368  c
196.115 76.2368 195.897 76.3024 195.618 76.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 58.0000 m
199.000 58.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
175 56 7 13 rc
newpath
185.790 63.4380 m
177.210 63.4380 l
177.210 62.7620 l
185.790 62.7620 l
h
f
Q
newpath
184.469 62.7470 m
184.469 61.7653 184.617 60.9200 184.914 60.2111  c
185.210 59.5023 185.603 58.9744 186.094 58.6274  c
186.475 58.3523 186.869 58.2148 187.275 58.2148  c
187.935 58.2148 188.528 58.5512 189.052 59.2241  c
189.708 60.0577 190.036 61.1876 190.036 62.6137  c
190.036 63.6124 189.892 64.4609 189.605 65.1591  c
189.317 65.8574 188.950 66.3641 188.503 66.6794  c
188.057 66.9947 187.626 67.1523 187.211 67.1523  c
186.391 67.1523 185.707 66.6678 185.161 65.6987  c
184.700 64.8820 184.469 63.8981 184.469 62.7470  c
h
185.713 62.9057 m
185.713 64.0906 185.859 65.0576 186.151 65.8066  c
186.393 66.4371 186.752 66.7524 187.231 66.7524  c
187.459 66.7524 187.696 66.6498 187.941 66.4445  c
188.187 66.2393 188.373 65.8955 188.500 65.4130  c
188.695 64.6852 188.792 63.6590 188.792 62.3344  c
188.792 61.3527 188.690 60.5338 188.487 59.8779  c
188.335 59.3912 188.138 59.0463 187.897 58.8432  c
187.724 58.7036 187.514 58.6337 187.269 58.6337  c
186.981 58.6337 186.725 58.7628 186.501 59.0210  c
186.196 59.3722 185.988 59.9244 185.878 60.6777  c
185.768 61.4309 185.713 62.1736 185.713 62.9057  c
h
192.625 65.7685 m
192.823 65.7685 192.991 65.8373 193.126 65.9748  c
193.261 66.1123 193.329 66.2784 193.329 66.4731  c
193.329 66.6678 193.260 66.8339 193.123 66.9714  c
192.985 67.1089 192.819 67.1777 192.625 67.1777  c
192.430 67.1777 192.264 67.1089 192.126 66.9714  c
191.989 66.8339 191.920 66.6678 191.920 66.4731  c
191.920 66.2742 191.989 66.1071 192.126 65.9716  c
192.264 65.8362 192.430 65.7685 192.625 65.7685  c
h
199.643 58.3925 m
199.147 59.4716 l
196.558 59.4716 l
195.993 60.6269 l
197.114 60.7919 198.003 61.2088 198.659 61.8774  c
199.222 62.4529 199.503 63.1300 199.503 63.9086  c
199.503 64.3614 199.411 64.7804 199.227 65.1655  c
199.043 65.5506 198.811 65.8785 198.532 66.1494  c
198.252 66.4202 197.941 66.6381 197.599 66.8032  c
197.112 67.0359 196.613 67.1523 196.101 67.1523  c
195.584 67.1523 195.209 67.0645 194.974 66.8889  c
194.739 66.7133 194.622 66.5196 194.622 66.3081  c
194.622 66.1896 194.670 66.0848 194.768 65.9939  c
194.865 65.9029 194.988 65.8574 195.136 65.8574  c
195.246 65.8574 195.342 65.8743 195.425 65.9082  c
195.507 65.9420 195.648 66.0288 195.847 66.1684  c
196.164 66.3885 196.486 66.4985 196.812 66.4985  c
197.307 66.4985 197.741 66.3112 198.116 65.9367  c
198.491 65.5622 198.678 65.1062 198.678 64.5688  c
198.678 64.0483 198.511 63.5627 198.176 63.1120  c
197.842 62.6613 197.381 62.3133 196.793 62.0678  c
196.331 61.8774 195.703 61.7674 194.907 61.7377  c
196.558 58.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 41.0000 m
199.000 41.0000 l
S
Q
q
0 J
1 j
newpath
203.000 25.0000 m
199.000 25.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
184.469 29.7470 m
184.469 28.7653 184.617 27.9200 184.914 27.2111  c
185.210 26.5023 185.603 25.9744 186.094 25.6274  c
186.475 25.3523 186.869 25.2148 187.275 25.2148  c
187.935 25.2148 188.528 25.5512 189.052 26.2241  c
189.708 27.0577 190.036 28.1876 190.036 29.6137  c
190.036 30.6124 189.892 31.4609 189.605 32.1591  c
189.317 32.8574 188.950 33.3641 188.503 33.6794  c
188.057 33.9947 187.626 34.1523 187.211 34.1523  c
186.391 34.1523 185.707 33.6678 185.161 32.6987  c
184.700 31.8820 184.469 30.8981 184.469 29.7470  c
h
185.713 29.9057 m
185.713 31.0906 185.859 32.0576 186.151 32.8066  c
186.393 33.4371 186.752 33.7524 187.231 33.7524  c
187.459 33.7524 187.696 33.6498 187.941 33.4445  c
188.187 33.2393 188.373 32.8955 188.500 32.4130  c
188.695 31.6852 188.792 30.6590 188.792 29.3344  c
188.792 28.3527 188.690 27.5338 188.487 26.8779  c
188.335 26.3912 188.138 26.0463 187.897 25.8432  c
187.724 25.7036 187.514 25.6337 187.269 25.6337  c
186.981 25.6337 186.725 25.7628 186.501 26.0210  c
186.196 26.3722 185.988 26.9244 185.878 27.6777  c
185.768 28.4309 185.713 29.1736 185.713 29.9057  c
h
192.625 32.7685 m
192.823 32.7685 192.991 32.8373 193.126 32.9748  c
193.261 33.1123 193.329 33.2784 193.329 33.4731  c
193.329 33.6678 193.260 33.8339 193.123 33.9714  c
192.985 34.1089 192.819 34.1777 192.625 34.1777  c
192.430 34.1777 192.264 34.1089 192.126 33.9714  c
191.989 33.8339 191.920 33.6678 191.920 33.4731  c
191.920 33.2742 191.989 33.1071 192.126 32.9716  c
192.264 32.8362 192.430 32.7685 192.625 32.7685  c
h
199.643 25.3925 m
199.147 26.4716 l
196.558 26.4716 l
195.993 27.6269 l
197.114 27.7919 198.003 28.2088 198.659 28.8774  c
199.222 29.4529 199.503 30.1300 199.503 30.9086  c
199.503 31.3614 199.411 31.7804 199.227 32.1655  c
199.043 32.5506 198.811 32.8785 198.532 33.1494  c
198.252 33.4202 197.941 33.6381 197.599 33.8032  c
197.112 34.0359 196.613 34.1523 196.101 34.1523  c
195.584 34.1523 195.209 34.0645 194.974 33.8889  c
194.739 33.7133 194.622 33.5196 194.622 33.3081  c
194.622 33.1896 194.670 33.0848 194.768 32.9939  c
194.865 32.9029 194.988 32.8574 195.136 32.8574  c
195.246 32.8574 195.342 32.8743 195.425 32.9082  c
195.507 32.9420 195.648 33.0288 195.847 33.1684  c
196.164 33.3885 196.486 33.4985 196.812 33.4985  c
197.307 33.4985 197.741 33.3112 198.116 32.9367  c
198.491 32.5622 198.678 32.1062 198.678 31.5688  c
198.678 31.0483 198.511 30.5627 198.176 30.1120  c
197.842 29.6613 197.381 29.3133 196.793 29.0678  c
196.331 28.8774 195.703 28.7674 194.907 28.7377  c
196.558 25.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 8.00000 m
199.000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
195.523 10.2368 m
197.618 9.21484 l
197.827 9.21484 l
197.827 16.4829 l
197.827 16.9653 197.847 17.2657 197.887 17.3842  c
197.928 17.5027 198.011 17.5937 198.138 17.6572  c
198.265 17.7207 198.523 17.7566 198.913 17.7651  c
198.913 18.0000 l
195.675 18.0000 l
195.675 17.7651 l
196.082 17.7566 196.344 17.7217 196.462 17.6604  c
196.581 17.5990 196.663 17.5165 196.710 17.4128  c
196.757 17.3091 196.780 16.9991 196.780 16.4829  c
196.780 11.8364 l
196.780 11.2101 196.759 10.8081 196.716 10.6303  c
196.687 10.4949 196.633 10.3955 196.554 10.3320  c
196.476 10.2685 196.382 10.2368 196.272 10.2368  c
196.115 10.2368 195.897 10.3024 195.618 10.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 71.0000 m
201.000 71.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 68.0000 m
201.000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 65.0000 m
201.000 65.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 61.0000 m
201.000 61.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 55.0000 m
201.000 55.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 51.0000 m
201.000 51.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 48.0000 m
201.000 48.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 45.0000 m
201.000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 38.0000 m
201.000 38.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 35.0000 m
201.000 35.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 31.0000 m
201.000 31.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 28.0000 m
201.000 28.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 21.0000 m
201.000 21.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 18.0000 m
201.000 18.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 15.0000 m
201.000 15.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 11.0000 m
201.000 11.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 414 93 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
