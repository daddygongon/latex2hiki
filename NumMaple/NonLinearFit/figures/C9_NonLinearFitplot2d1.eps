%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 280 575 511
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ15“ú 18Žž29•ª26•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
350 145 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
350.000 0 l
350.000 145.000 l
0 145.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 340 135 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
27.4312 2.01785 310.562 111.982 rc
newpath
28.4312 109.938 m
29.6373 111.597 l
30.8435 113.000 l
32.0496 106.457 l
33.2557 109.550 l
34.4618 106.014 l
35.6680 109.613 l
36.8741 104.616 l
38.0802 109.766 l
39.2864 107.094 l
40.4925 106.375 l
41.6986 106.692 l
42.9047 112.044 l
44.1109 109.497 l
45.3170 104.673 l
46.5231 111.041 l
47.7293 106.265 l
48.9354 108.817 l
50.1415 106.271 l
51.3476 109.836 l
52.5538 107.234 l
53.7599 105.098 l
54.9660 108.426 l
56.1722 109.085 l
57.3783 104.985 l
58.5844 108.232 l
59.7905 110.479 l
60.9967 111.779 l
62.2028 105.757 l
63.4089 107.188 l
64.6151 105.235 l
65.8212 108.274 l
67.0273 104.038 l
68.2334 103.951 l
69.4396 102.888 l
70.6457 107.343 l
71.8518 106.687 l
73.0580 108.496 l
74.2641 102.229 l
75.4702 104.632 l
76.6763 105.611 l
77.8825 105.682 l
79.0886 111.434 l
80.2947 111.236 l
81.5009 107.014 l
82.7070 107.589 l
83.9131 103.853 l
85.1192 103.137 l
86.3254 109.584 l
87.5315 102.156 l
88.7376 107.469 l
89.9438 103.525 l
91.1499 100.912 l
92.3560 105.948 l
93.5621 106.920 l
94.7683 101.413 l
95.9744 100.865 l
97.1805 102.365 l
98.3867 108.525 l
99.5928 105.965 l
100.799 105.215 l
102.005 107.441 l
103.211 107.574 l
104.417 98.9590 l
105.623 102.504 l
106.829 96.7737 l
108.035 108.962 l
109.241 102.990 l
110.448 109.068 l
111.654 100.217 l
112.860 105.415 l
114.066 94.8677 l
115.272 107.864 l
116.478 99.8481 l
117.684 105.560 l
118.890 97.9685 l
120.097 101.267 l
121.303 105.924 l
122.509 94.6389 l
123.715 102.839 l
124.921 91.4582 l
126.127 91.7093 l
127.333 103.405 l
128.539 99.2355 l
129.746 87.6687 l
130.952 87.9337 l
132.158 100.179 l
133.364 84.2722 l
134.570 91.4800 l
135.776 94.2342 l
136.982 99.7233 l
138.188 87.5166 l
139.395 90.1659 l
140.601 87.3077 l
141.807 92.5030 l
143.013 83.6100 l
144.219 81.2767 l
145.425 97.7631 l
146.631 97.7221 l
147.838 88.4723 l
149.044 79.0534 l
150.250 65.7389 l
151.456 67.6258 l
152.662 79.4709 l
153.868 89.9645 l
155.074 83.0449 l
156.280 50.7889 l
157.487 54.4901 l
158.693 74.4011 l
159.899 71.8465 l
161.105 46.7945 l
162.311 49.9201 l
163.517 35.1535 l
164.723 55.8704 l
165.929 62.6703 l
167.136 30.4344 l
168.342 25.4491 l
169.548 38.7725 l
170.754 14.2599 l
171.960 21.9166 l
173.166 36.7954 l
174.372 4.01786 l
175.578 22.6986 l
176.785 22.3895 l
177.991 48.9054 l
179.197 52.4787 l
180.403 26.1102 l
181.609 37.6304 l
182.815 36.2066 l
184.021 24.4380 l
185.228 44.9177 l
186.434 17.6193 l
187.640 52.0819 l
188.846 35.6455 l
190.052 12.6657 l
191.258 44.5815 l
192.464 20.0618 l
193.670 71.6185 l
194.877 62.7054 l
196.083 22.8251 l
197.289 66.3434 l
198.495 53.6219 l
199.701 34.6366 l
200.907 82.0513 l
202.113 52.3455 l
203.319 67.1579 l
204.526 53.3291 l
205.732 48.5388 l
206.938 79.1264 l
208.144 70.6481 l
209.350 73.6796 l
210.556 88.3988 l
211.762 69.9243 l
212.968 66.4583 l
214.175 85.1774 l
215.381 88.5968 l
216.587 75.1586 l
217.793 74.6768 l
218.999 74.3801 l
220.205 84.1309 l
221.411 95.4572 l
222.618 86.1347 l
223.824 87.3833 l
225.030 91.0524 l
226.236 95.6323 l
227.442 98.7379 l
228.648 102.761 l
229.854 103.196 l
231.060 86.1814 l
232.267 99.4544 l
233.473 92.1685 l
234.679 92.1631 l
235.885 101.458 l
237.091 96.6567 l
238.297 103.222 l
239.503 104.083 l
240.709 101.770 l
241.916 96.3254 l
243.122 99.5882 l
244.328 102.782 l
245.534 98.1526 l
246.740 95.3917 l
247.946 97.1576 l
249.152 104.319 l
250.358 101.271 l
251.565 101.647 l
252.771 98.5896 l
253.977 104.332 l
255.183 108.684 l
256.389 98.7854 l
257.595 98.4473 l
258.801 99.3808 l
260.007 105.493 l
261.214 98.6006 l
262.420 101.902 l
263.626 101.015 l
264.832 102.753 l
266.038 103.010 l
267.244 100.694 l
268.450 110.153 l
269.657 107.112 l
270.863 101.750 l
272.069 107.815 l
273.275 107.268 l
274.481 105.782 l
275.687 109.135 l
276.893 107.555 l
278.099 109.622 l
279.306 109.188 l
280.512 109.680 l
281.718 110.254 l
282.924 104.242 l
284.130 103.380 l
285.336 103.386 l
286.542 108.060 l
287.748 110.100 l
288.955 107.834 l
290.161 108.998 l
291.367 110.608 l
292.573 102.703 l
293.779 109.600 l
294.985 109.061 l
296.191 106.116 l
297.397 104.776 l
298.604 108.817 l
299.810 103.408 l
301.016 104.710 l
302.222 107.709 l
303.428 105.648 l
304.634 107.966 l
305.840 112.246 l
307.046 112.321 l
308.253 103.868 l
309.459 105.944 l
310.665 110.606 l
311.871 111.736 l
313.077 108.851 l
314.283 112.230 l
315.489 104.478 l
316.696 109.164 l
317.902 105.251 l
319.108 110.934 l
320.314 108.271 l
321.520 110.912 l
322.726 106.696 l
323.932 109.074 l
325.138 107.302 l
326.345 105.109 l
327.551 109.940 l
328.757 104.969 l
329.963 112.631 l
331.169 107.509 l
332.375 112.383 l
333.581 110.867 l
334.787 107.276 l
335.994 106.340 l
S
cliprestore
newpath
0 0 m
0 135.000 l
340.000 135.000 l
340.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
25.4312 116.000 m
335.994 116.000 l
S
Q
q
q
0 J
1 j
newpath
88.0000 116.000 m
88.0000 120.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
90.6430 126.392 m
90.1479 127.471 l
87.5581 127.471 l
86.9931 128.627 l
88.1145 128.792 89.0032 129.208 89.6591 129.877  c
90.2220 130.453 90.5034 131.130 90.5034 131.908  c
90.5034 132.361 90.4113 132.780 90.2272 133.165  c
90.0432 133.550 89.8115 133.878 89.5322 134.149  c
89.2529 134.420 88.9418 134.638 88.5991 134.803  c
88.1124 135.036 87.6131 135.152 87.1010 135.152  c
86.5848 135.152 86.2092 135.064 85.9743 134.888  c
85.7395 134.713 85.6220 134.519 85.6220 134.308  c
85.6220 134.189 85.6707 134.084 85.7680 133.993  c
85.8654 133.902 85.9881 133.857 86.1362 133.857  c
86.2462 133.857 86.3425 133.874 86.4250 133.908  c
86.5075 133.942 86.6482 134.028 86.8471 134.168  c
87.1645 134.388 87.4861 134.498 87.8120 134.498  c
88.3071 134.498 88.7419 134.311 89.1164 133.936  c
89.4909 133.562 89.6782 133.106 89.6782 132.568  c
89.6782 132.048 89.5110 131.562 89.1767 131.112  c
88.8424 130.661 88.3811 130.313 87.7929 130.067  c
87.3317 129.877 86.7032 129.767 85.9077 129.737  c
87.5581 126.392 l
h
92.4697 130.747 m
92.4697 129.765 92.6178 128.920 92.9140 128.211  c
93.2102 127.502 93.6038 126.974 94.0947 126.627  c
94.4755 126.352 94.8691 126.214 95.2753 126.214  c
95.9355 126.214 96.5279 126.551 97.0527 127.224  c
97.7086 128.057 98.0366 129.187 98.0366 130.613  c
98.0366 131.612 97.8927 132.460 97.6049 133.159  c
97.3172 133.857 96.9501 134.364 96.5036 134.679  c
96.0572 134.994 95.6266 135.152 95.2119 135.152  c
94.3909 135.152 93.7075 134.667 93.1616 133.698  c
92.7003 132.882 92.4697 131.898 92.4697 130.747  c
h
93.7138 130.905 m
93.7138 132.090 93.8598 133.057 94.1518 133.806  c
94.3930 134.437 94.7527 134.752 95.2309 134.752  c
95.4594 134.752 95.6964 134.649 95.9418 134.444  c
96.1873 134.239 96.3735 133.895 96.5004 133.413  c
96.6951 132.685 96.7924 131.659 96.7924 130.334  c
96.7924 129.352 96.6909 128.533 96.4877 127.877  c
96.3354 127.391 96.1386 127.046 95.8974 126.843  c
95.7239 126.703 95.5144 126.633 95.2690 126.633  c
94.9812 126.633 94.7252 126.762 94.5009 127.021  c
94.1962 127.372 93.9889 127.924 93.8789 128.677  c
93.7688 129.431 93.7138 130.173 93.7138 130.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
148.000 116.000 m
148.000 120.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
143.523 127.236 m
145.618 126.214 l
145.827 126.214 l
145.827 133.482 l
145.827 133.965 145.847 134.265 145.887 134.384  c
145.928 134.502 146.011 134.593 146.138 134.657  c
146.265 134.720 146.523 134.756 146.913 134.765  c
146.913 135.000 l
143.675 135.000 l
143.675 134.765 l
144.082 134.756 144.344 134.721 144.462 134.660  c
144.581 134.599 144.663 134.516 144.710 134.412  c
144.757 134.309 144.780 133.999 144.780 133.482  c
144.780 128.836 l
144.780 128.210 144.759 127.808 144.716 127.630  c
144.687 127.495 144.633 127.395 144.554 127.332  c
144.476 127.268 144.382 127.236 144.272 127.236  c
144.115 127.236 143.897 127.302 143.618 127.433  c
h
149.469 130.747 m
149.469 129.765 149.617 128.920 149.914 128.211  c
150.210 127.502 150.603 126.974 151.094 126.627  c
151.475 126.352 151.869 126.214 152.275 126.214  c
152.935 126.214 153.528 126.551 154.052 127.224  c
154.708 128.057 155.036 129.187 155.036 130.613  c
155.036 131.612 154.892 132.460 154.605 133.159  c
154.317 133.857 153.950 134.364 153.503 134.679  c
153.057 134.994 152.626 135.152 152.211 135.152  c
151.391 135.152 150.707 134.667 150.161 133.698  c
149.700 132.882 149.469 131.898 149.469 130.747  c
h
150.713 130.905 m
150.713 132.090 150.859 133.057 151.151 133.806  c
151.393 134.437 151.752 134.752 152.231 134.752  c
152.459 134.752 152.696 134.649 152.941 134.444  c
153.187 134.239 153.373 133.895 153.500 133.413  c
153.695 132.685 153.792 131.659 153.792 130.334  c
153.792 129.352 153.690 128.533 153.487 127.877  c
153.335 127.391 153.138 127.046 152.897 126.843  c
152.724 126.703 152.514 126.633 152.269 126.633  c
151.981 126.633 151.725 126.762 151.501 127.021  c
151.196 127.372 150.988 127.924 150.878 128.677  c
150.768 129.431 150.713 130.173 150.713 130.905  c
h
156.469 130.747 m
156.469 129.765 156.617 128.920 156.914 128.211  c
157.210 127.502 157.603 126.974 158.094 126.627  c
158.475 126.352 158.869 126.214 159.275 126.214  c
159.935 126.214 160.528 126.551 161.052 127.224  c
161.708 128.057 162.036 129.187 162.036 130.613  c
162.036 131.612 161.892 132.460 161.605 133.159  c
161.317 133.857 160.950 134.364 160.503 134.679  c
160.057 134.994 159.626 135.152 159.211 135.152  c
158.391 135.152 157.707 134.667 157.161 133.698  c
156.700 132.882 156.469 131.898 156.469 130.747  c
h
157.713 130.905 m
157.713 132.090 157.859 133.057 158.151 133.806  c
158.393 134.437 158.752 134.752 159.231 134.752  c
159.459 134.752 159.696 134.649 159.941 134.444  c
160.187 134.239 160.373 133.895 160.500 133.413  c
160.695 132.685 160.792 131.659 160.792 130.334  c
160.792 129.352 160.690 128.533 160.487 127.877  c
160.335 127.391 160.138 127.046 159.897 126.843  c
159.724 126.703 159.514 126.633 159.269 126.633  c
158.981 126.633 158.725 126.762 158.501 127.021  c
158.196 127.372 157.988 127.924 157.878 128.677  c
157.768 129.431 157.713 130.173 157.713 130.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
208.000 116.000 m
208.000 120.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
204.523 127.236 m
206.618 126.214 l
206.827 126.214 l
206.827 133.482 l
206.827 133.965 206.847 134.265 206.887 134.384  c
206.928 134.502 207.011 134.593 207.138 134.657  c
207.265 134.720 207.523 134.756 207.913 134.765  c
207.913 135.000 l
204.675 135.000 l
204.675 134.765 l
205.082 134.756 205.344 134.721 205.462 134.660  c
205.581 134.599 205.663 134.516 205.710 134.412  c
205.757 134.309 205.780 133.999 205.780 133.482  c
205.780 128.836 l
205.780 128.210 205.759 127.808 205.716 127.630  c
205.687 127.495 205.633 127.395 205.554 127.332  c
205.476 127.268 205.382 127.236 205.272 127.236  c
205.115 127.236 204.897 127.302 204.618 127.433  c
h
215.643 126.392 m
215.147 127.471 l
212.558 127.471 l
211.993 128.627 l
213.114 128.792 214.003 129.208 214.659 129.877  c
215.222 130.453 215.503 131.130 215.503 131.908  c
215.503 132.361 215.411 132.780 215.227 133.165  c
215.043 133.550 214.811 133.878 214.532 134.149  c
214.252 134.420 213.941 134.638 213.599 134.803  c
213.112 135.036 212.613 135.152 212.101 135.152  c
211.584 135.152 211.209 135.064 210.974 134.888  c
210.739 134.713 210.622 134.519 210.622 134.308  c
210.622 134.189 210.670 134.084 210.768 133.993  c
210.865 133.902 210.988 133.857 211.136 133.857  c
211.246 133.857 211.342 133.874 211.425 133.908  c
211.507 133.942 211.648 134.028 211.847 134.168  c
212.164 134.388 212.486 134.498 212.812 134.498  c
213.307 134.498 213.741 134.311 214.116 133.936  c
214.491 133.562 214.678 133.106 214.678 132.568  c
214.678 132.048 214.511 131.562 214.176 131.112  c
213.842 130.661 213.381 130.313 212.793 130.067  c
212.331 129.877 211.703 129.767 210.907 129.737  c
212.558 126.392 l
h
217.469 130.747 m
217.469 129.765 217.617 128.920 217.914 128.211  c
218.210 127.502 218.603 126.974 219.094 126.627  c
219.475 126.352 219.869 126.214 220.275 126.214  c
220.935 126.214 221.528 126.551 222.052 127.224  c
222.708 128.057 223.036 129.187 223.036 130.613  c
223.036 131.612 222.892 132.460 222.605 133.159  c
222.317 133.857 221.950 134.364 221.503 134.679  c
221.057 134.994 220.626 135.152 220.211 135.152  c
219.391 135.152 218.707 134.667 218.161 133.698  c
217.700 132.882 217.469 131.898 217.469 130.747  c
h
218.713 130.905 m
218.713 132.090 218.859 133.057 219.151 133.806  c
219.393 134.437 219.752 134.752 220.231 134.752  c
220.459 134.752 220.696 134.649 220.941 134.444  c
221.187 134.239 221.373 133.895 221.500 133.413  c
221.695 132.685 221.792 131.659 221.792 130.334  c
221.792 129.352 221.690 128.533 221.487 127.877  c
221.335 127.391 221.138 127.046 220.897 126.843  c
220.724 126.703 220.514 126.633 220.269 126.633  c
219.981 126.633 219.725 126.762 219.501 127.021  c
219.196 127.372 218.988 127.924 218.878 128.677  c
218.768 129.431 218.713 130.173 218.713 130.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
268.000 116.000 m
268.000 120.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
268.960 133.343 m
268.357 135.000 l
263.279 135.000 l
263.279 134.765 l
264.773 133.402 265.824 132.289 266.434 131.426  c
267.043 130.563 267.348 129.773 267.348 129.058  c
267.348 128.512 267.181 128.064 266.846 127.712  c
266.512 127.361 266.112 127.186 265.647 127.186  c
265.223 127.186 264.844 127.309 264.507 127.557  c
264.171 127.804 263.922 128.167 263.761 128.646  c
263.526 128.646 l
263.632 127.863 263.904 127.262 264.342 126.843  c
264.780 126.424 265.327 126.214 265.983 126.214  c
266.681 126.214 267.264 126.439 267.732 126.887  c
268.199 127.336 268.433 127.865 268.433 128.474  c
268.433 128.910 268.332 129.346 268.128 129.782  c
267.815 130.467 267.307 131.193 266.605 131.959  c
265.551 133.110 264.893 133.804 264.631 134.041  c
266.878 134.041 l
267.335 134.041 267.656 134.024 267.840 133.990  c
268.024 133.956 268.190 133.888 268.338 133.784  c
268.486 133.680 268.615 133.533 268.725 133.343  c
h
270.469 130.747 m
270.469 129.765 270.617 128.920 270.914 128.211  c
271.210 127.502 271.603 126.974 272.094 126.627  c
272.475 126.352 272.869 126.214 273.275 126.214  c
273.935 126.214 274.528 126.551 275.052 127.224  c
275.708 128.057 276.036 129.187 276.036 130.613  c
276.036 131.612 275.892 132.460 275.605 133.159  c
275.317 133.857 274.950 134.364 274.503 134.679  c
274.057 134.994 273.626 135.152 273.211 135.152  c
272.391 135.152 271.707 134.667 271.161 133.698  c
270.700 132.882 270.469 131.898 270.469 130.747  c
h
271.713 130.905 m
271.713 132.090 271.859 133.057 272.151 133.806  c
272.393 134.437 272.752 134.752 273.231 134.752  c
273.459 134.752 273.696 134.649 273.941 134.444  c
274.187 134.239 274.373 133.895 274.500 133.413  c
274.695 132.685 274.792 131.659 274.792 130.334  c
274.792 129.352 274.690 128.533 274.487 127.877  c
274.335 127.391 274.138 127.046 273.897 126.843  c
273.724 126.703 273.514 126.633 273.269 126.633  c
272.981 126.633 272.725 126.762 272.501 127.021  c
272.196 127.372 271.988 127.924 271.878 128.677  c
271.768 129.431 271.713 130.173 271.713 130.905  c
h
277.469 130.747 m
277.469 129.765 277.617 128.920 277.914 128.211  c
278.210 127.502 278.603 126.974 279.094 126.627  c
279.475 126.352 279.869 126.214 280.275 126.214  c
280.935 126.214 281.528 126.551 282.052 127.224  c
282.708 128.057 283.036 129.187 283.036 130.613  c
283.036 131.612 282.892 132.460 282.605 133.159  c
282.317 133.857 281.950 134.364 281.503 134.679  c
281.057 134.994 280.626 135.152 280.211 135.152  c
279.391 135.152 278.707 134.667 278.161 133.698  c
277.700 132.882 277.469 131.898 277.469 130.747  c
h
278.713 130.905 m
278.713 132.090 278.859 133.057 279.151 133.806  c
279.393 134.437 279.752 134.752 280.231 134.752  c
280.459 134.752 280.696 134.649 280.941 134.444  c
281.187 134.239 281.373 133.895 281.500 133.413  c
281.695 132.685 281.792 131.659 281.792 130.334  c
281.792 129.352 281.690 128.533 281.487 127.877  c
281.335 127.391 281.138 127.046 280.897 126.843  c
280.724 126.703 280.514 126.633 280.269 126.633  c
279.981 126.633 279.725 126.762 279.501 127.021  c
279.196 127.372 278.988 127.924 278.878 128.677  c
278.768 129.431 278.713 130.173 278.713 130.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
329.000 116.000 m
329.000 120.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
328.960 133.343 m
328.357 135.000 l
323.279 135.000 l
323.279 134.765 l
324.773 133.402 325.824 132.289 326.434 131.426  c
327.043 130.563 327.348 129.773 327.348 129.058  c
327.348 128.512 327.181 128.064 326.846 127.712  c
326.512 127.361 326.112 127.186 325.647 127.186  c
325.223 127.186 324.844 127.309 324.507 127.557  c
324.171 127.804 323.922 128.167 323.761 128.646  c
323.526 128.646 l
323.632 127.863 323.904 127.262 324.342 126.843  c
324.780 126.424 325.327 126.214 325.983 126.214  c
326.681 126.214 327.264 126.439 327.732 126.887  c
328.199 127.336 328.433 127.865 328.433 128.474  c
328.433 128.910 328.332 129.346 328.128 129.782  c
327.815 130.467 327.307 131.193 326.605 131.959  c
325.551 133.110 324.893 133.804 324.631 134.041  c
326.878 134.041 l
327.335 134.041 327.656 134.024 327.840 133.990  c
328.024 133.956 328.190 133.888 328.338 133.784  c
328.486 133.680 328.615 133.533 328.725 133.343  c
h
335.643 126.392 m
335.147 127.471 l
332.558 127.471 l
331.993 128.627 l
333.114 128.792 334.003 129.208 334.659 129.877  c
335.222 130.453 335.503 131.130 335.503 131.908  c
335.503 132.361 335.411 132.780 335.227 133.165  c
335.043 133.550 334.811 133.878 334.532 134.149  c
334.252 134.420 333.941 134.638 333.599 134.803  c
333.112 135.036 332.613 135.152 332.101 135.152  c
331.584 135.152 331.209 135.064 330.974 134.888  c
330.739 134.713 330.622 134.519 330.622 134.308  c
330.622 134.189 330.670 134.084 330.768 133.993  c
330.865 133.902 330.988 133.857 331.136 133.857  c
331.246 133.857 331.342 133.874 331.425 133.908  c
331.507 133.942 331.648 134.028 331.847 134.168  c
332.164 134.388 332.486 134.498 332.812 134.498  c
333.307 134.498 333.741 134.311 334.116 133.936  c
334.491 133.562 334.678 133.106 334.678 132.568  c
334.678 132.048 334.511 131.562 334.176 131.112  c
333.842 130.661 333.381 130.313 332.793 130.067  c
332.331 129.877 331.703 129.767 330.907 129.737  c
332.558 126.392 l
h
337.469 130.747 m
337.469 129.765 337.617 128.920 337.914 128.211  c
338.210 127.502 338.603 126.974 339.094 126.627  c
339.475 126.352 339.869 126.214 340.275 126.214  c
340.935 126.214 341.528 126.551 342.052 127.224  c
342.708 128.057 343.036 129.187 343.036 130.613  c
343.036 131.612 342.892 132.460 342.605 133.159  c
342.317 133.857 341.950 134.364 341.503 134.679  c
341.057 134.994 340.626 135.152 340.211 135.152  c
339.391 135.152 338.707 134.667 338.161 133.698  c
337.700 132.882 337.469 131.898 337.469 130.747  c
h
338.713 130.905 m
338.713 132.090 338.859 133.057 339.151 133.806  c
339.393 134.437 339.752 134.752 340.231 134.752  c
340.459 134.752 340.696 134.649 340.941 134.444  c
341.187 134.239 341.373 133.895 341.500 133.413  c
341.695 132.685 341.792 131.659 341.792 130.334  c
341.792 129.352 341.690 128.533 341.487 127.877  c
341.335 127.391 341.138 127.046 340.897 126.843  c
340.724 126.703 340.514 126.633 340.269 126.633  c
339.981 126.633 339.725 126.762 339.501 127.021  c
339.196 127.372 338.988 127.924 338.878 128.677  c
338.768 129.431 338.713 130.173 338.713 130.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
39.0000 116.000 m
39.0000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
51.0000 116.000 m
51.0000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
63.0000 116.000 m
63.0000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
75.0000 116.000 m
75.0000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
100.000 116.000 m
100.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
112.000 116.000 m
112.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
124.000 116.000 m
124.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
136.000 116.000 m
136.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
160.000 116.000 m
160.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
172.000 116.000 m
172.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
184.000 116.000 m
184.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
196.000 116.000 m
196.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
220.000 116.000 m
220.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
232.000 116.000 m
232.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
244.000 116.000 m
244.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
256.000 116.000 m
256.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
281.000 116.000 m
281.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
293.000 116.000 m
293.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
305.000 116.000 m
305.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
317.000 116.000 m
317.000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
25.0000 116.000 m
25.0000 4.01786 l
S
Q
q
q
0 J
1 j
newpath
25.0000 103.000 m
22.0000 103.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.9604 110.343 m
18.3574 112.000 l
13.2793 112.000 l
13.2793 111.765 l
14.7731 110.402 15.8247 109.289 16.4340 108.426  c
17.0434 107.563 17.3481 106.773 17.3481 106.058  c
17.3481 105.512 17.1809 105.064 16.8466 104.712  c
16.5123 104.361 16.1124 104.186 15.6469 104.186  c
15.2238 104.186 14.8439 104.309 14.5075 104.557  c
14.1711 104.804 13.9225 105.167 13.7617 105.646  c
13.5268 105.646 l
13.6326 104.863 13.9045 104.262 14.3425 103.843  c
14.7805 103.424 15.3274 103.214 15.9834 103.214  c
16.6816 103.214 17.2645 103.439 17.7321 103.887  c
18.1997 104.336 18.4335 104.865 18.4335 105.474  c
18.4335 105.910 18.3320 106.346 18.1289 106.782  c
17.8157 107.467 17.3079 108.193 16.6054 108.959  c
15.5517 110.110 14.8937 110.804 14.6313 111.041  c
16.8784 111.041 l
17.3354 111.041 17.6560 111.024 17.8400 110.990  c
18.0241 110.956 18.1902 110.888 18.3383 110.784  c
18.4864 110.680 18.6155 110.533 18.7255 110.343  c
h
20.4697 107.747 m
20.4697 106.765 20.6178 105.920 20.9140 105.211  c
21.2102 104.502 21.6038 103.974 22.0947 103.627  c
22.4755 103.352 22.8691 103.214 23.2753 103.214  c
23.9355 103.214 24.5279 103.551 25.0527 104.224  c
25.7086 105.057 26.0366 106.187 26.0366 107.613  c
26.0366 108.612 25.8927 109.460 25.6049 110.159  c
25.3172 110.857 24.9501 111.364 24.5036 111.679  c
24.0572 111.994 23.6266 112.152 23.2119 112.152  c
22.3909 112.152 21.7075 111.667 21.1616 110.698  c
20.7003 109.882 20.4697 108.898 20.4697 107.747  c
h
21.7138 107.905 m
21.7138 109.090 21.8598 110.057 22.1518 110.806  c
22.3930 111.437 22.7527 111.752 23.2309 111.752  c
23.4594 111.752 23.6964 111.649 23.9418 111.444  c
24.1873 111.239 24.3735 110.895 24.5004 110.413  c
24.6951 109.685 24.7924 108.659 24.7924 107.334  c
24.7924 106.352 24.6909 105.533 24.4877 104.877  c
24.3354 104.391 24.1386 104.046 23.8974 103.843  c
23.7239 103.703 23.5144 103.633 23.2690 103.633  c
22.9812 103.633 22.7252 103.762 22.5009 104.021  c
22.1962 104.372 21.9889 104.924 21.8789 105.677  c
21.7688 106.431 21.7138 107.173 21.7138 107.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 86.0000 m
22.0000 86.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
19.0493 92.8261 m
19.0493 93.7275 l
17.8940 93.7275 l
17.8940 96.0000 l
16.8466 96.0000 l
16.8466 93.7275 l
13.2031 93.7275 l
13.2031 92.9150 l
17.1958 87.2148 l
17.8940 87.2148 l
17.8940 92.8261 l
h
16.8466 92.8261 m
16.8466 88.5542 l
13.8252 92.8261 l
h
20.4697 91.7470 m
20.4697 90.7653 20.6178 89.9200 20.9140 89.2111  c
21.2102 88.5023 21.6038 87.9744 22.0947 87.6274  c
22.4755 87.3523 22.8691 87.2148 23.2753 87.2148  c
23.9355 87.2148 24.5279 87.5512 25.0527 88.2241  c
25.7086 89.0577 26.0366 90.1876 26.0366 91.6137  c
26.0366 92.6124 25.8927 93.4609 25.6049 94.1591  c
25.3172 94.8574 24.9501 95.3641 24.5036 95.6794  c
24.0572 95.9947 23.6266 96.1523 23.2119 96.1523  c
22.3909 96.1523 21.7075 95.6678 21.1616 94.6987  c
20.7003 93.8820 20.4697 92.8981 20.4697 91.7470  c
h
21.7138 91.9057 m
21.7138 93.0906 21.8598 94.0576 22.1518 94.8066  c
22.3930 95.4371 22.7527 95.7524 23.2309 95.7524  c
23.4594 95.7524 23.6964 95.6498 23.9418 95.4445  c
24.1873 95.2393 24.3735 94.8955 24.5004 94.4130  c
24.6951 93.6852 24.7924 92.6590 24.7924 91.3344  c
24.7924 90.3527 24.6909 89.5338 24.4877 88.8779  c
24.3354 88.3912 24.1386 88.0463 23.8974 87.8432  c
23.7239 87.7036 23.5144 87.6337 23.2690 87.6337  c
22.9812 87.6337 22.7252 87.7628 22.5009 88.0210  c
22.1962 88.3722 21.9889 88.9244 21.8789 89.6777  c
21.7688 90.4309 21.7138 91.1736 21.7138 91.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 69.0000 m
22.0000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.8271 70.2148 m
18.8271 70.4497 l
18.2685 70.5047 17.8125 70.6158 17.4592 70.7829  c
17.1058 70.9501 16.7567 71.2050 16.4118 71.5478  c
16.0669 71.8906 15.7813 72.2725 15.5549 72.6936  c
15.3285 73.1146 15.1391 73.6150 14.9868 74.1948  c
15.5961 73.7758 16.2076 73.5664 16.8212 73.5664  c
17.4095 73.5664 17.9194 73.8033 18.3510 74.2773  c
18.7827 74.7513 18.9985 75.3606 18.9985 76.1054  c
18.9985 76.8248 18.7806 77.4807 18.3447 78.0732  c
17.8199 78.7926 17.1259 79.1523 16.2627 79.1523  c
15.6744 79.1523 15.1751 78.9576 14.7646 78.5683  c
13.9606 77.8108 13.5585 76.8291 13.5585 75.6230  c
13.5585 74.8528 13.7130 74.1207 14.0219 73.4267  c
14.3308 72.7327 14.7720 72.1170 15.3454 71.5795  c
15.9188 71.0421 16.4679 70.6803 16.9926 70.4941  c
17.5174 70.3079 18.0061 70.2148 18.4589 70.2148  c
h
14.8789 74.6582 m
14.8027 75.2294 14.7646 75.6907 14.7646 76.0419  c
14.7646 76.4482 14.8397 76.8894 14.9899 77.3654  c
15.1402 77.8415 15.3634 78.2192 15.6596 78.4985  c
15.8754 78.6974 16.1378 78.7968 16.4467 78.7968  c
16.8149 78.7968 17.1439 78.6233 17.4338 78.2763  c
17.7237 77.9293 17.8686 77.4342 17.8686 76.7910  c
17.8686 76.0673 17.7247 75.4410 17.4370 74.9121  c
17.1492 74.3831 16.7408 74.1186 16.2119 74.1186  c
16.0511 74.1186 15.8786 74.1525 15.6945 74.2202  c
15.5105 74.2879 15.2386 74.4339 14.8789 74.6582  c
h
20.4697 74.7470 m
20.4697 73.7653 20.6178 72.9200 20.9140 72.2111  c
21.2102 71.5023 21.6038 70.9744 22.0947 70.6274  c
22.4755 70.3523 22.8691 70.2148 23.2753 70.2148  c
23.9355 70.2148 24.5279 70.5512 25.0527 71.2241  c
25.7086 72.0577 26.0366 73.1876 26.0366 74.6137  c
26.0366 75.6124 25.8927 76.4609 25.6049 77.1591  c
25.3172 77.8574 24.9501 78.3641 24.5036 78.6794  c
24.0572 78.9947 23.6266 79.1523 23.2119 79.1523  c
22.3909 79.1523 21.7075 78.6678 21.1616 77.6987  c
20.7003 76.8820 20.4697 75.8981 20.4697 74.7470  c
h
21.7138 74.9057 m
21.7138 76.0906 21.8598 77.0576 22.1518 77.8066  c
22.3930 78.4371 22.7527 78.7524 23.2309 78.7524  c
23.4594 78.7524 23.6964 78.6498 23.9418 78.4445  c
24.1873 78.2393 24.3735 77.8955 24.5004 77.4130  c
24.6951 76.6852 24.7924 75.6590 24.7924 74.3344  c
24.7924 73.3527 24.6909 72.5338 24.4877 71.8779  c
24.3354 71.3912 24.1386 71.0463 23.8974 70.8432  c
23.7239 70.7036 23.5144 70.6337 23.2690 70.6337  c
22.9812 70.6337 22.7252 70.7628 22.5009 71.0210  c
22.1962 71.3722 21.9889 71.9244 21.8789 72.6777  c
21.7688 73.4309 21.7138 74.1736 21.7138 74.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 53.0000 m
22.0000 53.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
15.4946 57.6645 m
14.8133 57.1059 14.3742 56.6573 14.1774 56.3188  c
13.9807 55.9803 13.8823 55.6290 13.8823 55.2651  c
13.8823 54.7065 14.0981 54.2251 14.5297 53.8210  c
14.9614 53.4169 15.5348 53.2148 16.2500 53.2148  c
16.9440 53.2148 17.5026 53.4031 17.9257 53.7797  c
18.3489 54.1564 18.5605 54.5859 18.5605 55.0683  c
18.5605 55.3899 18.4462 55.7179 18.2177 56.0522  c
17.9892 56.3865 17.5131 56.7801 16.7895 57.2329  c
17.5343 57.8084 18.0273 58.2612 18.2685 58.5913  c
18.5901 59.0229 18.7509 59.4778 18.7509 59.9560  c
18.7509 60.5612 18.5203 61.0785 18.0590 61.5080  c
17.5978 61.9375 16.9926 62.1523 16.2436 62.1523  c
15.4269 62.1523 14.7900 61.8963 14.3330 61.3842  c
13.9690 60.9738 13.7871 60.5252 13.7871 60.0385  c
13.7871 59.6577 13.9151 59.2800 14.1711 58.9055  c
14.4271 58.5310 14.8683 58.1173 15.4946 57.6645  c
h
16.4912 56.9853 m
16.9990 56.5283 17.3206 56.1675 17.4560 55.9030  c
17.5914 55.6385 17.6591 55.3391 17.6591 55.0048  c
17.6591 54.5605 17.5343 54.2124 17.2846 53.9606  c
17.0349 53.7089 16.6943 53.5830 16.2627 53.5830  c
15.8310 53.5830 15.4798 53.7078 15.2089 53.9575  c
14.9381 54.2071 14.8027 54.4991 14.8027 54.8335  c
14.8027 55.0535 14.8588 55.2736 14.9709 55.4936  c
15.0830 55.7137 15.2428 55.9231 15.4502 56.1220  c
h
15.7929 57.9057 m
15.4417 58.2019 15.1814 58.5246 15.0122 58.8737  c
14.8429 59.2229 14.7583 59.6005 14.7583 60.0068  c
14.7583 60.5527 14.9074 60.9896 15.2058 61.3176  c
15.5041 61.6455 15.8839 61.8095 16.3452 61.8095  c
16.8022 61.8095 17.1682 61.6805 17.4433 61.4223  c
17.7184 61.1642 17.8559 60.8510 17.8559 60.4829  c
17.8559 60.1782 17.7755 59.9052 17.6147 59.6640  c
17.3142 59.2154 16.7070 58.6293 15.7929 57.9057  c
h
20.4697 57.7470 m
20.4697 56.7653 20.6178 55.9200 20.9140 55.2111  c
21.2102 54.5023 21.6038 53.9744 22.0947 53.6274  c
22.4755 53.3523 22.8691 53.2148 23.2753 53.2148  c
23.9355 53.2148 24.5279 53.5512 25.0527 54.2241  c
25.7086 55.0577 26.0366 56.1876 26.0366 57.6137  c
26.0366 58.6124 25.8927 59.4609 25.6049 60.1591  c
25.3172 60.8574 24.9501 61.3641 24.5036 61.6794  c
24.0572 61.9947 23.6266 62.1523 23.2119 62.1523  c
22.3909 62.1523 21.7075 61.6678 21.1616 60.6987  c
20.7003 59.8820 20.4697 58.8981 20.4697 57.7470  c
h
21.7138 57.9057 m
21.7138 59.0906 21.8598 60.0576 22.1518 60.8066  c
22.3930 61.4371 22.7527 61.7524 23.2309 61.7524  c
23.4594 61.7524 23.6964 61.6498 23.9418 61.4445  c
24.1873 61.2393 24.3735 60.8955 24.5004 60.4130  c
24.6951 59.6852 24.7924 58.6590 24.7924 57.3344  c
24.7924 56.3527 24.6909 55.5338 24.4877 54.8779  c
24.3354 54.3912 24.1386 54.0463 23.8974 53.8432  c
23.7239 53.7036 23.5144 53.6337 23.2690 53.6337  c
22.9812 53.6337 22.7252 53.7628 22.5009 54.0210  c
22.1962 54.3722 21.9889 54.9244 21.8789 55.6777  c
21.7688 56.4309 21.7138 57.1736 21.7138 57.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 36.0000 m
22.0000 36.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
7.52343 37.2368 m
9.61816 36.2148 l
9.82763 36.2148 l
9.82763 43.4829 l
9.82763 43.9653 9.84773 44.2657 9.88793 44.3842  c
9.92814 44.5027 10.0117 44.5937 10.1386 44.6572  c
10.2656 44.7207 10.5237 44.7566 10.9130 44.7651  c
10.9130 45.0000 l
7.67578 45.0000 l
7.67578 44.7651 l
8.08203 44.7566 8.34440 44.7217 8.46289 44.6604  c
8.58138 44.5990 8.66390 44.5165 8.71044 44.4128  c
8.75699 44.3091 8.78027 43.9991 8.78027 43.4829  c
8.78027 38.8364 l
8.78027 38.2101 8.75911 37.8081 8.71679 37.6303  c
8.68717 37.4949 8.63321 37.3955 8.55493 37.3320  c
8.47664 37.2685 8.38248 37.2368 8.27246 37.2368  c
8.11588 37.2368 7.89794 37.3024 7.61865 37.4335  c
h
13.4697 40.7470 m
13.4697 39.7653 13.6178 38.9200 13.9140 38.2111  c
14.2102 37.5023 14.6038 36.9744 15.0947 36.6274  c
15.4755 36.3523 15.8691 36.2148 16.2753 36.2148  c
16.9355 36.2148 17.5279 36.5512 18.0527 37.2241  c
18.7086 38.0577 19.0366 39.1876 19.0366 40.6137  c
19.0366 41.6124 18.8927 42.4609 18.6049 43.1591  c
18.3172 43.8574 17.9501 44.3641 17.5036 44.6794  c
17.0572 44.9947 16.6266 45.1523 16.2119 45.1523  c
15.3909 45.1523 14.7075 44.6678 14.1616 43.6987  c
13.7003 42.8820 13.4697 41.8981 13.4697 40.7470  c
h
14.7138 40.9057 m
14.7138 42.0906 14.8598 43.0576 15.1518 43.8066  c
15.3930 44.4371 15.7527 44.7524 16.2309 44.7524  c
16.4594 44.7524 16.6964 44.6498 16.9418 44.4445  c
17.1873 44.2393 17.3735 43.8955 17.5004 43.4130  c
17.6951 42.6852 17.7924 41.6590 17.7924 40.3344  c
17.7924 39.3527 17.6909 38.5338 17.4877 37.8779  c
17.3354 37.3912 17.1386 37.0463 16.8974 36.8432  c
16.7239 36.7036 16.5144 36.6337 16.2690 36.6337  c
15.9812 36.6337 15.7252 36.7628 15.5009 37.0210  c
15.1962 37.3722 14.9889 37.9244 14.8789 38.6777  c
14.7688 39.4309 14.7138 40.1736 14.7138 40.9057  c
h
20.4697 40.7470 m
20.4697 39.7653 20.6178 38.9200 20.9140 38.2111  c
21.2102 37.5023 21.6038 36.9744 22.0947 36.6274  c
22.4755 36.3523 22.8691 36.2148 23.2753 36.2148  c
23.9355 36.2148 24.5279 36.5512 25.0527 37.2241  c
25.7086 38.0577 26.0366 39.1876 26.0366 40.6137  c
26.0366 41.6124 25.8927 42.4609 25.6049 43.1591  c
25.3172 43.8574 24.9501 44.3641 24.5036 44.6794  c
24.0572 44.9947 23.6266 45.1523 23.2119 45.1523  c
22.3909 45.1523 21.7075 44.6678 21.1616 43.6987  c
20.7003 42.8820 20.4697 41.8981 20.4697 40.7470  c
h
21.7138 40.9057 m
21.7138 42.0906 21.8598 43.0576 22.1518 43.8066  c
22.3930 44.4371 22.7527 44.7524 23.2309 44.7524  c
23.4594 44.7524 23.6964 44.6498 23.9418 44.4445  c
24.1873 44.2393 24.3735 43.8955 24.5004 43.4130  c
24.6951 42.6852 24.7924 41.6590 24.7924 40.3344  c
24.7924 39.3527 24.6909 38.5338 24.4877 37.8779  c
24.3354 37.3912 24.1386 37.0463 23.8974 36.8432  c
23.7239 36.7036 23.5144 36.6337 23.2690 36.6337  c
22.9812 36.6337 22.7252 36.7628 22.5009 37.0210  c
22.1962 37.3722 21.9889 37.9244 21.8789 38.6777  c
21.7688 39.4309 21.7138 40.1736 21.7138 40.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 19.0000 m
22.0000 19.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
7.52343 21.2368 m
9.61816 20.2148 l
9.82763 20.2148 l
9.82763 27.4829 l
9.82763 27.9653 9.84773 28.2657 9.88793 28.3842  c
9.92814 28.5027 10.0117 28.5937 10.1386 28.6572  c
10.2656 28.7207 10.5237 28.7566 10.9130 28.7651  c
10.9130 29.0000 l
7.67578 29.0000 l
7.67578 28.7651 l
8.08203 28.7566 8.34440 28.7217 8.46289 28.6604  c
8.58138 28.5990 8.66390 28.5165 8.71044 28.4128  c
8.75699 28.3091 8.78027 27.9991 8.78027 27.4829  c
8.78027 22.8364 l
8.78027 22.2101 8.75911 21.8081 8.71679 21.6303  c
8.68717 21.4949 8.63321 21.3955 8.55493 21.3320  c
8.47664 21.2685 8.38248 21.2368 8.27246 21.2368  c
8.11588 21.2368 7.89794 21.3024 7.61865 21.4335  c
h
18.9604 27.3432 m
18.3574 29.0000 l
13.2793 29.0000 l
13.2793 28.7651 l
14.7731 27.4025 15.8247 26.2895 16.4340 25.4262  c
17.0434 24.5629 17.3481 23.7737 17.3481 23.0585  c
17.3481 22.5127 17.1809 22.0641 16.8466 21.7128  c
16.5123 21.3616 16.1124 21.1860 15.6469 21.1860  c
15.2238 21.1860 14.8439 21.3098 14.5075 21.5573  c
14.1711 21.8049 13.9225 22.1678 13.7617 22.6460  c
13.5268 22.6460 l
13.6326 21.8631 13.9045 21.2622 14.3425 20.8432  c
14.7805 20.4243 15.3274 20.2148 15.9834 20.2148  c
16.6816 20.2148 17.2645 20.4391 17.7321 20.8877  c
18.1997 21.3362 18.4335 21.8652 18.4335 22.4746  c
18.4335 22.9104 18.3320 23.3463 18.1289 23.7822  c
17.8157 24.4677 17.3079 25.1935 16.6054 25.9594  c
15.5517 27.1105 14.8937 27.8045 14.6313 28.0415  c
16.8784 28.0415 l
17.3354 28.0415 17.6560 28.0245 17.8400 27.9907  c
18.0241 27.9568 18.1902 27.8881 18.3383 27.7844  c
18.4864 27.6807 18.6155 27.5336 18.7255 27.3432  c
h
20.4697 24.7470 m
20.4697 23.7653 20.6178 22.9200 20.9140 22.2111  c
21.2102 21.5023 21.6038 20.9744 22.0947 20.6274  c
22.4755 20.3523 22.8691 20.2148 23.2753 20.2148  c
23.9355 20.2148 24.5279 20.5512 25.0527 21.2241  c
25.7086 22.0577 26.0366 23.1876 26.0366 24.6137  c
26.0366 25.6124 25.8927 26.4609 25.6049 27.1591  c
25.3172 27.8574 24.9501 28.3641 24.5036 28.6794  c
24.0572 28.9947 23.6266 29.1523 23.2119 29.1523  c
22.3909 29.1523 21.7075 28.6678 21.1616 27.6987  c
20.7003 26.8820 20.4697 25.8981 20.4697 24.7470  c
h
21.7138 24.9057 m
21.7138 26.0906 21.8598 27.0576 22.1518 27.8066  c
22.3930 28.4371 22.7527 28.7524 23.2309 28.7524  c
23.4594 28.7524 23.6964 28.6498 23.9418 28.4445  c
24.1873 28.2393 24.3735 27.8955 24.5004 27.4130  c
24.6951 26.6852 24.7924 25.6590 24.7924 24.3344  c
24.7924 23.3527 24.6909 22.5338 24.4877 21.8779  c
24.3354 21.3912 24.1386 21.0463 23.8974 20.8432  c
23.7239 20.7036 23.5144 20.6337 23.2690 20.6337  c
22.9812 20.6337 22.7252 20.7628 22.5009 21.0210  c
22.1962 21.3722 21.9889 21.9244 21.8789 22.6777  c
21.7688 23.4309 21.7138 24.1736 21.7138 24.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 111.000 m
24.0000 111.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 94.0000 m
24.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 78.0000 m
24.0000 78.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 61.0000 m
24.0000 61.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 44.0000 m
24.0000 44.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 28.0000 m
24.0000 28.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
25.0000 11.0000 m
24.0000 11.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 350 145 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
