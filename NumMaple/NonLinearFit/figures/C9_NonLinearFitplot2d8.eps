%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 315 575 476
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ15“ú 18Žž29•ª28•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 116 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 116.000 l
0 116.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 106 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
27.6150 2.02409 360.379 82.9759 rc
newpath
28.6150 81.0198 m
30.0164 81.8256 l
31.4179 82.4988 l
32.8194 78.9995 l
34.2209 80.5560 l
35.6224 78.6187 l
37.0239 80.4461 l
38.4254 77.7189 l
39.8269 80.3746 l
41.2284 78.8688 l
42.6298 78.3976 l
44.0313 78.4770 l
45.4328 81.2658 l
46.8343 79.8025 l
48.2358 77.0935 l
49.6373 80.4494 l
51.0388 77.7444 l
52.4403 79.0306 l
53.8418 77.5205 l
55.2433 79.3684 l
56.6447 77.8101 l
58.0462 76.4947 l
59.4477 78.2179 l
60.8492 78.4544 l
62.2507 76.0050 l
63.6522 77.6913 l
65.0537 78.8207 l
66.4552 79.4150 l
67.8567 75.7971 l
69.2581 76.4481 l
70.6596 75.1313 l
72.0611 76.7161 l
73.4626 74.0295 l
74.8641 73.7620 l
76.2656 72.9022 l
77.6671 75.3387 l
79.0686 74.7102 l
80.4701 75.5675 l
81.8716 71.4714 l
83.2730 72.6690 l
84.6745 72.9885 l
86.0760 72.7337 l
87.4775 76.0713 l
88.8790 75.6491 l
90.2805 72.6065 l
91.6820 72.6282 l
93.0835 69.7949 l
94.4850 68.9043 l
95.8865 72.8109 l
97.2879 67.3323 l
98.6894 70.5039 l
100.091 67.2723 l
101.492 64.8865 l
102.893 67.9053 l
104.295 68.0379 l
105.696 63.3845 l
107.098 62.2860 l
108.499 62.6913 l
109.901 66.6851 l
111.302 63.9570 l
112.704 62.5630 l
114.105 63.5146 l
115.507 62.7557 l
116.908 54.6059 l
118.310 56.5358 l
119.711 50.4366 l
121.113 60.0061 l
122.514 53.4831 l
123.916 57.8227 l
125.317 48.2485 l
126.719 51.7936 l
128.120 40.0197 l
129.522 51.3528 l
130.923 41.6821 l
132.325 45.9421 l
133.726 36.2704 l
135.128 38.0422 l
136.529 41.4144 l
137.931 27.1751 l
139.332 34.6289 l
140.734 19.9821 l
142.135 18.5858 l
143.537 30.6110 l
144.938 24.4226 l
146.340 9.78260 l
147.741 9.16985 l
149.143 22.6233 l
150.544 4.02409 l
151.946 12.1335 l
153.347 15.3663 l
154.749 21.6746 l
156.150 9.51133 l
157.552 13.3460 l
158.953 11.8719 l
160.355 18.3116 l
161.756 11.8915 l
163.158 11.8758 l
164.559 27.4428 l
165.961 28.9032 l
167.362 23.5504 l
168.764 18.7113 l
170.165 11.8488 l
171.566 15.3833 l
172.968 24.6343 l
174.369 32.2390 l
175.771 29.5979 l
177.172 13.9628 l
178.574 17.5555 l
179.975 28.4780 l
181.377 28.1514 l
182.778 17.8847 l
184.180 20.1548 l
185.581 14.8536 l
186.983 23.7260 l
188.384 26.6039 l
189.786 14.7500 l
191.187 13.2338 l
192.589 18.1088 l
193.990 9.68480 l
195.392 12.3537 l
196.793 17.2529 l
198.195 6.51694 l
199.596 12.5578 l
200.998 12.4876 l
202.399 20.8506 l
203.801 22.0681 l
205.202 14.2342 l
206.604 18.1693 l
208.005 18.2935 l
209.407 15.4537 l
210.808 22.4493 l
212.210 15.2404 l
213.611 26.6365 l
215.013 22.8973 l
216.414 17.2692 l
217.816 28.1317 l
219.217 22.1049 l
220.619 38.9826 l
222.020 37.6706 l
223.422 26.9149 l
224.823 41.4746 l
226.225 38.8731 l
227.626 34.2518 l
229.028 50.1096 l
230.429 42.0172 l
231.831 47.7342 l
233.232 44.3972 l
234.634 43.8194 l
236.035 54.4996 l
237.437 52.6521 l
238.838 54.4525 l
240.239 60.0404 l
241.641 54.7040 l
243.042 54.2165 l
244.444 61.0883 l
245.845 62.8537 l
247.247 58.8756 l
248.648 59.2233 l
250.050 59.5976 l
251.451 63.4207 l
252.853 67.8106 l
254.254 64.9695 l
255.656 65.7978 l
257.057 67.4697 l
258.459 69.4624 l
259.860 70.9229 l
261.262 72.7111 l
262.663 73.1871 l
264.065 67.2294 l
265.466 72.3861 l
266.868 69.9341 l
268.269 70.1618 l
269.671 73.8776 l
271.072 72.2836 l
272.474 74.9848 l
273.875 75.5184 l
275.277 74.8243 l
276.678 72.9004 l
278.080 74.3298 l
279.481 75.7363 l
280.883 74.0776 l
282.284 73.1310 l
283.686 73.9597 l
285.087 76.9333 l
286.489 75.8487 l
287.890 76.1208 l
289.292 75.0059 l
290.693 77.4334 l
292.095 79.3094 l
293.496 75.3899 l
294.898 75.3445 l
296.299 75.8158 l
297.701 78.4178 l
299.102 75.6614 l
300.504 77.1073 l
301.905 76.8174 l
303.306 77.6167 l
304.708 77.7982 l
306.109 76.8977 l
307.511 80.9436 l
308.912 79.7345 l
310.314 77.5339 l
311.715 80.1667 l
313.117 79.9983 l
314.518 79.4260 l
315.920 80.9169 l
317.321 80.2989 l
318.723 81.2425 l
320.124 81.1114 l
321.526 81.3770 l
322.927 81.6773 l
324.329 79.1238 l
325.730 78.7936 l
327.132 78.8383 l
328.533 80.9162 l
329.935 81.8501 l
331.336 80.9028 l
332.738 81.4532 l
334.139 82.2001 l
335.541 78.7643 l
336.942 81.8354 l
338.344 81.6348 l
339.745 80.3692 l
341.147 79.8093 l
342.548 81.6312 l
343.950 79.2632 l
345.351 79.8702 l
346.753 81.2336 l
348.154 80.3448 l
349.556 81.4066 l
350.957 83.3477 l
352.359 83.4107 l
353.760 79.6532 l
355.162 80.6083 l
356.563 82.7259 l
357.965 83.2599 l
359.366 81.9877 l
360.768 83.5341 l
362.169 80.0626 l
363.571 82.1990 l
364.972 80.4532 l
366.374 83.0443 l
367.775 81.8603 l
369.176 83.0780 l
370.578 81.1865 l
371.979 82.2853 l
373.381 81.4996 l
374.782 80.5202 l
376.184 82.7368 l
377.585 80.4907 l
378.987 84.0000 l
380.388 81.6819 l
381.790 83.9240 l
383.191 83.2490 l
384.593 81.6238 l
385.994 81.2106 l
S
cliprestore
newpath
0 0 m
0 106.000 l
390.000 106.000 l
390.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
25.6150 87.0000 m
385.994 87.0000 l
S
Q
q
q
0 J
1 j
newpath
97.0000 87.0000 m
97.0000 91.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
100.643 97.3925 m
100.147 98.4716 l
97.5581 98.4716 l
96.9931 99.6269 l
98.1145 99.7919 99.0032 100.208 99.6591 100.877  c
100.222 101.453 100.503 102.130 100.503 102.908  c
100.503 103.361 100.411 103.780 100.227 104.165  c
100.043 104.550 99.8115 104.878 99.5322 105.149  c
99.2529 105.420 98.9418 105.638 98.5991 105.803  c
98.1124 106.036 97.6131 106.152 97.1010 106.152  c
96.5848 106.152 96.2092 106.064 95.9743 105.888  c
95.7395 105.713 95.6220 105.519 95.6220 105.308  c
95.6220 105.189 95.6707 105.084 95.7680 104.993  c
95.8654 104.902 95.9881 104.857 96.1362 104.857  c
96.2462 104.857 96.3425 104.874 96.4250 104.908  c
96.5075 104.942 96.6482 105.028 96.8471 105.168  c
97.1645 105.388 97.4861 105.498 97.8120 105.498  c
98.3071 105.498 98.7419 105.311 99.1164 104.936  c
99.4909 104.562 99.6782 104.106 99.6782 103.568  c
99.6782 103.048 99.5110 102.562 99.1767 102.112  c
98.8424 101.661 98.3811 101.313 97.7929 101.067  c
97.3317 100.877 96.7032 100.767 95.9077 100.737  c
97.5581 97.3925 l
h
102.469 101.747 m
102.469 100.765 102.617 99.9200 102.914 99.2111  c
103.210 98.5023 103.603 97.9744 104.094 97.6274  c
104.475 97.3523 104.869 97.2148 105.275 97.2148  c
105.935 97.2148 106.528 97.5512 107.052 98.2241  c
107.708 99.0577 108.036 100.187 108.036 101.613  c
108.036 102.612 107.892 103.460 107.605 104.159  c
107.317 104.857 106.950 105.364 106.503 105.679  c
106.057 105.994 105.626 106.152 105.211 106.152  c
104.391 106.152 103.707 105.667 103.161 104.698  c
102.700 103.882 102.469 102.898 102.469 101.747  c
h
103.713 101.905 m
103.713 103.090 103.859 104.057 104.151 104.806  c
104.393 105.437 104.752 105.752 105.231 105.752  c
105.459 105.752 105.696 105.649 105.941 105.444  c
106.187 105.239 106.373 104.895 106.500 104.413  c
106.695 103.685 106.792 102.659 106.792 101.334  c
106.792 100.352 106.690 99.5338 106.487 98.8779  c
106.335 98.3912 106.138 98.0463 105.897 97.8432  c
105.724 97.7036 105.514 97.6337 105.269 97.6337  c
104.981 97.6337 104.725 97.7628 104.501 98.0210  c
104.196 98.3722 103.988 98.9244 103.878 99.6777  c
103.768 100.431 103.713 101.173 103.713 101.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
167.000 87.0000 m
167.000 91.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
163.523 98.2368 m
165.618 97.2148 l
165.827 97.2148 l
165.827 104.482 l
165.827 104.965 165.847 105.265 165.887 105.384  c
165.928 105.502 166.011 105.593 166.138 105.657  c
166.265 105.720 166.523 105.756 166.913 105.765  c
166.913 106.000 l
163.675 106.000 l
163.675 105.765 l
164.082 105.756 164.344 105.721 164.462 105.660  c
164.581 105.599 164.663 105.516 164.710 105.412  c
164.757 105.309 164.780 104.999 164.780 104.482  c
164.780 99.8364 l
164.780 99.2101 164.759 98.8081 164.716 98.6303  c
164.687 98.4949 164.633 98.3955 164.554 98.3320  c
164.476 98.2685 164.382 98.2368 164.272 98.2368  c
164.115 98.2368 163.897 98.3024 163.618 98.4335  c
h
169.469 101.747 m
169.469 100.765 169.617 99.9200 169.914 99.2111  c
170.210 98.5023 170.603 97.9744 171.094 97.6274  c
171.475 97.3523 171.869 97.2148 172.275 97.2148  c
172.935 97.2148 173.528 97.5512 174.052 98.2241  c
174.708 99.0577 175.036 100.187 175.036 101.613  c
175.036 102.612 174.892 103.460 174.605 104.159  c
174.317 104.857 173.950 105.364 173.503 105.679  c
173.057 105.994 172.626 106.152 172.211 106.152  c
171.391 106.152 170.707 105.667 170.161 104.698  c
169.700 103.882 169.469 102.898 169.469 101.747  c
h
170.713 101.905 m
170.713 103.090 170.859 104.057 171.151 104.806  c
171.393 105.437 171.752 105.752 172.231 105.752  c
172.459 105.752 172.696 105.649 172.941 105.444  c
173.187 105.239 173.373 104.895 173.500 104.413  c
173.695 103.685 173.792 102.659 173.792 101.334  c
173.792 100.352 173.690 99.5338 173.487 98.8779  c
173.335 98.3912 173.138 98.0463 172.897 97.8432  c
172.724 97.7036 172.514 97.6337 172.269 97.6337  c
171.981 97.6337 171.725 97.7628 171.501 98.0210  c
171.196 98.3722 170.988 98.9244 170.878 99.6777  c
170.768 100.431 170.713 101.173 170.713 101.905  c
h
176.469 101.747 m
176.469 100.765 176.617 99.9200 176.914 99.2111  c
177.210 98.5023 177.603 97.9744 178.094 97.6274  c
178.475 97.3523 178.869 97.2148 179.275 97.2148  c
179.935 97.2148 180.528 97.5512 181.052 98.2241  c
181.708 99.0577 182.036 100.187 182.036 101.613  c
182.036 102.612 181.892 103.460 181.605 104.159  c
181.317 104.857 180.950 105.364 180.503 105.679  c
180.057 105.994 179.626 106.152 179.211 106.152  c
178.391 106.152 177.707 105.667 177.161 104.698  c
176.700 103.882 176.469 102.898 176.469 101.747  c
h
177.713 101.905 m
177.713 103.090 177.859 104.057 178.151 104.806  c
178.393 105.437 178.752 105.752 179.231 105.752  c
179.459 105.752 179.696 105.649 179.941 105.444  c
180.187 105.239 180.373 104.895 180.500 104.413  c
180.695 103.685 180.792 102.659 180.792 101.334  c
180.792 100.352 180.690 99.5338 180.487 98.8779  c
180.335 98.3912 180.138 98.0463 179.897 97.8432  c
179.724 97.7036 179.514 97.6337 179.269 97.6337  c
178.981 97.6337 178.725 97.7628 178.501 98.0210  c
178.196 98.3722 177.988 98.9244 177.878 99.6777  c
177.768 100.431 177.713 101.173 177.713 101.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
237.000 87.0000 m
237.000 91.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
233.523 98.2368 m
235.618 97.2148 l
235.827 97.2148 l
235.827 104.482 l
235.827 104.965 235.847 105.265 235.887 105.384  c
235.928 105.502 236.011 105.593 236.138 105.657  c
236.265 105.720 236.523 105.756 236.913 105.765  c
236.913 106.000 l
233.675 106.000 l
233.675 105.765 l
234.082 105.756 234.344 105.721 234.462 105.660  c
234.581 105.599 234.663 105.516 234.710 105.412  c
234.757 105.309 234.780 104.999 234.780 104.482  c
234.780 99.8364 l
234.780 99.2101 234.759 98.8081 234.716 98.6303  c
234.687 98.4949 234.633 98.3955 234.554 98.3320  c
234.476 98.2685 234.382 98.2368 234.272 98.2368  c
234.115 98.2368 233.897 98.3024 233.618 98.4335  c
h
244.643 97.3925 m
244.147 98.4716 l
241.558 98.4716 l
240.993 99.6269 l
242.114 99.7919 243.003 100.208 243.659 100.877  c
244.222 101.453 244.503 102.130 244.503 102.908  c
244.503 103.361 244.411 103.780 244.227 104.165  c
244.043 104.550 243.811 104.878 243.532 105.149  c
243.252 105.420 242.941 105.638 242.599 105.803  c
242.112 106.036 241.613 106.152 241.101 106.152  c
240.584 106.152 240.209 106.064 239.974 105.888  c
239.739 105.713 239.622 105.519 239.622 105.308  c
239.622 105.189 239.670 105.084 239.768 104.993  c
239.865 104.902 239.988 104.857 240.136 104.857  c
240.246 104.857 240.342 104.874 240.425 104.908  c
240.507 104.942 240.648 105.028 240.847 105.168  c
241.164 105.388 241.486 105.498 241.812 105.498  c
242.307 105.498 242.741 105.311 243.116 104.936  c
243.491 104.562 243.678 104.106 243.678 103.568  c
243.678 103.048 243.511 102.562 243.176 102.112  c
242.842 101.661 242.381 101.313 241.793 101.067  c
241.331 100.877 240.703 100.767 239.907 100.737  c
241.558 97.3925 l
h
246.469 101.747 m
246.469 100.765 246.617 99.9200 246.914 99.2111  c
247.210 98.5023 247.603 97.9744 248.094 97.6274  c
248.475 97.3523 248.869 97.2148 249.275 97.2148  c
249.935 97.2148 250.528 97.5512 251.052 98.2241  c
251.708 99.0577 252.036 100.187 252.036 101.613  c
252.036 102.612 251.892 103.460 251.605 104.159  c
251.317 104.857 250.950 105.364 250.503 105.679  c
250.057 105.994 249.626 106.152 249.211 106.152  c
248.391 106.152 247.707 105.667 247.161 104.698  c
246.700 103.882 246.469 102.898 246.469 101.747  c
h
247.713 101.905 m
247.713 103.090 247.859 104.057 248.151 104.806  c
248.393 105.437 248.752 105.752 249.231 105.752  c
249.459 105.752 249.696 105.649 249.941 105.444  c
250.187 105.239 250.373 104.895 250.500 104.413  c
250.695 103.685 250.792 102.659 250.792 101.334  c
250.792 100.352 250.690 99.5338 250.487 98.8779  c
250.335 98.3912 250.138 98.0463 249.897 97.8432  c
249.724 97.7036 249.514 97.6337 249.269 97.6337  c
248.981 97.6337 248.725 97.7628 248.501 98.0210  c
248.196 98.3722 247.988 98.9244 247.878 99.6777  c
247.768 100.431 247.713 101.173 247.713 101.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
308.000 87.0000 m
308.000 91.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
307.960 104.343 m
307.357 106.000 l
302.279 106.000 l
302.279 105.765 l
303.773 104.402 304.824 103.289 305.434 102.426  c
306.043 101.563 306.348 100.773 306.348 100.058  c
306.348 99.5127 306.181 99.0641 305.846 98.7128  c
305.512 98.3616 305.112 98.1860 304.647 98.1860  c
304.223 98.1860 303.844 98.3098 303.507 98.5573  c
303.171 98.8049 302.922 99.1678 302.761 99.6460  c
302.526 99.6460 l
302.632 98.8631 302.904 98.2622 303.342 97.8432  c
303.780 97.4243 304.327 97.2148 304.983 97.2148  c
305.681 97.2148 306.264 97.4391 306.732 97.8877  c
307.199 98.3362 307.433 98.8652 307.433 99.4746  c
307.433 99.9104 307.332 100.346 307.128 100.782  c
306.815 101.467 306.307 102.193 305.605 102.959  c
304.551 104.110 303.893 104.804 303.631 105.041  c
305.878 105.041 l
306.335 105.041 306.656 105.024 306.840 104.990  c
307.024 104.956 307.190 104.888 307.338 104.784  c
307.486 104.680 307.615 104.533 307.725 104.343  c
h
309.469 101.747 m
309.469 100.765 309.617 99.9200 309.914 99.2111  c
310.210 98.5023 310.603 97.9744 311.094 97.6274  c
311.475 97.3523 311.869 97.2148 312.275 97.2148  c
312.935 97.2148 313.528 97.5512 314.052 98.2241  c
314.708 99.0577 315.036 100.187 315.036 101.613  c
315.036 102.612 314.892 103.460 314.605 104.159  c
314.317 104.857 313.950 105.364 313.503 105.679  c
313.057 105.994 312.626 106.152 312.211 106.152  c
311.391 106.152 310.707 105.667 310.161 104.698  c
309.700 103.882 309.469 102.898 309.469 101.747  c
h
310.713 101.905 m
310.713 103.090 310.859 104.057 311.151 104.806  c
311.393 105.437 311.752 105.752 312.231 105.752  c
312.459 105.752 312.696 105.649 312.941 105.444  c
313.187 105.239 313.373 104.895 313.500 104.413  c
313.695 103.685 313.792 102.659 313.792 101.334  c
313.792 100.352 313.690 99.5338 313.487 98.8779  c
313.335 98.3912 313.138 98.0463 312.897 97.8432  c
312.724 97.7036 312.514 97.6337 312.269 97.6337  c
311.981 97.6337 311.725 97.7628 311.501 98.0210  c
311.196 98.3722 310.988 98.9244 310.878 99.6777  c
310.768 100.431 310.713 101.173 310.713 101.905  c
h
316.469 101.747 m
316.469 100.765 316.617 99.9200 316.914 99.2111  c
317.210 98.5023 317.603 97.9744 318.094 97.6274  c
318.475 97.3523 318.869 97.2148 319.275 97.2148  c
319.935 97.2148 320.528 97.5512 321.052 98.2241  c
321.708 99.0577 322.036 100.187 322.036 101.613  c
322.036 102.612 321.892 103.460 321.605 104.159  c
321.317 104.857 320.950 105.364 320.503 105.679  c
320.057 105.994 319.626 106.152 319.211 106.152  c
318.391 106.152 317.707 105.667 317.161 104.698  c
316.700 103.882 316.469 102.898 316.469 101.747  c
h
317.713 101.905 m
317.713 103.090 317.859 104.057 318.151 104.806  c
318.393 105.437 318.752 105.752 319.231 105.752  c
319.459 105.752 319.696 105.649 319.941 105.444  c
320.187 105.239 320.373 104.895 320.500 104.413  c
320.695 103.685 320.792 102.659 320.792 101.334  c
320.792 100.352 320.690 99.5338 320.487 98.8779  c
320.335 98.3912 320.138 98.0463 319.897 97.8432  c
319.724 97.7036 319.514 97.6337 319.269 97.6337  c
318.981 97.6337 318.725 97.7628 318.501 98.0210  c
318.196 98.3722 317.988 98.9244 317.878 99.6777  c
317.768 100.431 317.713 101.173 317.713 101.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
378.000 87.0000 m
378.000 91.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
377.960 104.343 m
377.357 106.000 l
372.279 106.000 l
372.279 105.765 l
373.773 104.402 374.824 103.289 375.434 102.426  c
376.043 101.563 376.348 100.773 376.348 100.058  c
376.348 99.5127 376.181 99.0641 375.846 98.7128  c
375.512 98.3616 375.112 98.1860 374.647 98.1860  c
374.223 98.1860 373.844 98.3098 373.507 98.5573  c
373.171 98.8049 372.922 99.1678 372.761 99.6460  c
372.526 99.6460 l
372.632 98.8631 372.904 98.2622 373.342 97.8432  c
373.780 97.4243 374.327 97.2148 374.983 97.2148  c
375.681 97.2148 376.264 97.4391 376.732 97.8877  c
377.199 98.3362 377.433 98.8652 377.433 99.4746  c
377.433 99.9104 377.332 100.346 377.128 100.782  c
376.815 101.467 376.307 102.193 375.605 102.959  c
374.551 104.110 373.893 104.804 373.631 105.041  c
375.878 105.041 l
376.335 105.041 376.656 105.024 376.840 104.990  c
377.024 104.956 377.190 104.888 377.338 104.784  c
377.486 104.680 377.615 104.533 377.725 104.343  c
h
384.643 97.3925 m
384.147 98.4716 l
381.558 98.4716 l
380.993 99.6269 l
382.114 99.7919 383.003 100.208 383.659 100.877  c
384.222 101.453 384.503 102.130 384.503 102.908  c
384.503 103.361 384.411 103.780 384.227 104.165  c
384.043 104.550 383.811 104.878 383.532 105.149  c
383.252 105.420 382.941 105.638 382.599 105.803  c
382.112 106.036 381.613 106.152 381.101 106.152  c
380.584 106.152 380.209 106.064 379.974 105.888  c
379.739 105.713 379.622 105.519 379.622 105.308  c
379.622 105.189 379.670 105.084 379.768 104.993  c
379.865 104.902 379.988 104.857 380.136 104.857  c
380.246 104.857 380.342 104.874 380.425 104.908  c
380.507 104.942 380.648 105.028 380.847 105.168  c
381.164 105.388 381.486 105.498 381.812 105.498  c
382.307 105.498 382.741 105.311 383.116 104.936  c
383.491 104.562 383.678 104.106 383.678 103.568  c
383.678 103.048 383.511 102.562 383.176 102.112  c
382.842 101.661 382.381 101.313 381.793 101.067  c
381.331 100.877 380.703 100.767 379.907 100.737  c
381.558 97.3925 l
h
386.469 101.747 m
386.469 100.765 386.617 99.9200 386.914 99.2111  c
387.210 98.5023 387.603 97.9744 388.094 97.6274  c
388.475 97.3523 388.869 97.2148 389.275 97.2148  c
389.935 97.2148 390.528 97.5512 391.052 98.2241  c
391.708 99.0577 392.036 100.187 392.036 101.613  c
392.036 102.612 391.892 103.460 391.605 104.159  c
391.317 104.857 390.950 105.364 390.503 105.679  c
390.057 105.994 389.626 106.152 389.211 106.152  c
388.391 106.152 387.707 105.667 387.161 104.698  c
386.700 103.882 386.469 102.898 386.469 101.747  c
h
387.713 101.905 m
387.713 103.090 387.859 104.057 388.151 104.806  c
388.393 105.437 388.752 105.752 389.231 105.752  c
389.459 105.752 389.696 105.649 389.941 105.444  c
390.187 105.239 390.373 104.895 390.500 104.413  c
390.695 103.685 390.792 102.659 390.792 101.334  c
390.792 100.352 390.690 99.5338 390.487 98.8779  c
390.335 98.3912 390.138 98.0463 389.897 97.8432  c
389.724 97.7036 389.514 97.6337 389.269 97.6337  c
388.981 97.6337 388.725 97.7628 388.501 98.0210  c
388.196 98.3722 387.988 98.9244 387.878 99.6777  c
387.768 100.431 387.713 101.173 387.713 101.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 87.0000 m
41.0000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
55.0000 87.0000 m
55.0000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
69.0000 87.0000 m
69.0000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
83.0000 87.0000 m
83.0000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
111.000 87.0000 m
111.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
125.000 87.0000 m
125.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
139.000 87.0000 m
139.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
153.000 87.0000 m
153.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
181.000 87.0000 m
181.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
195.000 87.0000 m
195.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
209.000 87.0000 m
209.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
223.000 87.0000 m
223.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
251.000 87.0000 m
251.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
265.000 87.0000 m
265.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
279.000 87.0000 m
279.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
293.000 87.0000 m
293.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
322.000 87.0000 m
322.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
336.000 87.0000 m
336.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
350.000 87.0000 m
350.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
364.000 87.0000 m
364.000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
26.0000 87.0000 m
26.0000 4.02409 l
S
Q
q
q
0 J
1 j
newpath
26.0000 80.0000 m
22.0000 80.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.9604 87.3432 m
18.3574 89.0000 l
13.2793 89.0000 l
13.2793 88.7651 l
14.7731 87.4025 15.8247 86.2895 16.4340 85.4262  c
17.0434 84.5629 17.3481 83.7737 17.3481 83.0585  c
17.3481 82.5127 17.1809 82.0641 16.8466 81.7128  c
16.5123 81.3616 16.1124 81.1860 15.6469 81.1860  c
15.2238 81.1860 14.8439 81.3098 14.5075 81.5573  c
14.1711 81.8049 13.9225 82.1678 13.7617 82.6460  c
13.5268 82.6460 l
13.6326 81.8631 13.9045 81.2622 14.3425 80.8432  c
14.7805 80.4243 15.3274 80.2148 15.9834 80.2148  c
16.6816 80.2148 17.2645 80.4391 17.7321 80.8877  c
18.1997 81.3362 18.4335 81.8652 18.4335 82.4746  c
18.4335 82.9104 18.3320 83.3463 18.1289 83.7822  c
17.8157 84.4677 17.3079 85.1935 16.6054 85.9594  c
15.5517 87.1105 14.8937 87.8045 14.6313 88.0415  c
16.8784 88.0415 l
17.3354 88.0415 17.6560 88.0245 17.8400 87.9907  c
18.0241 87.9568 18.1902 87.8881 18.3383 87.7844  c
18.4864 87.6807 18.6155 87.5336 18.7255 87.3432  c
h
20.4697 84.7470 m
20.4697 83.7653 20.6178 82.9200 20.9140 82.2111  c
21.2102 81.5023 21.6038 80.9744 22.0947 80.6274  c
22.4755 80.3523 22.8691 80.2148 23.2753 80.2148  c
23.9355 80.2148 24.5279 80.5512 25.0527 81.2241  c
25.7086 82.0577 26.0366 83.1876 26.0366 84.6137  c
26.0366 85.6124 25.8927 86.4609 25.6049 87.1591  c
25.3172 87.8574 24.9501 88.3641 24.5036 88.6794  c
24.0572 88.9947 23.6266 89.1523 23.2119 89.1523  c
22.3909 89.1523 21.7075 88.6678 21.1616 87.6987  c
20.7003 86.8820 20.4697 85.8981 20.4697 84.7470  c
h
21.7138 84.9057 m
21.7138 86.0906 21.8598 87.0576 22.1518 87.8066  c
22.3930 88.4371 22.7527 88.7524 23.2309 88.7524  c
23.4594 88.7524 23.6964 88.6498 23.9418 88.4445  c
24.1873 88.2393 24.3735 87.8955 24.5004 87.4130  c
24.6951 86.6852 24.7924 85.6590 24.7924 84.3344  c
24.7924 83.3527 24.6909 82.5338 24.4877 81.8779  c
24.3354 81.3912 24.1386 81.0463 23.8974 80.8432  c
23.7239 80.7036 23.5144 80.6337 23.2690 80.6337  c
22.9812 80.6337 22.7252 80.7628 22.5009 81.0210  c
22.1962 81.3722 21.9889 81.9244 21.8789 82.6777  c
21.7688 83.4309 21.7138 84.1736 21.7138 84.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 72.0000 m
22.0000 72.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 64.0000 m
22.0000 64.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
19.0493 69.8261 m
19.0493 70.7275 l
17.8940 70.7275 l
17.8940 73.0000 l
16.8466 73.0000 l
16.8466 70.7275 l
13.2031 70.7275 l
13.2031 69.9150 l
17.1958 64.2148 l
17.8940 64.2148 l
17.8940 69.8261 l
h
16.8466 69.8261 m
16.8466 65.5542 l
13.8252 69.8261 l
h
20.4697 68.7470 m
20.4697 67.7653 20.6178 66.9200 20.9140 66.2111  c
21.2102 65.5023 21.6038 64.9744 22.0947 64.6274  c
22.4755 64.3523 22.8691 64.2148 23.2753 64.2148  c
23.9355 64.2148 24.5279 64.5512 25.0527 65.2241  c
25.7086 66.0577 26.0366 67.1876 26.0366 68.6137  c
26.0366 69.6124 25.8927 70.4609 25.6049 71.1591  c
25.3172 71.8574 24.9501 72.3641 24.5036 72.6794  c
24.0572 72.9947 23.6266 73.1523 23.2119 73.1523  c
22.3909 73.1523 21.7075 72.6678 21.1616 71.6987  c
20.7003 70.8820 20.4697 69.8981 20.4697 68.7470  c
h
21.7138 68.9057 m
21.7138 70.0906 21.8598 71.0576 22.1518 71.8066  c
22.3930 72.4371 22.7527 72.7524 23.2309 72.7524  c
23.4594 72.7524 23.6964 72.6498 23.9418 72.4445  c
24.1873 72.2393 24.3735 71.8955 24.5004 71.4130  c
24.6951 70.6852 24.7924 69.6590 24.7924 68.3344  c
24.7924 67.3527 24.6909 66.5338 24.4877 65.8779  c
24.3354 65.3912 24.1386 65.0463 23.8974 64.8432  c
23.7239 64.7036 23.5144 64.6337 23.2690 64.6337  c
22.9812 64.6337 22.7252 64.7628 22.5009 65.0210  c
22.1962 65.3722 21.9889 65.9244 21.8789 66.6777  c
21.7688 67.4309 21.7138 68.1736 21.7138 68.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 56.0000 m
22.0000 56.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 48.0000 m
22.0000 48.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.8271 48.2148 m
18.8271 48.4497 l
18.2685 48.5047 17.8125 48.6158 17.4592 48.7829  c
17.1058 48.9501 16.7567 49.2050 16.4118 49.5478  c
16.0669 49.8906 15.7813 50.2725 15.5549 50.6936  c
15.3285 51.1146 15.1391 51.6150 14.9868 52.1948  c
15.5961 51.7758 16.2076 51.5664 16.8212 51.5664  c
17.4095 51.5664 17.9194 51.8033 18.3510 52.2773  c
18.7827 52.7513 18.9985 53.3606 18.9985 54.1054  c
18.9985 54.8248 18.7806 55.4807 18.3447 56.0732  c
17.8199 56.7926 17.1259 57.1523 16.2627 57.1523  c
15.6744 57.1523 15.1751 56.9576 14.7646 56.5683  c
13.9606 55.8108 13.5585 54.8291 13.5585 53.6230  c
13.5585 52.8528 13.7130 52.1207 14.0219 51.4267  c
14.3308 50.7327 14.7720 50.1170 15.3454 49.5795  c
15.9188 49.0421 16.4679 48.6803 16.9926 48.4941  c
17.5174 48.3079 18.0061 48.2148 18.4589 48.2148  c
h
14.8789 52.6582 m
14.8027 53.2294 14.7646 53.6907 14.7646 54.0419  c
14.7646 54.4482 14.8397 54.8894 14.9899 55.3654  c
15.1402 55.8415 15.3634 56.2192 15.6596 56.4985  c
15.8754 56.6974 16.1378 56.7968 16.4467 56.7968  c
16.8149 56.7968 17.1439 56.6233 17.4338 56.2763  c
17.7237 55.9293 17.8686 55.4342 17.8686 54.7910  c
17.8686 54.0673 17.7247 53.4410 17.4370 52.9121  c
17.1492 52.3831 16.7408 52.1186 16.2119 52.1186  c
16.0511 52.1186 15.8786 52.1525 15.6945 52.2202  c
15.5105 52.2879 15.2386 52.4339 14.8789 52.6582  c
h
20.4697 52.7470 m
20.4697 51.7653 20.6178 50.9200 20.9140 50.2111  c
21.2102 49.5023 21.6038 48.9744 22.0947 48.6274  c
22.4755 48.3523 22.8691 48.2148 23.2753 48.2148  c
23.9355 48.2148 24.5279 48.5512 25.0527 49.2241  c
25.7086 50.0577 26.0366 51.1876 26.0366 52.6137  c
26.0366 53.6124 25.8927 54.4609 25.6049 55.1591  c
25.3172 55.8574 24.9501 56.3641 24.5036 56.6794  c
24.0572 56.9947 23.6266 57.1523 23.2119 57.1523  c
22.3909 57.1523 21.7075 56.6678 21.1616 55.6987  c
20.7003 54.8820 20.4697 53.8981 20.4697 52.7470  c
h
21.7138 52.9057 m
21.7138 54.0906 21.8598 55.0576 22.1518 55.8066  c
22.3930 56.4371 22.7527 56.7524 23.2309 56.7524  c
23.4594 56.7524 23.6964 56.6498 23.9418 56.4445  c
24.1873 56.2393 24.3735 55.8955 24.5004 55.4130  c
24.6951 54.6852 24.7924 53.6590 24.7924 52.3344  c
24.7924 51.3527 24.6909 50.5338 24.4877 49.8779  c
24.3354 49.3912 24.1386 49.0463 23.8974 48.8432  c
23.7239 48.7036 23.5144 48.6337 23.2690 48.6337  c
22.9812 48.6337 22.7252 48.7628 22.5009 49.0210  c
22.1962 49.3722 21.9889 49.9244 21.8789 50.6777  c
21.7688 51.4309 21.7138 52.1736 21.7138 52.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 40.0000 m
22.0000 40.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 32.0000 m
22.0000 32.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
15.4946 37.6645 m
14.8133 37.1059 14.3742 36.6573 14.1774 36.3188  c
13.9807 35.9803 13.8823 35.6290 13.8823 35.2651  c
13.8823 34.7065 14.0981 34.2251 14.5297 33.8210  c
14.9614 33.4169 15.5348 33.2148 16.2500 33.2148  c
16.9440 33.2148 17.5026 33.4031 17.9257 33.7797  c
18.3489 34.1564 18.5605 34.5859 18.5605 35.0683  c
18.5605 35.3899 18.4462 35.7179 18.2177 36.0522  c
17.9892 36.3865 17.5131 36.7801 16.7895 37.2329  c
17.5343 37.8084 18.0273 38.2612 18.2685 38.5913  c
18.5901 39.0229 18.7509 39.4778 18.7509 39.9560  c
18.7509 40.5612 18.5203 41.0785 18.0590 41.5080  c
17.5978 41.9375 16.9926 42.1523 16.2436 42.1523  c
15.4269 42.1523 14.7900 41.8963 14.3330 41.3842  c
13.9690 40.9738 13.7871 40.5252 13.7871 40.0385  c
13.7871 39.6577 13.9151 39.2800 14.1711 38.9055  c
14.4271 38.5310 14.8683 38.1173 15.4946 37.6645  c
h
16.4912 36.9853 m
16.9990 36.5283 17.3206 36.1675 17.4560 35.9030  c
17.5914 35.6385 17.6591 35.3391 17.6591 35.0048  c
17.6591 34.5605 17.5343 34.2124 17.2846 33.9606  c
17.0349 33.7089 16.6943 33.5830 16.2627 33.5830  c
15.8310 33.5830 15.4798 33.7078 15.2089 33.9575  c
14.9381 34.2071 14.8027 34.4991 14.8027 34.8335  c
14.8027 35.0535 14.8588 35.2736 14.9709 35.4936  c
15.0830 35.7137 15.2428 35.9231 15.4502 36.1220  c
h
15.7929 37.9057 m
15.4417 38.2019 15.1814 38.5246 15.0122 38.8737  c
14.8429 39.2229 14.7583 39.6005 14.7583 40.0068  c
14.7583 40.5527 14.9074 40.9896 15.2058 41.3176  c
15.5041 41.6455 15.8839 41.8095 16.3452 41.8095  c
16.8022 41.8095 17.1682 41.6805 17.4433 41.4223  c
17.7184 41.1642 17.8559 40.8510 17.8559 40.4829  c
17.8559 40.1782 17.7755 39.9052 17.6147 39.6640  c
17.3142 39.2154 16.7070 38.6293 15.7929 37.9057  c
h
20.4697 37.7470 m
20.4697 36.7653 20.6178 35.9200 20.9140 35.2111  c
21.2102 34.5023 21.6038 33.9744 22.0947 33.6274  c
22.4755 33.3523 22.8691 33.2148 23.2753 33.2148  c
23.9355 33.2148 24.5279 33.5512 25.0527 34.2241  c
25.7086 35.0577 26.0366 36.1876 26.0366 37.6137  c
26.0366 38.6124 25.8927 39.4609 25.6049 40.1591  c
25.3172 40.8574 24.9501 41.3641 24.5036 41.6794  c
24.0572 41.9947 23.6266 42.1523 23.2119 42.1523  c
22.3909 42.1523 21.7075 41.6678 21.1616 40.6987  c
20.7003 39.8820 20.4697 38.8981 20.4697 37.7470  c
h
21.7138 37.9057 m
21.7138 39.0906 21.8598 40.0576 22.1518 40.8066  c
22.3930 41.4371 22.7527 41.7524 23.2309 41.7524  c
23.4594 41.7524 23.6964 41.6498 23.9418 41.4445  c
24.1873 41.2393 24.3735 40.8955 24.5004 40.4130  c
24.6951 39.6852 24.7924 38.6590 24.7924 37.3344  c
24.7924 36.3527 24.6909 35.5338 24.4877 34.8779  c
24.3354 34.3912 24.1386 34.0463 23.8974 33.8432  c
23.7239 33.7036 23.5144 33.6337 23.2690 33.6337  c
22.9812 33.6337 22.7252 33.7628 22.5009 34.0210  c
22.1962 34.3722 21.9889 34.9244 21.8789 35.6777  c
21.7688 36.4309 21.7138 37.1736 21.7138 37.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 24.0000 m
22.0000 24.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 16.0000 m
22.0000 16.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
7.52343 18.2368 m
9.61816 17.2148 l
9.82763 17.2148 l
9.82763 24.4829 l
9.82763 24.9653 9.84773 25.2657 9.88793 25.3842  c
9.92814 25.5027 10.0117 25.5937 10.1386 25.6572  c
10.2656 25.7207 10.5237 25.7566 10.9130 25.7651  c
10.9130 26.0000 l
7.67578 26.0000 l
7.67578 25.7651 l
8.08203 25.7566 8.34440 25.7217 8.46289 25.6604  c
8.58138 25.5990 8.66390 25.5165 8.71044 25.4128  c
8.75699 25.3091 8.78027 24.9991 8.78027 24.4829  c
8.78027 19.8364 l
8.78027 19.2101 8.75911 18.8081 8.71679 18.6303  c
8.68717 18.4949 8.63321 18.3955 8.55493 18.3320  c
8.47664 18.2685 8.38248 18.2368 8.27246 18.2368  c
8.11588 18.2368 7.89794 18.3024 7.61865 18.4335  c
h
13.4697 21.7470 m
13.4697 20.7653 13.6178 19.9200 13.9140 19.2111  c
14.2102 18.5023 14.6038 17.9744 15.0947 17.6274  c
15.4755 17.3523 15.8691 17.2148 16.2753 17.2148  c
16.9355 17.2148 17.5279 17.5512 18.0527 18.2241  c
18.7086 19.0577 19.0366 20.1876 19.0366 21.6137  c
19.0366 22.6124 18.8927 23.4609 18.6049 24.1591  c
18.3172 24.8574 17.9501 25.3641 17.5036 25.6794  c
17.0572 25.9947 16.6266 26.1523 16.2119 26.1523  c
15.3909 26.1523 14.7075 25.6678 14.1616 24.6987  c
13.7003 23.8820 13.4697 22.8981 13.4697 21.7470  c
h
14.7138 21.9057 m
14.7138 23.0906 14.8598 24.0576 15.1518 24.8066  c
15.3930 25.4371 15.7527 25.7524 16.2309 25.7524  c
16.4594 25.7524 16.6964 25.6498 16.9418 25.4445  c
17.1873 25.2393 17.3735 24.8955 17.5004 24.4130  c
17.6951 23.6852 17.7924 22.6590 17.7924 21.3344  c
17.7924 20.3527 17.6909 19.5338 17.4877 18.8779  c
17.3354 18.3912 17.1386 18.0463 16.8974 17.8432  c
16.7239 17.7036 16.5144 17.6337 16.2690 17.6337  c
15.9812 17.6337 15.7252 17.7628 15.5009 18.0210  c
15.1962 18.3722 14.9889 18.9244 14.8789 19.6777  c
14.7688 20.4309 14.7138 21.1736 14.7138 21.9057  c
h
20.4697 21.7470 m
20.4697 20.7653 20.6178 19.9200 20.9140 19.2111  c
21.2102 18.5023 21.6038 17.9744 22.0947 17.6274  c
22.4755 17.3523 22.8691 17.2148 23.2753 17.2148  c
23.9355 17.2148 24.5279 17.5512 25.0527 18.2241  c
25.7086 19.0577 26.0366 20.1876 26.0366 21.6137  c
26.0366 22.6124 25.8927 23.4609 25.6049 24.1591  c
25.3172 24.8574 24.9501 25.3641 24.5036 25.6794  c
24.0572 25.9947 23.6266 26.1523 23.2119 26.1523  c
22.3909 26.1523 21.7075 25.6678 21.1616 24.6987  c
20.7003 23.8820 20.4697 22.8981 20.4697 21.7470  c
h
21.7138 21.9057 m
21.7138 23.0906 21.8598 24.0576 22.1518 24.8066  c
22.3930 25.4371 22.7527 25.7524 23.2309 25.7524  c
23.4594 25.7524 23.6964 25.6498 23.9418 25.4445  c
24.1873 25.2393 24.3735 24.8955 24.5004 24.4130  c
24.6951 23.6852 24.7924 22.6590 24.7924 21.3344  c
24.7924 20.3527 24.6909 19.5338 24.4877 18.8779  c
24.3354 18.3912 24.1386 18.0463 23.8974 17.8432  c
23.7239 17.7036 23.5144 17.6337 23.2690 17.6337  c
22.9812 17.6337 22.7252 17.7628 22.5009 18.0210  c
22.1962 18.3722 21.9889 18.9244 21.8789 19.6777  c
21.7688 20.4309 21.7138 21.1736 21.7138 21.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 8.00000 m
22.0000 8.00000 l
S
Q
q
0 J
1 j
newpath
26.0000 84.0000 m
24.0000 84.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 76.0000 m
24.0000 76.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 68.0000 m
24.0000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 60.0000 m
24.0000 60.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 52.0000 m
24.0000 52.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 44.0000 m
24.0000 44.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 36.0000 m
24.0000 36.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 28.0000 m
24.0000 28.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 20.0000 m
24.0000 20.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 12.0000 m
24.0000 12.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 4.00000 m
24.0000 4.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 400 116 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
