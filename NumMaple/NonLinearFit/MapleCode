線形代数計算のためにサブパッケージとしてLinearAlgebraを呼びだしておく．
<<<maple
> restart; 
  with(plots): 
  with(LinearAlgebra):
>>>


データを読み込む．
<<<maple
> ndata:=8: 
  f1:=t->subs({a1=1,a2=10,a3=1,a4=4},a1+a2/(a3+(t-a4)^2) );
>>>
{{dmath ' {\it f1}\, := \,t\mapsto 1+10\, \left( 1+ \left( t-4 \right) ^{2} \right) ^{-1}
 '}}
データの表示
<<<maple
> T:=[seq(f1(i),i=1..ndata)]:
  listplot(T); 
  l1:=listplot(T):
>>>
||{{attach_view(C9_NonLinearFitplot2d4.png,NonLinearFit)}}||


ローレンツ型の関数を仮定し，関数として定義．
<<<maple
> f:=t->a1+a2/(a3+(t-a4)^2); nparam:=4:
>>>
{{dmath '  '}}
ヤコビアンの中の微分を新たな関数として定義．
<<<maple
> for i from 1 to nparam do 
    dfda||i:=unapply(diff(f(x),a||i),x); 
  end do;
>>>
{{dmath ' {\it dfda1}\, := \,x\mapsto 1  '}}
{{dmath ' {\it dfda2}\, := \,x\mapsto  \left( {\it a3}+ \left( x-{\it a4} \right) ^{2} \right) ^{-1}
 '}}
{{dmath ' {\it dfda3}\, := \,x\mapsto -{\frac {{\it a2}}{ \left( {\it a3}+ \left( x-{\it a4} \right) ^{2} \right) ^{2}}}  '}}
{{dmath ' {\it dfda4}\, := \,x\mapsto -{\frac {{\it a2}\, \left( -2\,x+2\,{\it a4} \right) }{ \left( {\it a3}+ \left( x-{\it a4} \right) ^{2} \right) ^{2}}}   '}}
{{dmath '  '}}
ここで，"{{math '||'}}"は連結作用素とよばれるMapleのコマンドで，{{math 'dfda||1 \mapsto dfda1'}}と連結する．
初期値を仮定して，データとともに関数を表示．
<<<maple
> g1:=Vector([1,8,1,4.5]): 
  guess1:={}: 
  for i from 1 to nparam do
    guess1:={op(guess1),a||i=g1[i]}; 
  end do: 
  guess1;
>>>
{{dmath ' \left\{ {\it a1}=1,{\it a2}=8,{\it a3}=1,{\it a4}= 4.5\right\}
 '}}

<<<maple
> p1:=plot(subs(guess1,f(x)),x=1..ndata): 
  display(l1,p1);  
>>>
||{{attach_view(C9_NonLinearFitplot2d5.png,NonLinearFit)}}||
見やすいように，小数点以下を3桁表示に制限する．
<<<maple
> interface(displayprecision=3):
> df:=Vector([seq(subs(guess1,T[i]-f(i)),i=1..ndata)]);
>>>
{{dmath ' {\it df}\, := \, \left[ \begin {array}{c}  0.396\\  0.897\\  2.538\\  3.600\\ - 1.400\\ - 0.462\\ - 0.103\\ - 0.016\end {array} \right]
 '}}

<<<maple
> Jac:=Matrix(ndata,nparam): 
  for i from 1 to ndata do 
    for j from 1 to nparam do
      Jac[i,j]:=evalf(subs(guess1,dfda||j(i))); 
    end do: 
  end do:
  Jac;
>>>
{{dmath ' \left[ \begin {array}{cccc}  1.0& 0.075&- 0.046&- 0.319\\  1.0& 0.138&- 0.152&- 0.761\\  1.0& 0.308&- 0.757&- 2.272\\  1.0& 0.800&- 5.120&- 5.120\\  1.0& 0.800&- 5.120& 5.120\\  1.0& 0.308&- 0.757& 2.272\\  1.0& 0.138&- 0.152& 0.761\\  1.0& 0.075&- 0.046& 0.319\end {array} \right]
 '}}

<<<maple
> tJac:=(MatrixInverse(Transpose(Jac).Jac)).Transpose(Jac);
>>>
{{dmath ' {\it tJac}\, := \, \left[ \begin {array}{cccccccc}  0.565& 0.249&- 0.354& 0.040& 0.040&- 0.354& 0.249& 0.565\\ - 2.954&- 0.506& 4.012&- 0.552&- 0.552& 4.012&- 0.506&- 2.954\\ - 0.352&- 0.029& 0.557&- 0.176&- 0.176& 0.557&- 0.029&- 0.352\\ - 0.005&- 0.012&- 0.035&- 0.080& 0.080& 0.035& 0.012& 0.005\end {array} \right] 
 '}}

<<<maple
> g2:=tJac.df; 
  g1:=g1+g2;
>>>
{{dmath ' {\it g2}\, := \, \left[ \begin {array}{c} - 0.235\\  5.592\\  0.613\\ - 0.520\end {array} \right]   '}}
{{dmath ' {\it g1}\, := \, \left[ \begin {array}{c}  0.765\\  13.592\\  1.613\\  3.980\end {array} \right]  '}}
{{dmath '  '}}
これをまたもとの近似値(guess)に入れ直して表示させると以下のようになる．カーブがデータに近づいているのが確認できよう．この操作をずれが十分小さくなるまで繰
り返す．
<<<maple
> guess1:={seq(a||i=g1[i],i=1..nparam)};
  p1:=plot(subs(guess1,f(x)),x=1..ndata):
  display(l1,p1);
>>>
{{dmath ' guess1:=\{a1=0.765, a2=13.592, a3=1.613, a4=3.980\}
 '}}
||{{attach_view(C9_NonLinearFitplot2d6.png,NonLinearFit)}}||

4回ほど繰り返すと以下の通り，いい値に収束している．
{{dmath ' guess1:=\{a1 = 1.006, a2 = 9.926, a3 = .989, a4 = 4.000\}
 '}}

