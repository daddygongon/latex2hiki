%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 267 575 524
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ3“ú 20Žž35•ª03•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
224 103 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
224.000 0 l
224.000 103.000 l
0 103.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 214 93 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
1.00000 0 0 RG
30.0000 6.07185 181.488 79.4281 rc
newpath
31.0000 8.07185 m
209.488 84.5000 l
S
cliprestore
newpath
0 0 m
0 93.0000 l
214.000 93.0000 l
214.000 0 l
h
W
Q
q
0.196078 0.803922 0.196078 RG
30.0000 6.07185 181.488 79.4281 rc
newpath
31.0000 8.07185 m
31.9384 8.87339 l
32.7549 9.56738 l
33.6731 10.3440 l
34.5975 11.1217 l
35.5174 11.8916 l
36.3703 12.6018 l
37.2535 13.3335 l
38.1668 14.0863 l
39.0772 14.8326 l
40.0137 15.5962 l
40.8386 16.2653 l
41.7671 17.0146 l
42.6995 17.7629 l
43.5981 18.4800 l
44.4140 19.1279 l
45.3843 19.8941 l
46.2062 20.5396 l
47.1623 21.2865 l
48.0086 21.9439 l
48.9371 22.6613 l
49.8213 23.3405 l
50.7439 24.0452 l
51.5911 24.6888 l
52.5049 25.3791 l
53.4541 26.0919 l
54.2804 26.7088 l
55.1728 27.3715 l
56.0947 28.0521 l
56.9966 28.7139 l
57.8693 29.3506 l
58.8383 30.0532 l
59.7089 30.6807 l
60.6385 31.3467 l
61.4809 31.9466 l
62.4018 32.5986 l
63.2683 33.2083 l
64.1741 33.8418 l
65.0596 34.4573 l
65.9867 35.0977 l
66.8795 35.7106 l
67.7927 36.3333 l
68.6982 36.9470 l
69.5303 37.5075 l
70.4840 38.1457 l
71.3370 38.7128 l
72.2464 39.3137 l
73.1169 39.8851 l
74.0834 40.5153 l
74.9204 41.0573 l
75.8704 41.6685 l
76.7361 42.2218 l
77.6832 42.8228 l
78.5003 43.3380 l
79.4309 43.9208 l
80.3298 44.4798 l
81.2281 45.0346 l
82.1232 45.5834 l
82.9830 46.1071 l
83.9125 46.6692 l
84.7984 47.2011 l
85.7308 47.7568 l
86.5748 48.2563 l
87.5076 48.8043 l
88.4010 49.3253 l
89.2923 49.8412 l
90.2233 50.3760 l
91.0807 50.8649 l
91.9588 51.3619 l
92.9284 51.9064 l
93.8062 52.3955 l
94.7040 52.8919 l
95.6170 53.3927 l
96.4562 53.8496 l
97.3508 54.3328 l
98.2386 54.8086 l
99.1883 55.3133 l
100.026 55.7551 l
100.993 56.2607 l
101.865 56.7131 l
102.729 57.1572 l
103.657 57.6306 l
104.589 58.1019 l
105.437 58.5270 l
106.338 58.9747 l
107.217 59.4079 l
108.170 59.8732 l
108.994 60.2724 l
109.941 60.7268 l
110.831 61.1500 l
111.713 61.5654 l
112.595 61.9774 l
113.495 62.3938 l
114.449 62.8309 l
115.323 63.2279 l
116.186 63.6161 l
117.109 64.0272 l
118.030 64.4333 l
118.856 64.7944 l
119.836 65.2178 l
120.655 65.5686 l
121.613 65.9748 l
122.527 66.3583 l
123.344 66.6974 l
124.262 67.0749 l
125.186 67.4509 l
126.106 67.8209 l
126.959 68.1604 l
127.842 68.5082 l
128.756 68.8640 l
129.666 69.2147 l
130.603 69.5712 l
131.428 69.8818 l
132.356 70.2275 l
133.289 70.5705 l
134.187 70.8971 l
135.003 71.1903 l
135.973 71.5348 l
136.795 71.8231 l
137.751 72.1543 l
138.598 72.4439 l
139.526 72.7577 l
140.410 73.0526 l
141.333 73.3563 l
142.180 73.6316 l
143.094 73.9248 l
144.043 74.2250 l
144.869 74.4828 l
145.762 74.7576 l
146.684 75.0374 l
147.586 75.3072 l
148.458 75.5646 l
149.427 75.8461 l
150.298 76.0952 l
151.227 76.3571 l
152.070 76.5909 l
152.991 76.8425 l
153.857 77.0756 l
154.763 77.3154 l
155.649 77.5460 l
156.576 77.7835 l
157.469 78.0082 l
158.382 78.2341 l
159.287 78.4542 l
160.119 78.6530 l
161.073 78.8767 l
161.926 79.0731 l
162.835 79.2787 l
163.706 79.4717 l
164.672 79.6818 l
165.509 79.8600 l
166.459 80.0583 l
167.325 80.2353 l
168.272 80.4247 l
169.089 80.5847 l
170.020 80.7630 l
170.919 80.9313 l
171.817 81.0956 l
172.712 81.2554 l
173.572 81.4054 l
174.502 81.5635 l
175.387 81.7103 l
176.320 81.8608 l
177.164 81.9934 l
178.097 82.1360 l
178.990 82.2686 l
179.881 82.3971 l
180.812 82.5273 l
181.670 82.6435 l
182.548 82.7589 l
183.517 82.8819 l
184.395 82.9895 l
185.293 83.0956 l
186.206 83.1996 l
187.045 83.2917 l
187.940 83.3861 l
188.828 83.4760 l
189.777 83.5679 l
190.615 83.6455 l
191.582 83.7308 l
192.455 83.8040 l
193.318 83.8727 l
194.246 83.9427 l
195.179 84.0088 l
196.027 84.0653 l
196.927 84.1215 l
197.806 84.1726 l
198.759 84.2238 l
199.584 84.2646 l
200.530 84.3075 l
201.421 84.3438 l
202.302 84.3761 l
203.184 84.4046 l
204.084 84.4299 l
205.038 84.4525 l
205.912 84.4693 l
206.776 84.4823 l
207.699 84.4923 l
208.619 84.4981 l
209.488 84.5000 l
S
cliprestore
newpath
0 0 m
0 93.0000 l
214.000 93.0000 l
214.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
31.0000 27.0000 m
209.488 27.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
114 45 13 15 rc
newpath
119.091 51.4077 m
123.122 51.4077 l
123.122 51.5664 l
118.730 56.1367 l
120.589 56.1367 l
121.029 56.1367 121.309 56.1197 121.427 56.0859  c
121.546 56.0520 121.655 55.9801 121.754 55.8701  c
121.854 55.7600 121.965 55.5612 122.087 55.2734  c
122.322 55.2734 l
121.770 57.0000 l
117.638 57.0000 l
117.638 56.8159 l
122.030 52.2456 l
120.202 52.2456 l
119.817 52.2456 119.584 52.2561 119.504 52.2773  c
119.385 52.3027 119.268 52.3693 119.152 52.4772  c
119.035 52.5852 118.916 52.7640 118.793 53.0136  c
118.552 53.0136 l
h
f
Q
cliprestore
newpath
0 0 m
0 93.0000 l
214.000 93.0000 l
214.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
31.0000 27.0000 m
31.0000 30.0000 l
S
Q
q
0 J
1 j
newpath
76.0000 27.0000 m
76.0000 30.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
72.4697 43.7470 m
72.4697 42.7653 72.6178 41.9200 72.9140 41.2111  c
73.2102 40.5023 73.6038 39.9744 74.0947 39.6274  c
74.4755 39.3523 74.8691 39.2148 75.2753 39.2148  c
75.9355 39.2148 76.5279 39.5512 77.0527 40.2241  c
77.7086 41.0577 78.0366 42.1876 78.0366 43.6137  c
78.0366 44.6124 77.8927 45.4609 77.6049 46.1591  c
77.3172 46.8574 76.9501 47.3641 76.5036 47.6794  c
76.0572 47.9947 75.6266 48.1523 75.2119 48.1523  c
74.3909 48.1523 73.7075 47.6678 73.1616 46.6987  c
72.7003 45.8820 72.4697 44.8981 72.4697 43.7470  c
h
73.7138 43.9057 m
73.7138 45.0906 73.8598 46.0576 74.1518 46.8066  c
74.3930 47.4371 74.7527 47.7524 75.2309 47.7524  c
75.4594 47.7524 75.6964 47.6498 75.9418 47.4445  c
76.1873 47.2393 76.3735 46.8955 76.5004 46.4130  c
76.6951 45.6852 76.7924 44.6590 76.7924 43.3344  c
76.7924 42.3527 76.6909 41.5338 76.4877 40.8779  c
76.3354 40.3912 76.1386 40.0463 75.8974 39.8432  c
75.7239 39.7036 75.5144 39.6337 75.2690 39.6337  c
74.9812 39.6337 74.7252 39.7628 74.5009 40.0210  c
74.1962 40.3722 73.9889 40.9244 73.8789 41.6777  c
73.7688 42.4309 73.7138 43.1736 73.7138 43.9057  c
h
80.6250 46.7685 m
80.8238 46.7685 80.9910 46.8373 81.1264 46.9748  c
81.2618 47.1123 81.3295 47.2784 81.3295 47.4731  c
81.3295 47.6678 81.2608 47.8339 81.1232 47.9714  c
80.9857 48.1089 80.8196 48.1777 80.6250 48.1777  c
80.4303 48.1777 80.2642 48.1089 80.1267 47.9714  c
79.9891 47.8339 79.9204 47.6678 79.9204 47.4731  c
79.9204 47.2742 79.9891 47.1071 80.1267 46.9716  c
80.2642 46.8362 80.4303 46.7685 80.6250 46.7685  c
h
87.6430 39.3925 m
87.1479 40.4716 l
84.5581 40.4716 l
83.9931 41.6269 l
85.1145 41.7919 86.0032 42.2088 86.6591 42.8774  c
87.2220 43.4529 87.5034 44.1300 87.5034 44.9086  c
87.5034 45.3614 87.4113 45.7804 87.2272 46.1655  c
87.0432 46.5506 86.8115 46.8785 86.5322 47.1494  c
86.2529 47.4202 85.9418 47.6381 85.5991 47.8032  c
85.1124 48.0359 84.6131 48.1523 84.1010 48.1523  c
83.5848 48.1523 83.2092 48.0645 82.9743 47.8889  c
82.7395 47.7133 82.6220 47.5196 82.6220 47.3081  c
82.6220 47.1896 82.6707 47.0848 82.7680 46.9939  c
82.8654 46.9029 82.9881 46.8574 83.1362 46.8574  c
83.2462 46.8574 83.3425 46.8743 83.4250 46.9082  c
83.5075 46.9420 83.6482 47.0288 83.8471 47.1684  c
84.1645 47.3885 84.4861 47.4985 84.8120 47.4985  c
85.3071 47.4985 85.7419 47.3112 86.1164 46.9367  c
86.4909 46.5622 86.6782 46.1062 86.6782 45.5688  c
86.6782 45.0483 86.5110 44.5627 86.1767 44.1120  c
85.8424 43.6613 85.3811 43.3133 84.7929 43.0678  c
84.3317 42.8774 83.7032 42.7674 82.9077 42.7377  c
84.5581 39.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
120.000 27.0000 m
120.000 30.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
123.523 40.2368 m
125.618 39.2148 l
125.827 39.2148 l
125.827 46.4829 l
125.827 46.9653 125.847 47.2657 125.887 47.3842  c
125.928 47.5027 126.011 47.5937 126.138 47.6572  c
126.265 47.7207 126.523 47.7566 126.913 47.7651  c
126.913 48.0000 l
123.675 48.0000 l
123.675 47.7651 l
124.082 47.7566 124.344 47.7217 124.462 47.6604  c
124.581 47.5990 124.663 47.5165 124.710 47.4128  c
124.757 47.3091 124.780 46.9991 124.780 46.4829  c
124.780 41.8364 l
124.780 41.2101 124.759 40.8081 124.716 40.6303  c
124.687 40.4949 124.633 40.3955 124.554 40.3320  c
124.476 40.2685 124.382 40.2368 124.272 40.2368  c
124.115 40.2368 123.897 40.3024 123.618 40.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
165.000 27.0000 m
165.000 30.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
162.523 40.2368 m
164.618 39.2148 l
164.827 39.2148 l
164.827 46.4829 l
164.827 46.9653 164.847 47.2657 164.887 47.3842  c
164.928 47.5027 165.011 47.5937 165.138 47.6572  c
165.265 47.7207 165.523 47.7566 165.913 47.7651  c
165.913 48.0000 l
162.675 48.0000 l
162.675 47.7651 l
163.082 47.7566 163.344 47.7217 163.462 47.6604  c
163.581 47.5990 163.663 47.5165 163.710 47.4128  c
163.757 47.3091 163.780 46.9991 163.780 46.4829  c
163.780 41.8364 l
163.780 41.2101 163.759 40.8081 163.716 40.6303  c
163.687 40.4949 163.633 40.3955 163.554 40.3320  c
163.476 40.2685 163.382 40.2368 163.272 40.2368  c
163.115 40.2368 162.897 40.3024 162.618 40.4335  c
h
169.625 46.7685 m
169.823 46.7685 169.991 46.8373 170.126 46.9748  c
170.261 47.1123 170.329 47.2784 170.329 47.4731  c
170.329 47.6678 170.260 47.8339 170.123 47.9714  c
169.985 48.1089 169.819 48.1777 169.625 48.1777  c
169.430 48.1777 169.264 48.1089 169.126 47.9714  c
168.989 47.8339 168.920 47.6678 168.920 47.4731  c
168.920 47.2742 168.989 47.1071 169.126 46.9716  c
169.264 46.8362 169.430 46.7685 169.625 46.7685  c
h
176.643 39.3925 m
176.147 40.4716 l
173.558 40.4716 l
172.993 41.6269 l
174.114 41.7919 175.003 42.2088 175.659 42.8774  c
176.222 43.4529 176.503 44.1300 176.503 44.9086  c
176.503 45.3614 176.411 45.7804 176.227 46.1655  c
176.043 46.5506 175.811 46.8785 175.532 47.1494  c
175.252 47.4202 174.941 47.6381 174.599 47.8032  c
174.112 48.0359 173.613 48.1523 173.101 48.1523  c
172.584 48.1523 172.209 48.0645 171.974 47.8889  c
171.739 47.7133 171.622 47.5196 171.622 47.3081  c
171.622 47.1896 171.670 47.0848 171.768 46.9939  c
171.865 46.9029 171.988 46.8574 172.136 46.8574  c
172.246 46.8574 172.342 46.8743 172.425 46.9082  c
172.507 46.9420 172.648 47.0288 172.847 47.1684  c
173.164 47.3885 173.486 47.4985 173.812 47.4985  c
174.307 47.4985 174.741 47.3112 175.116 46.9367  c
175.491 46.5622 175.678 46.1062 175.678 45.5688  c
175.678 45.0483 175.511 44.5627 175.176 44.1120  c
174.842 43.6613 174.381 43.3133 173.793 43.0678  c
173.331 42.8774 172.703 42.7674 171.907 42.7377  c
173.558 39.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
209.000 27.0000 m
209.000 30.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
216.960 46.3432 m
216.357 48.0000 l
211.279 48.0000 l
211.279 47.7651 l
212.773 46.4025 213.824 45.2895 214.434 44.4262  c
215.043 43.5629 215.348 42.7737 215.348 42.0585  c
215.348 41.5127 215.181 41.0641 214.846 40.7128  c
214.512 40.3616 214.112 40.1860 213.647 40.1860  c
213.223 40.1860 212.844 40.3098 212.507 40.5573  c
212.171 40.8049 211.922 41.1678 211.761 41.6460  c
211.526 41.6460 l
211.632 40.8631 211.904 40.2622 212.342 39.8432  c
212.780 39.4243 213.327 39.2148 213.983 39.2148  c
214.681 39.2148 215.264 39.4391 215.732 39.8877  c
216.199 40.3362 216.433 40.8652 216.433 41.4746  c
216.433 41.9104 216.332 42.3463 216.128 42.7822  c
215.815 43.4677 215.307 44.1935 214.605 44.9594  c
213.551 46.1105 212.893 46.8045 212.631 47.0415  c
214.878 47.0415 l
215.335 47.0415 215.656 47.0245 215.840 46.9907  c
216.024 46.9568 216.190 46.8881 216.338 46.7844  c
216.486 46.6807 216.615 46.5336 216.725 46.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
40.0000 27.0000 m
40.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
49.0000 27.0000 m
49.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 27.0000 m
58.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 27.0000 m
67.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
85.0000 27.0000 m
85.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
93.0000 27.0000 m
93.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
102.000 27.0000 m
102.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
111.000 27.0000 m
111.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
129.000 27.0000 m
129.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
138.000 27.0000 m
138.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
147.000 27.0000 m
147.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
156.000 27.0000 m
156.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
174.000 27.0000 m
174.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
183.000 27.0000 m
183.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
192.000 27.0000 m
192.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
201.000 27.0000 m
201.000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
31.0000 84.5000 m
31.0000 8.07185 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 48 8 15 rc
Q
cliprestore
newpath
0 0 m
0 93.0000 l
214.000 93.0000 l
214.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
31.0000 85.0000 m
28.0000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
16 83 7 13 rc
newpath
26.7900 90.4380 m
18.2100 90.4380 l
18.2100 89.7620 l
26.7900 89.7620 l
h
f
Q
newpath
25.6601 87.0302 m
25.9056 86.4505 26.2155 86.0030 26.5900 85.6877  c
26.9646 85.3724 27.4311 85.2148 27.9897 85.2148  c
28.6795 85.2148 29.2085 85.4391 29.5766 85.8877  c
29.8559 86.2220 29.9956 86.5795 29.9956 86.9604  c
29.9956 87.5867 29.6020 88.2342 28.8149 88.9028  c
29.3439 89.1101 29.7438 89.4064 30.0146 89.7915  c
30.2854 90.1766 30.4209 90.6293 30.4209 91.1499  c
30.4209 91.8946 30.1839 92.5400 29.7099 93.0859  c
29.0921 93.7968 28.1971 94.1523 27.0249 94.1523  c
26.4451 94.1523 26.0505 94.0804 25.8410 93.9365  c
25.6315 93.7926 25.5268 93.6381 25.5268 93.4731  c
25.5268 93.3504 25.5765 93.2425 25.6760 93.1494  c
25.7754 93.0563 25.8950 93.0097 26.0346 93.0097  c
26.1404 93.0097 26.2483 93.0266 26.3584 93.0605  c
26.4303 93.0817 26.5932 93.1589 26.8471 93.2922  c
27.1010 93.4255 27.2766 93.5048 27.3740 93.5302  c
27.5306 93.5768 27.6977 93.6001 27.8754 93.6001  c
28.3071 93.6001 28.6827 93.4329 29.0022 93.0986  c
29.3217 92.7643 29.4814 92.3686 29.4814 91.9116  c
29.4814 91.5773 29.4073 91.2514 29.2592 90.9340  c
29.1492 90.6971 29.0286 90.5172 28.8974 90.3945  c
28.7154 90.2252 28.4658 90.0718 28.1484 89.9343  c
27.8310 89.7967 27.5073 89.7280 27.1772 89.7280  c
26.9741 89.7280 l
26.9741 89.5376 l
27.3084 89.4952 27.6438 89.3746 27.9802 89.1757  c
28.3166 88.9768 28.5610 88.7377 28.7133 88.4585  c
28.8657 88.1792 28.9418 87.8724 28.9418 87.5380  c
28.9418 87.1022 28.8054 86.7499 28.5324 86.4812  c
28.2595 86.2124 27.9199 86.0781 27.5136 86.0781  c
26.8577 86.0781 26.3097 86.4293 25.8696 87.1318  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 65.0000 m
28.0000 65.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
16 64 7 13 rc
newpath
26.7900 71.4380 m
18.2100 71.4380 l
18.2100 70.7620 l
26.7900 70.7620 l
h
f
Q
newpath
30.9604 73.3432 m
30.3574 75.0000 l
25.2793 75.0000 l
25.2793 74.7651 l
26.7731 73.4025 27.8247 72.2895 28.4340 71.4262  c
29.0434 70.5629 29.3481 69.7737 29.3481 69.0585  c
29.3481 68.5127 29.1809 68.0641 28.8466 67.7128  c
28.5123 67.3616 28.1124 67.1860 27.6469 67.1860  c
27.2238 67.1860 26.8439 67.3098 26.5075 67.5573  c
26.1711 67.8049 25.9225 68.1678 25.7617 68.6460  c
25.5268 68.6460 l
25.6326 67.8631 25.9045 67.2622 26.3425 66.8432  c
26.7805 66.4243 27.3274 66.2148 27.9834 66.2148  c
28.6816 66.2148 29.2645 66.4391 29.7321 66.8877  c
30.1997 67.3362 30.4335 67.8652 30.4335 68.4746  c
30.4335 68.9104 30.3320 69.3463 30.1289 69.7822  c
29.8157 70.4677 29.3079 71.1935 28.6054 71.9594  c
27.5517 73.1105 26.8937 73.8045 26.6313 74.0415  c
28.8784 74.0415 l
29.3354 74.0415 29.6560 74.0245 29.8400 73.9907  c
30.0241 73.9568 30.1902 73.8881 30.3383 73.7844  c
30.4864 73.6807 30.6155 73.5336 30.7255 73.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 46.0000 m
28.0000 46.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
16 45 7 13 rc
newpath
26.7900 52.4380 m
18.2100 52.4380 l
18.2100 51.7620 l
26.7900 51.7620 l
h
f
Q
newpath
26.5234 48.2368 m
28.6181 47.2148 l
28.8276 47.2148 l
28.8276 54.4829 l
28.8276 54.9653 28.8477 55.2657 28.8879 55.3842  c
28.9281 55.5027 29.0117 55.5937 29.1386 55.6572  c
29.2656 55.7207 29.5237 55.7566 29.9130 55.7651  c
29.9130 56.0000 l
26.6757 56.0000 l
26.6757 55.7651 l
27.0820 55.7566 27.3444 55.7217 27.4628 55.6604  c
27.5813 55.5990 27.6639 55.5165 27.7104 55.4128  c
27.7570 55.3091 27.7802 54.9991 27.7802 54.4829  c
27.7802 49.8364 l
27.7802 49.2101 27.7591 48.8081 27.7168 48.6303  c
27.6871 48.4949 27.6332 48.3955 27.5549 48.3320  c
27.4766 48.2685 27.3824 48.2368 27.2724 48.2368  c
27.1158 48.2368 26.8979 48.3024 26.6186 48.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 27.0000 m
28.0000 27.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.4697 32.7470 m
25.4697 31.7653 25.6178 30.9200 25.9140 30.2111  c
26.2102 29.5023 26.6038 28.9744 27.0947 28.6274  c
27.4755 28.3523 27.8691 28.2148 28.2753 28.2148  c
28.9355 28.2148 29.5279 28.5512 30.0527 29.2241  c
30.7086 30.0577 31.0366 31.1876 31.0366 32.6137  c
31.0366 33.6124 30.8927 34.4609 30.6049 35.1591  c
30.3172 35.8574 29.9501 36.3641 29.5036 36.6794  c
29.0572 36.9947 28.6266 37.1523 28.2119 37.1523  c
27.3909 37.1523 26.7075 36.6678 26.1616 35.6987  c
25.7003 34.8820 25.4697 33.8981 25.4697 32.7470  c
h
26.7138 32.9057 m
26.7138 34.0906 26.8598 35.0576 27.1518 35.8066  c
27.3930 36.4371 27.7527 36.7524 28.2309 36.7524  c
28.4594 36.7524 28.6964 36.6498 28.9418 36.4445  c
29.1873 36.2393 29.3735 35.8955 29.5004 35.4130  c
29.6951 34.6852 29.7924 33.6590 29.7924 32.3344  c
29.7924 31.3527 29.6909 30.5338 29.4877 29.8779  c
29.3354 29.3912 29.1386 29.0463 28.8974 28.8432  c
28.7239 28.7036 28.5144 28.6337 28.2690 28.6337  c
27.9812 28.6337 27.7252 28.7628 27.5009 29.0210  c
27.1962 29.3722 26.9889 29.9244 26.8789 30.6777  c
26.7688 31.4309 26.7138 32.1736 26.7138 32.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 8.00000 m
28.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
26.5234 10.2368 m
28.6181 9.21484 l
28.8276 9.21484 l
28.8276 16.4829 l
28.8276 16.9653 28.8477 17.2657 28.8879 17.3842  c
28.9281 17.5027 29.0117 17.5937 29.1386 17.6572  c
29.2656 17.7207 29.5237 17.7566 29.9130 17.7651  c
29.9130 18.0000 l
26.6757 18.0000 l
26.6757 17.7651 l
27.0820 17.7566 27.3444 17.7217 27.4628 17.6604  c
27.5813 17.5990 27.6639 17.5165 27.7104 17.4128  c
27.7570 17.3091 27.7802 16.9991 27.7802 16.4829  c
27.7802 11.8364 l
27.7802 11.2101 27.7591 10.8081 27.7168 10.6303  c
27.6871 10.4949 27.6332 10.3955 27.5549 10.3320  c
27.4766 10.2685 27.3824 10.2368 27.2724 10.2368  c
27.1158 10.2368 26.8979 10.3024 26.6186 10.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 75.0000 m
30.0000 75.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 56.0000 m
30.0000 56.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 37.0000 m
30.0000 37.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 18.0000 m
30.0000 18.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 224 103 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
