%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 169 575 622
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ16“ú 17Žž06•ª19•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
206 168 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
206.000 0 l
206.000 168.000 l
0 168.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 196 158 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
40.0000 6.04040 153.486 144.459 rc
1.00000 0 0 RG
newpath
41.0000 149.500 m
116.223 149.500 l
116.244 8.04040 l
191.486 8.04040 l
S
cliprestore
newpath
0 0 m
0 158.000 l
196.000 158.000 l
196.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
41.0000 79.0000 m
191.486 79.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
109 97 14 15 rc
newpath
115.278 103.255 m
115.486 103.475 115.642 103.695 115.748 103.915  c
115.824 104.067 115.949 104.467 116.123 105.115  c
116.681 104.277 l
116.829 104.074 117.009 103.880 117.221 103.696  c
117.432 103.512 117.619 103.386 117.779 103.318  c
117.881 103.276 117.993 103.255 118.116 103.255  c
118.298 103.255 118.443 103.304 118.551 103.401  c
118.658 103.498 118.712 103.617 118.712 103.756  c
118.712 103.917 118.681 104.027 118.617 104.086  c
118.499 104.192 118.363 104.245 118.211 104.245  c
118.122 104.245 118.027 104.226 117.925 104.188  c
117.726 104.120 117.593 104.086 117.525 104.086  c
117.424 104.086 117.303 104.146 117.164 104.264  c
116.901 104.484 116.588 104.910 116.224 105.540  c
116.745 107.724 l
116.825 108.058 116.893 108.258 116.948 108.324  c
117.003 108.389 117.058 108.422 117.113 108.422  c
117.202 108.422 117.305 108.373 117.424 108.276  c
117.657 108.081 117.856 107.827 118.021 107.514  c
118.243 107.628 l
117.976 108.128 117.638 108.543 117.227 108.873  c
116.994 109.059 116.798 109.152 116.637 109.152  c
116.400 109.152 116.211 109.019 116.072 108.752  c
115.983 108.587 115.799 107.876 115.520 106.619  c
114.859 107.766 114.330 108.504 113.933 108.835  c
113.675 109.046 113.425 109.152 113.184 109.152  c
113.014 109.152 112.860 109.091 112.720 108.968  c
112.619 108.875 112.568 108.750 112.568 108.593  c
112.568 108.454 112.614 108.337 112.708 108.244  c
112.801 108.151 112.915 108.105 113.050 108.105  c
113.186 108.105 113.330 108.172 113.482 108.308  c
113.592 108.405 113.677 108.454 113.736 108.454  c
113.787 108.454 113.852 108.420 113.933 108.352  c
114.132 108.191 114.402 107.844 114.745 107.311  c
115.088 106.778 115.312 106.393 115.418 106.156  c
115.156 105.127 115.014 104.584 114.993 104.524  c
114.895 104.249 114.768 104.055 114.612 103.940  c
114.455 103.826 114.225 103.769 113.920 103.769  c
113.823 103.769 113.710 103.773 113.584 103.782  c
113.584 103.553 l
h
f
Q
cliprestore
newpath
0 0 m
0 158.000 l
196.000 158.000 l
196.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
41.0000 79.0000 m
41.0000 82.0000 l
S
Q
q
0 J
1 j
newpath
71.0000 79.0000 m
71.0000 82.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
68.4697 94.7470 m
68.4697 93.7653 68.6178 92.9200 68.9140 92.2111  c
69.2102 91.5023 69.6038 90.9744 70.0947 90.6274  c
70.4755 90.3523 70.8691 90.2148 71.2753 90.2148  c
71.9355 90.2148 72.5279 90.5512 73.0527 91.2241  c
73.7086 92.0577 74.0366 93.1876 74.0366 94.6137  c
74.0366 95.6124 73.8927 96.4609 73.6049 97.1591  c
73.3172 97.8574 72.9501 98.3641 72.5036 98.6794  c
72.0572 98.9947 71.6266 99.1523 71.2119 99.1523  c
70.3909 99.1523 69.7075 98.6678 69.1616 97.6987  c
68.7003 96.8820 68.4697 95.8981 68.4697 94.7470  c
h
69.7138 94.9057 m
69.7138 96.0906 69.8598 97.0576 70.1518 97.8066  c
70.3930 98.4371 70.7527 98.7524 71.2309 98.7524  c
71.4594 98.7524 71.6964 98.6498 71.9418 98.4445  c
72.1873 98.2393 72.3735 97.8955 72.5004 97.4130  c
72.6951 96.6852 72.7924 95.6590 72.7924 94.3344  c
72.7924 93.3527 72.6909 92.5338 72.4877 91.8779  c
72.3354 91.3912 72.1386 91.0463 71.8974 90.8432  c
71.7239 90.7036 71.5144 90.6337 71.2690 90.6337  c
70.9812 90.6337 70.7252 90.7628 70.5009 91.0210  c
70.1962 91.3722 69.9889 91.9244 69.8789 92.6777  c
69.7688 93.4309 69.7138 94.1736 69.7138 94.9057  c
h
76.6250 97.7685 m
76.8238 97.7685 76.9910 97.8373 77.1264 97.9748  c
77.2618 98.1123 77.3295 98.2784 77.3295 98.4731  c
77.3295 98.6678 77.2608 98.8339 77.1232 98.9714  c
76.9857 99.1089 76.8196 99.1777 76.6250 99.1777  c
76.4303 99.1777 76.2642 99.1089 76.1267 98.9714  c
75.9891 98.8339 75.9204 98.6678 75.9204 98.4731  c
75.9204 98.2742 75.9891 98.1071 76.1267 97.9716  c
76.2642 97.8362 76.4303 97.7685 76.6250 97.7685  c
h
83.9604 97.3432 m
83.3574 99.0000 l
78.2793 99.0000 l
78.2793 98.7651 l
79.7731 97.4025 80.8247 96.2895 81.4340 95.4262  c
82.0434 94.5629 82.3481 93.7737 82.3481 93.0585  c
82.3481 92.5127 82.1809 92.0641 81.8466 91.7128  c
81.5123 91.3616 81.1124 91.1860 80.6469 91.1860  c
80.2238 91.1860 79.8439 91.3098 79.5075 91.5573  c
79.1711 91.8049 78.9225 92.1678 78.7617 92.6460  c
78.5268 92.6460 l
78.6326 91.8631 78.9045 91.2622 79.3425 90.8432  c
79.7805 90.4243 80.3274 90.2148 80.9834 90.2148  c
81.6816 90.2148 82.2645 90.4391 82.7321 90.8877  c
83.1997 91.3362 83.4335 91.8652 83.4335 92.4746  c
83.4335 92.9104 83.3320 93.3463 83.1289 93.7822  c
82.8157 94.4677 82.3079 95.1935 81.6054 95.9594  c
80.5517 97.1105 79.8937 97.8045 79.6313 98.0415  c
81.8784 98.0415 l
82.3354 98.0415 82.6560 98.0245 82.8400 97.9907  c
83.0241 97.9568 83.1902 97.8881 83.3383 97.7844  c
83.4864 97.6807 83.6155 97.5336 83.7255 97.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
101.000 79.0000 m
101.000 82.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
98.4697 94.7470 m
98.4697 93.7653 98.6178 92.9200 98.9140 92.2111  c
99.2102 91.5023 99.6038 90.9744 100.094 90.6274  c
100.475 90.3523 100.869 90.2148 101.275 90.2148  c
101.935 90.2148 102.528 90.5512 103.052 91.2241  c
103.708 92.0577 104.036 93.1876 104.036 94.6137  c
104.036 95.6124 103.892 96.4609 103.605 97.1591  c
103.317 97.8574 102.950 98.3641 102.503 98.6794  c
102.057 98.9947 101.626 99.1523 101.211 99.1523  c
100.391 99.1523 99.7075 98.6678 99.1616 97.6987  c
98.7003 96.8820 98.4697 95.8981 98.4697 94.7470  c
h
99.7138 94.9057 m
99.7138 96.0906 99.8598 97.0576 100.151 97.8066  c
100.393 98.4371 100.752 98.7524 101.231 98.7524  c
101.459 98.7524 101.696 98.6498 101.941 98.4445  c
102.187 98.2393 102.373 97.8955 102.500 97.4130  c
102.695 96.6852 102.792 95.6590 102.792 94.3344  c
102.792 93.3527 102.690 92.5338 102.487 91.8779  c
102.335 91.3912 102.138 91.0463 101.897 90.8432  c
101.724 90.7036 101.514 90.6337 101.269 90.6337  c
100.981 90.6337 100.725 90.7628 100.501 91.0210  c
100.196 91.3722 99.9889 91.9244 99.8789 92.6777  c
99.7688 93.4309 99.7138 94.1736 99.7138 94.9057  c
h
106.625 97.7685 m
106.823 97.7685 106.991 97.8373 107.126 97.9748  c
107.261 98.1123 107.329 98.2784 107.329 98.4731  c
107.329 98.6678 107.260 98.8339 107.123 98.9714  c
106.985 99.1089 106.819 99.1777 106.625 99.1777  c
106.430 99.1777 106.264 99.1089 106.126 98.9714  c
105.989 98.8339 105.920 98.6678 105.920 98.4731  c
105.920 98.2742 105.989 98.1071 106.126 97.9716  c
106.264 97.8362 106.430 97.7685 106.625 97.7685  c
h
114.049 95.8261 m
114.049 96.7275 l
112.894 96.7275 l
112.894 99.0000 l
111.846 99.0000 l
111.846 96.7275 l
108.203 96.7275 l
108.203 95.9150 l
112.195 90.2148 l
112.894 90.2148 l
112.894 95.8261 l
h
111.846 95.8261 m
111.846 91.5542 l
108.825 95.8261 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
131.000 79.0000 m
131.000 82.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
128.469 94.7470 m
128.469 93.7653 128.617 92.9200 128.914 92.2111  c
129.210 91.5023 129.603 90.9744 130.094 90.6274  c
130.475 90.3523 130.869 90.2148 131.275 90.2148  c
131.935 90.2148 132.528 90.5512 133.052 91.2241  c
133.708 92.0577 134.036 93.1876 134.036 94.6137  c
134.036 95.6124 133.892 96.4609 133.605 97.1591  c
133.317 97.8574 132.950 98.3641 132.503 98.6794  c
132.057 98.9947 131.626 99.1523 131.211 99.1523  c
130.391 99.1523 129.707 98.6678 129.161 97.6987  c
128.700 96.8820 128.469 95.8981 128.469 94.7470  c
h
129.713 94.9057 m
129.713 96.0906 129.859 97.0576 130.151 97.8066  c
130.393 98.4371 130.752 98.7524 131.231 98.7524  c
131.459 98.7524 131.696 98.6498 131.941 98.4445  c
132.187 98.2393 132.373 97.8955 132.500 97.4130  c
132.695 96.6852 132.792 95.6590 132.792 94.3344  c
132.792 93.3527 132.690 92.5338 132.487 91.8779  c
132.335 91.3912 132.138 91.0463 131.897 90.8432  c
131.724 90.7036 131.514 90.6337 131.269 90.6337  c
130.981 90.6337 130.725 90.7628 130.501 91.0210  c
130.196 91.3722 129.988 91.9244 129.878 92.6777  c
129.768 93.4309 129.713 94.1736 129.713 94.9057  c
h
136.625 97.7685 m
136.823 97.7685 136.991 97.8373 137.126 97.9748  c
137.261 98.1123 137.329 98.2784 137.329 98.4731  c
137.329 98.6678 137.260 98.8339 137.123 98.9714  c
136.985 99.1089 136.819 99.1777 136.625 99.1777  c
136.430 99.1777 136.264 99.1089 136.126 98.9714  c
135.989 98.8339 135.920 98.6678 135.920 98.4731  c
135.920 98.2742 135.989 98.1071 136.126 97.9716  c
136.264 97.8362 136.430 97.7685 136.625 97.7685  c
h
143.827 90.2148 m
143.827 90.4497 l
143.268 90.5047 142.812 90.6158 142.459 90.7829  c
142.105 90.9501 141.756 91.2050 141.411 91.5478  c
141.067 91.8906 140.781 92.2725 140.554 92.6936  c
140.328 93.1146 140.139 93.6150 139.986 94.1948  c
140.596 93.7758 141.207 93.5664 141.821 93.5664  c
142.409 93.5664 142.919 93.8033 143.351 94.2773  c
143.782 94.7513 143.998 95.3606 143.998 96.1054  c
143.998 96.8248 143.780 97.4807 143.344 98.0732  c
142.820 98.7926 142.126 99.1523 141.262 99.1523  c
140.674 99.1523 140.175 98.9576 139.764 98.5683  c
138.960 97.8108 138.558 96.8291 138.558 95.6230  c
138.558 94.8528 138.713 94.1207 139.022 93.4267  c
139.330 92.7327 139.772 92.1170 140.345 91.5795  c
140.918 91.0421 141.467 90.6803 141.992 90.4941  c
142.517 90.3079 143.006 90.2148 143.459 90.2148  c
h
139.878 94.6582 m
139.802 95.2294 139.764 95.6907 139.764 96.0419  c
139.764 96.4482 139.839 96.8894 139.990 97.3654  c
140.140 97.8415 140.363 98.2192 140.659 98.4985  c
140.875 98.6974 141.137 98.7968 141.446 98.7968  c
141.814 98.7968 142.144 98.6233 142.433 98.2763  c
142.723 97.9293 142.868 97.4342 142.868 96.7910  c
142.868 96.0673 142.724 95.4410 142.437 94.9121  c
142.149 94.3831 141.740 94.1186 141.211 94.1186  c
141.051 94.1186 140.878 94.1525 140.694 94.2202  c
140.510 94.2879 140.238 94.4339 139.878 94.6582  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
161.000 79.0000 m
161.000 82.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
158.469 94.7470 m
158.469 93.7653 158.617 92.9200 158.914 92.2111  c
159.210 91.5023 159.603 90.9744 160.094 90.6274  c
160.475 90.3523 160.869 90.2148 161.275 90.2148  c
161.935 90.2148 162.528 90.5512 163.052 91.2241  c
163.708 92.0577 164.036 93.1876 164.036 94.6137  c
164.036 95.6124 163.892 96.4609 163.605 97.1591  c
163.317 97.8574 162.950 98.3641 162.503 98.6794  c
162.057 98.9947 161.626 99.1523 161.211 99.1523  c
160.391 99.1523 159.707 98.6678 159.161 97.6987  c
158.700 96.8820 158.469 95.8981 158.469 94.7470  c
h
159.713 94.9057 m
159.713 96.0906 159.859 97.0576 160.151 97.8066  c
160.393 98.4371 160.752 98.7524 161.231 98.7524  c
161.459 98.7524 161.696 98.6498 161.941 98.4445  c
162.187 98.2393 162.373 97.8955 162.500 97.4130  c
162.695 96.6852 162.792 95.6590 162.792 94.3344  c
162.792 93.3527 162.690 92.5338 162.487 91.8779  c
162.335 91.3912 162.138 91.0463 161.897 90.8432  c
161.724 90.7036 161.514 90.6337 161.269 90.6337  c
160.981 90.6337 160.725 90.7628 160.501 91.0210  c
160.196 91.3722 159.988 91.9244 159.878 92.6777  c
159.768 93.4309 159.713 94.1736 159.713 94.9057  c
h
166.625 97.7685 m
166.823 97.7685 166.991 97.8373 167.126 97.9748  c
167.261 98.1123 167.329 98.2784 167.329 98.4731  c
167.329 98.6678 167.260 98.8339 167.123 98.9714  c
166.985 99.1089 166.819 99.1777 166.625 99.1777  c
166.430 99.1777 166.264 99.1089 166.126 98.9714  c
165.989 98.8339 165.920 98.6678 165.920 98.4731  c
165.920 98.2742 165.989 98.1071 166.126 97.9716  c
166.264 97.8362 166.430 97.7685 166.625 97.7685  c
h
170.494 94.6645 m
169.813 94.1059 169.374 93.6573 169.177 93.3188  c
168.980 92.9803 168.882 92.6290 168.882 92.2651  c
168.882 91.7065 169.098 91.2251 169.529 90.8210  c
169.961 90.4169 170.534 90.2148 171.250 90.2148  c
171.944 90.2148 172.502 90.4031 172.925 90.7797  c
173.349 91.1564 173.560 91.5859 173.560 92.0683  c
173.560 92.3899 173.446 92.7179 173.217 93.0522  c
172.989 93.3865 172.513 93.7801 171.789 94.2329  c
172.534 94.8084 173.027 95.2612 173.268 95.5913  c
173.590 96.0229 173.751 96.4778 173.751 96.9560  c
173.751 97.5612 173.520 98.0785 173.059 98.5080  c
172.597 98.9375 171.992 99.1523 171.243 99.1523  c
170.426 99.1523 169.790 98.8963 169.333 98.3842  c
168.969 97.9738 168.787 97.5252 168.787 97.0385  c
168.787 96.6577 168.915 96.2800 169.171 95.9055  c
169.427 95.5310 169.868 95.1173 170.494 94.6645  c
h
171.491 93.9853 m
171.999 93.5283 172.320 93.1675 172.456 92.9030  c
172.591 92.6385 172.659 92.3391 172.659 92.0048  c
172.659 91.5605 172.534 91.2124 172.284 90.9606  c
172.035 90.7089 171.694 90.5830 171.262 90.5830  c
170.831 90.5830 170.479 90.7078 170.209 90.9575  c
169.938 91.2071 169.802 91.4991 169.802 91.8335  c
169.802 92.0535 169.858 92.2736 169.970 92.4936  c
170.083 92.7137 170.242 92.9231 170.450 93.1220  c
h
170.793 94.9057 m
170.441 95.2019 170.181 95.5246 170.012 95.8737  c
169.842 96.2229 169.758 96.6005 169.758 97.0068  c
169.758 97.5527 169.907 97.9896 170.205 98.3176  c
170.504 98.6455 170.884 98.8095 171.345 98.8095  c
171.802 98.8095 172.168 98.6805 172.443 98.4223  c
172.718 98.1642 172.856 97.8510 172.856 97.4829  c
172.856 97.1782 172.775 96.9052 172.614 96.6640  c
172.314 96.2154 171.707 95.6293 170.793 94.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
191.000 79.0000 m
191.000 82.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
194.523 91.2368 m
196.618 90.2148 l
196.827 90.2148 l
196.827 97.4829 l
196.827 97.9653 196.847 98.2657 196.887 98.3842  c
196.928 98.5027 197.011 98.5937 197.138 98.6572  c
197.265 98.7207 197.523 98.7566 197.913 98.7651  c
197.913 99.0000 l
194.675 99.0000 l
194.675 98.7651 l
195.082 98.7566 195.344 98.7217 195.462 98.6604  c
195.581 98.5990 195.663 98.5165 195.710 98.4128  c
195.757 98.3091 195.780 97.9991 195.780 97.4829  c
195.780 92.8364 l
195.780 92.2101 195.759 91.8081 195.716 91.6303  c
195.687 91.4949 195.633 91.3955 195.554 91.3320  c
195.476 91.2685 195.382 91.2368 195.272 91.2368  c
195.115 91.2368 194.897 91.3024 194.618 91.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
56.0000 79.0000 m
56.0000 80.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
86.0000 79.0000 m
86.0000 80.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
116.000 79.0000 m
116.000 80.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
146.000 79.0000 m
146.000 80.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
176.000 79.0000 m
176.000 80.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
41.0000 149.500 m
41.0000 8.04040 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 36 8 15 rc
Q
cliprestore
newpath
0 0 m
0 158.000 l
196.000 158.000 l
196.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
41.0000 150.000 m
38.0000 150.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
25 148 7 13 rc
newpath
35.7900 155.438 m
27.2100 155.438 l
27.2100 154.762 l
35.7900 154.762 l
h
f
Q
newpath
35.5234 151.236 m
37.6181 150.214 l
37.8276 150.214 l
37.8276 157.482 l
37.8276 157.965 37.8477 158.265 37.8879 158.384  c
37.9281 158.502 38.0117 158.593 38.1386 158.657  c
38.2656 158.720 38.5237 158.756 38.9130 158.765  c
38.9130 159.000 l
35.6757 159.000 l
35.6757 158.765 l
36.0820 158.756 36.3444 158.721 36.4628 158.660  c
36.5813 158.599 36.6639 158.516 36.7104 158.412  c
36.7570 158.309 36.7802 157.999 36.7802 157.482  c
36.7802 152.836 l
36.7802 152.210 36.7591 151.808 36.7168 151.630  c
36.6871 151.495 36.6332 151.395 36.5549 151.332  c
36.4766 151.268 36.3824 151.236 36.2724 151.236  c
36.1158 151.236 35.8979 151.302 35.6186 151.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 114.000 m
38.0000 114.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
15 113 7 13 rc
newpath
25.7900 120.438 m
17.2100 120.438 l
17.2100 119.762 l
25.7900 119.762 l
h
f
Q
newpath
24.4697 119.747 m
24.4697 118.765 24.6178 117.920 24.9140 117.211  c
25.2102 116.502 25.6038 115.974 26.0947 115.627  c
26.4755 115.352 26.8691 115.214 27.2753 115.214  c
27.9355 115.214 28.5279 115.551 29.0527 116.224  c
29.7086 117.057 30.0366 118.187 30.0366 119.613  c
30.0366 120.612 29.8927 121.460 29.6049 122.159  c
29.3172 122.857 28.9501 123.364 28.5036 123.679  c
28.0572 123.994 27.6266 124.152 27.2119 124.152  c
26.3909 124.152 25.7075 123.667 25.1616 122.698  c
24.7003 121.882 24.4697 120.898 24.4697 119.747  c
h
25.7138 119.905 m
25.7138 121.090 25.8598 122.057 26.1518 122.806  c
26.3930 123.437 26.7527 123.752 27.2309 123.752  c
27.4594 123.752 27.6964 123.649 27.9418 123.444  c
28.1873 123.239 28.3735 122.895 28.5004 122.413  c
28.6951 121.685 28.7924 120.659 28.7924 119.334  c
28.7924 118.352 28.6909 117.533 28.4877 116.877  c
28.3354 116.391 28.1386 116.046 27.8974 115.843  c
27.7239 115.703 27.5144 115.633 27.2690 115.633  c
26.9812 115.633 26.7252 115.762 26.5009 116.021  c
26.1962 116.372 25.9889 116.924 25.8789 117.677  c
25.7688 118.431 25.7138 119.173 25.7138 119.905  c
h
32.6250 122.768 m
32.8238 122.768 32.9910 122.837 33.1264 122.974  c
33.2618 123.112 33.3295 123.278 33.3295 123.473  c
33.3295 123.667 33.2608 123.833 33.1232 123.971  c
32.9857 124.109 32.8196 124.177 32.6250 124.177  c
32.4303 124.177 32.2642 124.109 32.1267 123.971  c
31.9891 123.833 31.9204 123.667 31.9204 123.473  c
31.9204 123.274 31.9891 123.107 32.1267 122.971  c
32.2642 122.836 32.4303 122.768 32.6250 122.768  c
h
39.6430 115.392 m
39.1479 116.471 l
36.5581 116.471 l
35.9931 117.627 l
37.1145 117.792 38.0032 118.208 38.6591 118.877  c
39.2220 119.453 39.5034 120.130 39.5034 120.908  c
39.5034 121.361 39.4113 121.780 39.2272 122.165  c
39.0432 122.550 38.8115 122.878 38.5322 123.149  c
38.2529 123.420 37.9418 123.638 37.5991 123.803  c
37.1124 124.036 36.6131 124.152 36.1010 124.152  c
35.5848 124.152 35.2092 124.064 34.9743 123.888  c
34.7395 123.713 34.6220 123.519 34.6220 123.308  c
34.6220 123.189 34.6707 123.084 34.7680 122.993  c
34.8654 122.902 34.9881 122.857 35.1362 122.857  c
35.2462 122.857 35.3425 122.874 35.4250 122.908  c
35.5075 122.942 35.6482 123.028 35.8471 123.168  c
36.1645 123.388 36.4861 123.498 36.8120 123.498  c
37.3071 123.498 37.7419 123.311 38.1164 122.936  c
38.4909 122.562 38.6782 122.106 38.6782 121.568  c
38.6782 121.048 38.5110 120.562 38.1767 120.112  c
37.8424 119.661 37.3811 119.313 36.7929 119.067  c
36.3317 118.877 35.7032 118.767 34.9077 118.737  c
36.5581 115.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 79.0000 m
38.0000 79.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
34.4697 83.7470 m
34.4697 82.7653 34.6178 81.9200 34.9140 81.2111  c
35.2102 80.5023 35.6038 79.9744 36.0947 79.6274  c
36.4755 79.3523 36.8691 79.2148 37.2753 79.2148  c
37.9355 79.2148 38.5279 79.5512 39.0527 80.2241  c
39.7086 81.0577 40.0366 82.1876 40.0366 83.6137  c
40.0366 84.6124 39.8927 85.4609 39.6049 86.1591  c
39.3172 86.8574 38.9501 87.3641 38.5036 87.6794  c
38.0572 87.9947 37.6266 88.1523 37.2119 88.1523  c
36.3909 88.1523 35.7075 87.6678 35.1616 86.6987  c
34.7003 85.8820 34.4697 84.8981 34.4697 83.7470  c
h
35.7138 83.9057 m
35.7138 85.0906 35.8598 86.0576 36.1518 86.8066  c
36.3930 87.4371 36.7527 87.7524 37.2309 87.7524  c
37.4594 87.7524 37.6964 87.6498 37.9418 87.4445  c
38.1873 87.2393 38.3735 86.8955 38.5004 86.4130  c
38.6951 85.6852 38.7924 84.6590 38.7924 83.3344  c
38.7924 82.3527 38.6909 81.5338 38.4877 80.8779  c
38.3354 80.3912 38.1386 80.0463 37.8974 79.8432  c
37.7239 79.7036 37.5144 79.6337 37.2690 79.6337  c
36.9812 79.6337 36.7252 79.7628 36.5009 80.0210  c
36.1962 80.3722 35.9889 80.9244 35.8789 81.6777  c
35.7688 82.4309 35.7138 83.1736 35.7138 83.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 43.0000 m
38.0000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.4697 48.7470 m
24.4697 47.7653 24.6178 46.9200 24.9140 46.2111  c
25.2102 45.5023 25.6038 44.9744 26.0947 44.6274  c
26.4755 44.3523 26.8691 44.2148 27.2753 44.2148  c
27.9355 44.2148 28.5279 44.5512 29.0527 45.2241  c
29.7086 46.0577 30.0366 47.1876 30.0366 48.6137  c
30.0366 49.6124 29.8927 50.4609 29.6049 51.1591  c
29.3172 51.8574 28.9501 52.3641 28.5036 52.6794  c
28.0572 52.9947 27.6266 53.1523 27.2119 53.1523  c
26.3909 53.1523 25.7075 52.6678 25.1616 51.6987  c
24.7003 50.8820 24.4697 49.8981 24.4697 48.7470  c
h
25.7138 48.9057 m
25.7138 50.0906 25.8598 51.0576 26.1518 51.8066  c
26.3930 52.4371 26.7527 52.7524 27.2309 52.7524  c
27.4594 52.7524 27.6964 52.6498 27.9418 52.4445  c
28.1873 52.2393 28.3735 51.8955 28.5004 51.4130  c
28.6951 50.6852 28.7924 49.6590 28.7924 48.3344  c
28.7924 47.3527 28.6909 46.5338 28.4877 45.8779  c
28.3354 45.3912 28.1386 45.0463 27.8974 44.8432  c
27.7239 44.7036 27.5144 44.6337 27.2690 44.6337  c
26.9812 44.6337 26.7252 44.7628 26.5009 45.0210  c
26.1962 45.3722 25.9889 45.9244 25.8789 46.6777  c
25.7688 47.4309 25.7138 48.1736 25.7138 48.9057  c
h
32.6250 51.7685 m
32.8238 51.7685 32.9910 51.8373 33.1264 51.9748  c
33.2618 52.1123 33.3295 52.2784 33.3295 52.4731  c
33.3295 52.6678 33.2608 52.8339 33.1232 52.9714  c
32.9857 53.1089 32.8196 53.1777 32.6250 53.1777  c
32.4303 53.1777 32.2642 53.1089 32.1267 52.9714  c
31.9891 52.8339 31.9204 52.6678 31.9204 52.4731  c
31.9204 52.2742 31.9891 52.1071 32.1267 51.9716  c
32.2642 51.8362 32.4303 51.7685 32.6250 51.7685  c
h
39.6430 44.3925 m
39.1479 45.4716 l
36.5581 45.4716 l
35.9931 46.6269 l
37.1145 46.7919 38.0032 47.2088 38.6591 47.8774  c
39.2220 48.4529 39.5034 49.1300 39.5034 49.9086  c
39.5034 50.3614 39.4113 50.7804 39.2272 51.1655  c
39.0432 51.5506 38.8115 51.8785 38.5322 52.1494  c
38.2529 52.4202 37.9418 52.6381 37.5991 52.8032  c
37.1124 53.0359 36.6131 53.1523 36.1010 53.1523  c
35.5848 53.1523 35.2092 53.0645 34.9743 52.8889  c
34.7395 52.7133 34.6220 52.5196 34.6220 52.3081  c
34.6220 52.1896 34.6707 52.0848 34.7680 51.9939  c
34.8654 51.9029 34.9881 51.8574 35.1362 51.8574  c
35.2462 51.8574 35.3425 51.8743 35.4250 51.9082  c
35.5075 51.9420 35.6482 52.0288 35.8471 52.1684  c
36.1645 52.3885 36.4861 52.4985 36.8120 52.4985  c
37.3071 52.4985 37.7419 52.3112 38.1164 51.9367  c
38.4909 51.5622 38.6782 51.1062 38.6782 50.5688  c
38.6782 50.0483 38.5110 49.5627 38.1767 49.1120  c
37.8424 48.6613 37.3811 48.3133 36.7929 48.0678  c
36.3317 47.8774 35.7032 47.7674 34.9077 47.7377  c
36.5581 44.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 8.00000 m
38.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
35.5234 10.2368 m
37.6181 9.21484 l
37.8276 9.21484 l
37.8276 16.4829 l
37.8276 16.9653 37.8477 17.2657 37.8879 17.3842  c
37.9281 17.5027 38.0117 17.5937 38.1386 17.6572  c
38.2656 17.7207 38.5237 17.7566 38.9130 17.7651  c
38.9130 18.0000 l
35.6757 18.0000 l
35.6757 17.7651 l
36.0820 17.7566 36.3444 17.7217 36.4628 17.6604  c
36.5813 17.5990 36.6639 17.5165 36.7104 17.4128  c
36.7570 17.3091 36.7802 16.9991 36.7802 16.4829  c
36.7802 11.8364 l
36.7802 11.2101 36.7591 10.8081 36.7168 10.6303  c
36.6871 10.4949 36.6332 10.3955 36.5549 10.3320  c
36.4766 10.2685 36.3824 10.2368 36.2724 10.2368  c
36.1158 10.2368 35.8979 10.3024 35.6186 10.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 142.000 m
39.0000 142.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 135.000 m
39.0000 135.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 128.000 m
39.0000 128.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 121.000 m
39.0000 121.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 107.000 m
39.0000 107.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 100.000 m
39.0000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 93.0000 m
39.0000 93.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 86.0000 m
39.0000 86.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 72.0000 m
39.0000 72.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 65.0000 m
39.0000 65.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 58.0000 m
39.0000 58.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 50.0000 m
39.0000 50.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 36.0000 m
39.0000 36.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 29.0000 m
39.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 22.0000 m
39.0000 22.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
41.0000 15.0000 m
39.0000 15.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 206 168 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
