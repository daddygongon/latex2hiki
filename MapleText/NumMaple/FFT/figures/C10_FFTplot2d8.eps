%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 317 575 474
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ16“ú 17Žž06•ª18•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
408 115 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
408.000 0 l
408.000 115.000 l
0 115.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 398 105 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
23.6762 2.02531 372.318 78.9746 rc
newpath
24.6762 79.9238 m
26.1245 79.8402 l
27.5728 79.7366 l
29.0211 79.6220 l
30.4694 79.5051 l
31.9177 79.3931 l
33.3661 79.2910 l
34.8144 79.2017 l
36.2627 79.1255 l
37.7110 79.0613 l
39.1593 79.0069 l
40.6076 78.9600 l
42.0559 78.9186 l
43.5042 78.8818 l
44.9525 78.8497 l
46.4008 78.8229 l
47.8491 78.8022 l
49.2975 78.7882 l
50.7458 78.7799 l
52.1941 78.7747 l
53.6424 78.7682 l
55.0907 78.7543 l
56.5390 78.7258 l
57.9873 78.6754 l
59.4356 78.5968 l
60.8839 78.4860 l
62.3322 78.3423 l
63.7805 78.1686 l
65.2288 77.9719 l
66.6772 77.7626 l
68.1255 77.5536 l
69.5738 77.3588 l
71.0221 77.1913 l
72.4704 77.0621 l
73.9187 76.9780 l
75.3670 76.9412 l
76.8153 76.9483 l
78.2636 76.9911 l
79.7119 77.0568 l
81.1602 77.1302 l
82.6086 77.1945 l
84.0569 77.2342 l
85.5052 77.2362 l
86.9535 77.1912 l
88.4018 77.0953 l
89.8501 76.9496 l
91.2984 76.7602 l
92.7467 76.5373 l
94.1950 76.2941 l
95.6433 76.0448 l
97.0916 75.8032 l
98.5399 75.5814 l
99.9883 75.3882 l
101.436 75.2287 l
102.884 75.1037 l
104.333 75.0100 l
105.781 74.9413 l
107.229 74.8886 l
108.678 74.8419 l
110.126 74.7910 l
111.574 74.7269 l
113.023 74.6424 l
114.471 74.5328 l
115.919 74.3958 l
117.368 74.2316 l
118.816 74.0421 l
120.264 73.8300 l
121.712 73.5978 l
123.161 73.3471 l
124.609 73.0775 l
126.057 72.7862 l
127.506 72.4680 l
128.954 72.1157 l
130.402 71.7207 l
131.851 71.2746 l
133.299 70.7702 l
134.747 70.2036 l
136.196 69.5745 l
137.644 68.8879 l
139.092 68.1539 l
140.540 67.3874 l
141.989 66.6066 l
143.437 65.8314 l
144.885 65.0811 l
146.334 64.3718 l
147.782 63.7142 l
149.230 63.1116 l
150.679 62.5590 l
152.127 62.0432 l
153.575 61.5431 l
155.024 61.0322 l
156.472 60.4810 l
157.920 59.8596 l
159.368 59.1412 l
160.817 58.3038 l
162.265 57.3326 l
163.713 56.2196 l
165.162 54.9641 l
166.610 53.5701 l
168.058 52.0446 l
169.507 50.3947 l
170.955 48.6253 l
172.403 46.7372 l
173.852 44.7264 l
175.300 42.5851 l
176.748 40.3031 l
178.197 37.8712 l
179.645 35.2851 l
181.093 32.5491 l
182.541 29.6795 l
183.990 26.7072 l
186.886 20.6511 l
188.335 17.6968 l
189.783 14.8905 l
191.231 12.3070 l
192.680 10.0142 l
194.128 8.06669 l
195.576 6.50054 l
197.025 5.33071 l
198.473 4.54978 l
199.921 4.12964 l
201.369 4.02531 l
202.818 4.18047 l
204.266 4.53411 l
205.714 5.02738 l
207.163 5.60977 l
208.611 6.24395 l
210.059 6.90853 l
211.508 7.59883 l
212.956 8.32522 l
214.404 9.10976 l
215.853 9.98149 l
217.301 10.9710 l
218.749 12.1057 l
220.197 13.4046 l
221.646 14.8762 l
223.094 16.5165 l
224.542 18.3097 l
225.991 20.2297 l
227.439 22.2432 l
228.887 24.3134 l
230.336 26.4037 l
231.784 28.4809 l
233.232 30.5179 l
234.681 32.4954 l
236.129 34.4019 l
237.577 36.2339 l
239.025 37.9942 l
240.474 39.6904 l
241.922 41.3325 l
243.370 42.9320 l
244.819 44.4995 l
246.267 46.0442 l
247.715 47.5730 l
249.164 49.0901 l
250.612 50.5972 l
252.060 52.0934 l
253.509 53.5756 l
254.957 55.0385 l
256.405 56.4745 l
257.853 57.8743 l
259.302 59.2268 l
260.750 60.5198 l
262.198 61.7405 l
263.647 62.8762 l
265.095 63.9158 l
266.543 64.8506 l
267.992 65.6755 l
269.440 66.3901 l
270.888 66.9985 l
272.337 67.5100 l
273.785 67.9380 l
275.233 68.2989 l
276.681 68.6106 l
278.130 68.8909 l
279.578 69.1553 l
281.026 69.4159 l
282.475 69.6806 l
283.923 69.9519 l
285.371 70.2282 l
286.820 70.5039 l
288.268 70.7714 l
289.716 71.0226 l
291.165 71.2508 l
292.613 71.4519 l
294.061 71.6260 l
295.509 71.7773 l
296.958 71.9142 l
298.406 72.0485 l
299.854 72.1939 l
301.303 72.3642 l
302.751 72.5719 l
304.199 72.8265 l
305.648 73.1330 l
307.096 73.4916 l
308.544 73.8974 l
309.993 74.3409 l
311.441 74.8090 l
312.889 75.2863 l
314.338 75.7569 l
315.786 76.2052 l
317.234 76.6181 l
318.682 76.9852 l
320.131 77.3000 l
321.579 77.5595 l
323.027 77.7646 l
324.476 77.9188 l
325.924 78.0280 l
327.372 78.0994 l
328.821 78.1407 l
330.269 78.1592 l
331.717 78.1613 l
333.166 78.1524 l
334.614 78.1362 l
336.062 78.1157 l
337.510 78.0926 l
338.959 78.0683 l
340.407 78.0444 l
341.855 78.0225 l
343.304 78.0053 l
344.752 77.9960 l
346.200 77.9985 l
347.649 78.0174 l
349.097 78.0570 l
350.545 78.1210 l
351.994 78.2116 l
353.442 78.3292 l
354.890 78.4718 l
356.338 78.6347 l
357.787 78.8107 l
359.235 78.9906 l
360.683 79.1638 l
362.132 79.3195 l
363.580 79.4481 l
365.028 79.5418 l
366.477 79.5961 l
367.925 79.6103 l
369.373 79.5881 l
370.822 79.5367 l
372.270 79.4669 l
373.718 79.3911 l
375.166 79.3224 l
376.615 79.2729 l
378.063 79.2520 l
379.511 79.2653 l
380.960 79.3140 l
382.408 79.3947 l
383.856 79.4997 l
385.305 79.6182 l
386.753 79.7378 l
388.201 79.8456 l
389.650 79.9303 l
391.098 79.9834 l
392.546 80.0000 l
393.994 79.9791 l
S
cliprestore
newpath
0 0 m
0 105.000 l
398.000 105.000 l
398.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
21.6762 83.0000 m
393.994 83.0000 l
S
Q
q
q
0 J
1 j
newpath
96.0000 83.0000 m
96.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
98.6430 96.3925 m
98.1479 97.4716 l
95.5581 97.4716 l
94.9931 98.6269 l
96.1145 98.7919 97.0032 99.2088 97.6591 99.8774  c
98.2220 100.453 98.5034 101.130 98.5034 101.908  c
98.5034 102.361 98.4113 102.780 98.2272 103.165  c
98.0432 103.550 97.8115 103.878 97.5322 104.149  c
97.2529 104.420 96.9418 104.638 96.5991 104.803  c
96.1124 105.036 95.6131 105.152 95.1010 105.152  c
94.5848 105.152 94.2092 105.064 93.9743 104.888  c
93.7395 104.713 93.6220 104.519 93.6220 104.308  c
93.6220 104.189 93.6707 104.084 93.7680 103.993  c
93.8654 103.902 93.9881 103.857 94.1362 103.857  c
94.2462 103.857 94.3425 103.874 94.4250 103.908  c
94.5075 103.942 94.6482 104.028 94.8471 104.168  c
95.1645 104.388 95.4861 104.498 95.8120 104.498  c
96.3071 104.498 96.7419 104.311 97.1164 103.936  c
97.4909 103.562 97.6782 103.106 97.6782 102.568  c
97.6782 102.048 97.5110 101.562 97.1767 101.112  c
96.8424 100.661 96.3811 100.313 95.7929 100.067  c
95.3317 99.8774 94.7032 99.7674 93.9077 99.7377  c
95.5581 96.3925 l
h
100.469 100.747 m
100.469 99.7653 100.617 98.9200 100.914 98.2111  c
101.210 97.5023 101.603 96.9744 102.094 96.6274  c
102.475 96.3523 102.869 96.2148 103.275 96.2148  c
103.935 96.2148 104.528 96.5512 105.052 97.2241  c
105.708 98.0577 106.036 99.1876 106.036 100.613  c
106.036 101.612 105.892 102.460 105.605 103.159  c
105.317 103.857 104.950 104.364 104.503 104.679  c
104.057 104.994 103.626 105.152 103.211 105.152  c
102.391 105.152 101.707 104.667 101.161 103.698  c
100.700 102.882 100.469 101.898 100.469 100.747  c
h
101.713 100.905 m
101.713 102.090 101.859 103.057 102.151 103.806  c
102.393 104.437 102.752 104.752 103.231 104.752  c
103.459 104.752 103.696 104.649 103.941 104.444  c
104.187 104.239 104.373 103.895 104.500 103.413  c
104.695 102.685 104.792 101.659 104.792 100.334  c
104.792 99.3527 104.690 98.5338 104.487 97.8779  c
104.335 97.3912 104.138 97.0463 103.897 96.8432  c
103.724 96.7036 103.514 96.6337 103.269 96.6337  c
102.981 96.6337 102.725 96.7628 102.501 97.0210  c
102.196 97.3722 101.988 97.9244 101.878 98.6777  c
101.768 99.4309 101.713 100.173 101.713 100.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
168.000 83.0000 m
168.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
164.523 97.2368 m
166.618 96.2148 l
166.827 96.2148 l
166.827 103.482 l
166.827 103.965 166.847 104.265 166.887 104.384  c
166.928 104.502 167.011 104.593 167.138 104.657  c
167.265 104.720 167.523 104.756 167.913 104.765  c
167.913 105.000 l
164.675 105.000 l
164.675 104.765 l
165.082 104.756 165.344 104.721 165.462 104.660  c
165.581 104.599 165.663 104.516 165.710 104.412  c
165.757 104.309 165.780 103.999 165.780 103.482  c
165.780 98.8364 l
165.780 98.2101 165.759 97.8081 165.716 97.6303  c
165.687 97.4949 165.633 97.3955 165.554 97.3320  c
165.476 97.2685 165.382 97.2368 165.272 97.2368  c
165.115 97.2368 164.897 97.3024 164.618 97.4335  c
h
170.469 100.747 m
170.469 99.7653 170.617 98.9200 170.914 98.2111  c
171.210 97.5023 171.603 96.9744 172.094 96.6274  c
172.475 96.3523 172.869 96.2148 173.275 96.2148  c
173.935 96.2148 174.528 96.5512 175.052 97.2241  c
175.708 98.0577 176.036 99.1876 176.036 100.613  c
176.036 101.612 175.892 102.460 175.605 103.159  c
175.317 103.857 174.950 104.364 174.503 104.679  c
174.057 104.994 173.626 105.152 173.211 105.152  c
172.391 105.152 171.707 104.667 171.161 103.698  c
170.700 102.882 170.469 101.898 170.469 100.747  c
h
171.713 100.905 m
171.713 102.090 171.859 103.057 172.151 103.806  c
172.393 104.437 172.752 104.752 173.231 104.752  c
173.459 104.752 173.696 104.649 173.941 104.444  c
174.187 104.239 174.373 103.895 174.500 103.413  c
174.695 102.685 174.792 101.659 174.792 100.334  c
174.792 99.3527 174.690 98.5338 174.487 97.8779  c
174.335 97.3912 174.138 97.0463 173.897 96.8432  c
173.724 96.7036 173.514 96.6337 173.269 96.6337  c
172.981 96.6337 172.725 96.7628 172.501 97.0210  c
172.196 97.3722 171.988 97.9244 171.878 98.6777  c
171.768 99.4309 171.713 100.173 171.713 100.905  c
h
177.469 100.747 m
177.469 99.7653 177.617 98.9200 177.914 98.2111  c
178.210 97.5023 178.603 96.9744 179.094 96.6274  c
179.475 96.3523 179.869 96.2148 180.275 96.2148  c
180.935 96.2148 181.528 96.5512 182.052 97.2241  c
182.708 98.0577 183.036 99.1876 183.036 100.613  c
183.036 101.612 182.892 102.460 182.605 103.159  c
182.317 103.857 181.950 104.364 181.503 104.679  c
181.057 104.994 180.626 105.152 180.211 105.152  c
179.391 105.152 178.707 104.667 178.161 103.698  c
177.700 102.882 177.469 101.898 177.469 100.747  c
h
178.713 100.905 m
178.713 102.090 178.859 103.057 179.151 103.806  c
179.393 104.437 179.752 104.752 180.231 104.752  c
180.459 104.752 180.696 104.649 180.941 104.444  c
181.187 104.239 181.373 103.895 181.500 103.413  c
181.695 102.685 181.792 101.659 181.792 100.334  c
181.792 99.3527 181.690 98.5338 181.487 97.8779  c
181.335 97.3912 181.138 97.0463 180.897 96.8432  c
180.724 96.7036 180.514 96.6337 180.269 96.6337  c
179.981 96.6337 179.725 96.7628 179.501 97.0210  c
179.196 97.3722 178.988 97.9244 178.878 98.6777  c
178.768 99.4309 178.713 100.173 178.713 100.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
240.000 83.0000 m
240.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
236.523 97.2368 m
238.618 96.2148 l
238.827 96.2148 l
238.827 103.482 l
238.827 103.965 238.847 104.265 238.887 104.384  c
238.928 104.502 239.011 104.593 239.138 104.657  c
239.265 104.720 239.523 104.756 239.913 104.765  c
239.913 105.000 l
236.675 105.000 l
236.675 104.765 l
237.082 104.756 237.344 104.721 237.462 104.660  c
237.581 104.599 237.663 104.516 237.710 104.412  c
237.757 104.309 237.780 103.999 237.780 103.482  c
237.780 98.8364 l
237.780 98.2101 237.759 97.8081 237.716 97.6303  c
237.687 97.4949 237.633 97.3955 237.554 97.3320  c
237.476 97.2685 237.382 97.2368 237.272 97.2368  c
237.115 97.2368 236.897 97.3024 236.618 97.4335  c
h
247.643 96.3925 m
247.147 97.4716 l
244.558 97.4716 l
243.993 98.6269 l
245.114 98.7919 246.003 99.2088 246.659 99.8774  c
247.222 100.453 247.503 101.130 247.503 101.908  c
247.503 102.361 247.411 102.780 247.227 103.165  c
247.043 103.550 246.811 103.878 246.532 104.149  c
246.252 104.420 245.941 104.638 245.599 104.803  c
245.112 105.036 244.613 105.152 244.101 105.152  c
243.584 105.152 243.209 105.064 242.974 104.888  c
242.739 104.713 242.622 104.519 242.622 104.308  c
242.622 104.189 242.670 104.084 242.768 103.993  c
242.865 103.902 242.988 103.857 243.136 103.857  c
243.246 103.857 243.342 103.874 243.425 103.908  c
243.507 103.942 243.648 104.028 243.847 104.168  c
244.164 104.388 244.486 104.498 244.812 104.498  c
245.307 104.498 245.741 104.311 246.116 103.936  c
246.491 103.562 246.678 103.106 246.678 102.568  c
246.678 102.048 246.511 101.562 246.176 101.112  c
245.842 100.661 245.381 100.313 244.793 100.067  c
244.331 99.8774 243.703 99.7674 242.907 99.7377  c
244.558 96.3925 l
h
249.469 100.747 m
249.469 99.7653 249.617 98.9200 249.914 98.2111  c
250.210 97.5023 250.603 96.9744 251.094 96.6274  c
251.475 96.3523 251.869 96.2148 252.275 96.2148  c
252.935 96.2148 253.528 96.5512 254.052 97.2241  c
254.708 98.0577 255.036 99.1876 255.036 100.613  c
255.036 101.612 254.892 102.460 254.605 103.159  c
254.317 103.857 253.950 104.364 253.503 104.679  c
253.057 104.994 252.626 105.152 252.211 105.152  c
251.391 105.152 250.707 104.667 250.161 103.698  c
249.700 102.882 249.469 101.898 249.469 100.747  c
h
250.713 100.905 m
250.713 102.090 250.859 103.057 251.151 103.806  c
251.393 104.437 251.752 104.752 252.231 104.752  c
252.459 104.752 252.696 104.649 252.941 104.444  c
253.187 104.239 253.373 103.895 253.500 103.413  c
253.695 102.685 253.792 101.659 253.792 100.334  c
253.792 99.3527 253.690 98.5338 253.487 97.8779  c
253.335 97.3912 253.138 97.0463 252.897 96.8432  c
252.724 96.7036 252.514 96.6337 252.269 96.6337  c
251.981 96.6337 251.725 96.7628 251.501 97.0210  c
251.196 97.3722 250.988 97.9244 250.878 98.6777  c
250.768 99.4309 250.713 100.173 250.713 100.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
313.000 83.0000 m
313.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
312.960 103.343 m
312.357 105.000 l
307.279 105.000 l
307.279 104.765 l
308.773 103.402 309.824 102.289 310.434 101.426  c
311.043 100.563 311.348 99.7737 311.348 99.0585  c
311.348 98.5127 311.181 98.0641 310.846 97.7128  c
310.512 97.3616 310.112 97.1860 309.647 97.1860  c
309.223 97.1860 308.844 97.3098 308.507 97.5573  c
308.171 97.8049 307.922 98.1678 307.761 98.6460  c
307.526 98.6460 l
307.632 97.8631 307.904 97.2622 308.342 96.8432  c
308.780 96.4243 309.327 96.2148 309.983 96.2148  c
310.681 96.2148 311.264 96.4391 311.732 96.8877  c
312.199 97.3362 312.433 97.8652 312.433 98.4746  c
312.433 98.9104 312.332 99.3463 312.128 99.7822  c
311.815 100.467 311.307 101.193 310.605 101.959  c
309.551 103.110 308.893 103.804 308.631 104.041  c
310.878 104.041 l
311.335 104.041 311.656 104.024 311.840 103.990  c
312.024 103.956 312.190 103.888 312.338 103.784  c
312.486 103.680 312.615 103.533 312.725 103.343  c
h
314.469 100.747 m
314.469 99.7653 314.617 98.9200 314.914 98.2111  c
315.210 97.5023 315.603 96.9744 316.094 96.6274  c
316.475 96.3523 316.869 96.2148 317.275 96.2148  c
317.935 96.2148 318.528 96.5512 319.052 97.2241  c
319.708 98.0577 320.036 99.1876 320.036 100.613  c
320.036 101.612 319.892 102.460 319.605 103.159  c
319.317 103.857 318.950 104.364 318.503 104.679  c
318.057 104.994 317.626 105.152 317.211 105.152  c
316.391 105.152 315.707 104.667 315.161 103.698  c
314.700 102.882 314.469 101.898 314.469 100.747  c
h
315.713 100.905 m
315.713 102.090 315.859 103.057 316.151 103.806  c
316.393 104.437 316.752 104.752 317.231 104.752  c
317.459 104.752 317.696 104.649 317.941 104.444  c
318.187 104.239 318.373 103.895 318.500 103.413  c
318.695 102.685 318.792 101.659 318.792 100.334  c
318.792 99.3527 318.690 98.5338 318.487 97.8779  c
318.335 97.3912 318.138 97.0463 317.897 96.8432  c
317.724 96.7036 317.514 96.6337 317.269 96.6337  c
316.981 96.6337 316.725 96.7628 316.501 97.0210  c
316.196 97.3722 315.988 97.9244 315.878 98.6777  c
315.768 99.4309 315.713 100.173 315.713 100.905  c
h
321.469 100.747 m
321.469 99.7653 321.617 98.9200 321.914 98.2111  c
322.210 97.5023 322.603 96.9744 323.094 96.6274  c
323.475 96.3523 323.869 96.2148 324.275 96.2148  c
324.935 96.2148 325.528 96.5512 326.052 97.2241  c
326.708 98.0577 327.036 99.1876 327.036 100.613  c
327.036 101.612 326.892 102.460 326.605 103.159  c
326.317 103.857 325.950 104.364 325.503 104.679  c
325.057 104.994 324.626 105.152 324.211 105.152  c
323.391 105.152 322.707 104.667 322.161 103.698  c
321.700 102.882 321.469 101.898 321.469 100.747  c
h
322.713 100.905 m
322.713 102.090 322.859 103.057 323.151 103.806  c
323.393 104.437 323.752 104.752 324.231 104.752  c
324.459 104.752 324.696 104.649 324.941 104.444  c
325.187 104.239 325.373 103.895 325.500 103.413  c
325.695 102.685 325.792 101.659 325.792 100.334  c
325.792 99.3527 325.690 98.5338 325.487 97.8779  c
325.335 97.3912 325.138 97.0463 324.897 96.8432  c
324.724 96.7036 324.514 96.6337 324.269 96.6337  c
323.981 96.6337 323.725 96.7628 323.501 97.0210  c
323.196 97.3722 322.988 97.9244 322.878 98.6777  c
322.768 99.4309 322.713 100.173 322.713 100.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
385.000 83.0000 m
385.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
385.960 103.343 m
385.357 105.000 l
380.279 105.000 l
380.279 104.765 l
381.773 103.402 382.824 102.289 383.434 101.426  c
384.043 100.563 384.348 99.7737 384.348 99.0585  c
384.348 98.5127 384.181 98.0641 383.846 97.7128  c
383.512 97.3616 383.112 97.1860 382.647 97.1860  c
382.223 97.1860 381.844 97.3098 381.507 97.5573  c
381.171 97.8049 380.922 98.1678 380.761 98.6460  c
380.526 98.6460 l
380.632 97.8631 380.904 97.2622 381.342 96.8432  c
381.780 96.4243 382.327 96.2148 382.983 96.2148  c
383.681 96.2148 384.264 96.4391 384.732 96.8877  c
385.199 97.3362 385.433 97.8652 385.433 98.4746  c
385.433 98.9104 385.332 99.3463 385.128 99.7822  c
384.815 100.467 384.307 101.193 383.605 101.959  c
382.551 103.110 381.893 103.804 381.631 104.041  c
383.878 104.041 l
384.335 104.041 384.656 104.024 384.840 103.990  c
385.024 103.956 385.190 103.888 385.338 103.784  c
385.486 103.680 385.615 103.533 385.725 103.343  c
h
392.643 96.3925 m
392.147 97.4716 l
389.558 97.4716 l
388.993 98.6269 l
390.114 98.7919 391.003 99.2088 391.659 99.8774  c
392.222 100.453 392.503 101.130 392.503 101.908  c
392.503 102.361 392.411 102.780 392.227 103.165  c
392.043 103.550 391.811 103.878 391.532 104.149  c
391.252 104.420 390.941 104.638 390.599 104.803  c
390.112 105.036 389.613 105.152 389.101 105.152  c
388.584 105.152 388.209 105.064 387.974 104.888  c
387.739 104.713 387.622 104.519 387.622 104.308  c
387.622 104.189 387.670 104.084 387.768 103.993  c
387.865 103.902 387.988 103.857 388.136 103.857  c
388.246 103.857 388.342 103.874 388.425 103.908  c
388.507 103.942 388.648 104.028 388.847 104.168  c
389.164 104.388 389.486 104.498 389.812 104.498  c
390.307 104.498 390.741 104.311 391.116 103.936  c
391.491 103.562 391.678 103.106 391.678 102.568  c
391.678 102.048 391.511 101.562 391.176 101.112  c
390.842 100.661 390.381 100.313 389.793 100.067  c
389.331 99.8774 388.703 99.7674 387.907 99.7377  c
389.558 96.3925 l
h
394.469 100.747 m
394.469 99.7653 394.617 98.9200 394.914 98.2111  c
395.210 97.5023 395.603 96.9744 396.094 96.6274  c
396.475 96.3523 396.869 96.2148 397.275 96.2148  c
397.935 96.2148 398.528 96.5512 399.052 97.2241  c
399.708 98.0577 400.036 99.1876 400.036 100.613  c
400.036 101.612 399.892 102.460 399.605 103.159  c
399.317 103.857 398.950 104.364 398.503 104.679  c
398.057 104.994 397.626 105.152 397.211 105.152  c
396.391 105.152 395.707 104.667 395.161 103.698  c
394.700 102.882 394.469 101.898 394.469 100.747  c
h
395.713 100.905 m
395.713 102.090 395.859 103.057 396.151 103.806  c
396.393 104.437 396.752 104.752 397.231 104.752  c
397.459 104.752 397.696 104.649 397.941 104.444  c
398.187 104.239 398.373 103.895 398.500 103.413  c
398.695 102.685 398.792 101.659 398.792 100.334  c
398.792 99.3527 398.690 98.5338 398.487 97.8779  c
398.335 97.3912 398.138 97.0463 397.897 96.8432  c
397.724 96.7036 397.514 96.6337 397.269 96.6337  c
396.981 96.6337 396.725 96.7628 396.501 97.0210  c
396.196 97.3722 395.988 97.9244 395.878 98.6777  c
395.768 99.4309 395.713 100.173 395.713 100.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
38.0000 83.0000 m
38.0000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
52.0000 83.0000 m
52.0000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 83.0000 m
67.0000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
81.0000 83.0000 m
81.0000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
110.000 83.0000 m
110.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
125.000 83.0000 m
125.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
139.000 83.0000 m
139.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
154.000 83.0000 m
154.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
183.000 83.0000 m
183.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
197.000 83.0000 m
197.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
212.000 83.0000 m
212.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
226.000 83.0000 m
226.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
255.000 83.0000 m
255.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
269.000 83.0000 m
269.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
284.000 83.0000 m
284.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
298.000 83.0000 m
298.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
327.000 83.0000 m
327.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
342.000 83.0000 m
342.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
356.000 83.0000 m
356.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
371.000 83.0000 m
371.000 85.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
22.0000 83.0000 m
22.0000 4.02531 l
S
Q
q
q
0 J
1 j
newpath
22.0000 65.0000 m
18.0000 65.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
6.66015 68.0302 m
6.90559 67.4505 7.21557 67.0030 7.59008 66.6877  c
7.96460 66.3724 8.43115 66.2148 8.98974 66.2148  c
9.67952 66.2148 10.2085 66.4391 10.5766 66.8877  c
10.8559 67.2220 10.9956 67.5795 10.9956 67.9604  c
10.9956 68.5867 10.6020 69.2342 9.81494 69.9028  c
10.3439 70.1101 10.7438 70.4064 11.0146 70.7915  c
11.2854 71.1766 11.4209 71.6293 11.4209 72.1499  c
11.4209 72.8946 11.1839 73.5400 10.7099 74.0859  c
10.0921 74.7968 9.19710 75.1523 8.02490 75.1523  c
7.44515 75.1523 7.05053 75.0804 6.84106 74.9365  c
6.63159 74.7926 6.52685 74.6381 6.52685 74.4731  c
6.52685 74.3504 6.57657 74.2425 6.67602 74.1494  c
6.77547 74.0563 6.89502 74.0097 7.03466 74.0097  c
7.14046 74.0097 7.24837 74.0266 7.35839 74.0605  c
7.43033 74.0817 7.59326 74.1589 7.84716 74.2922  c
8.10107 74.4255 8.27669 74.5048 8.37402 74.5302  c
8.53059 74.5768 8.69775 74.6001 8.87548 74.6001  c
9.30712 74.6001 9.68269 74.4329 10.0022 74.0986  c
10.3217 73.7643 10.4814 73.3686 10.4814 72.9116  c
10.4814 72.5773 10.4073 72.2514 10.2592 71.9340  c
10.1492 71.6971 10.0286 71.5172 9.89746 71.3945  c
9.71549 71.2252 9.46582 71.0718 9.14843 70.9343  c
8.83105 70.7967 8.50732 70.7280 8.17724 70.7280  c
7.97412 70.7280 l
7.97412 70.5376 l
8.30843 70.4952 8.64379 70.3746 8.98022 70.1757  c
9.31665 69.9768 9.56103 69.7377 9.71337 69.4585  c
9.86572 69.1792 9.94189 68.8724 9.94189 68.5380  c
9.94189 68.1022 9.80542 67.7499 9.53247 67.4812  c
9.25952 67.2124 8.91992 67.0781 8.51367 67.0781  c
7.85774 67.0781 7.30973 67.4293 6.86962 68.1318  c
h
13.4697 70.7470 m
13.4697 69.7653 13.6178 68.9200 13.9140 68.2111  c
14.2102 67.5023 14.6038 66.9744 15.0947 66.6274  c
15.4755 66.3523 15.8691 66.2148 16.2753 66.2148  c
16.9355 66.2148 17.5279 66.5512 18.0527 67.2241  c
18.7086 68.0577 19.0366 69.1876 19.0366 70.6137  c
19.0366 71.6124 18.8927 72.4609 18.6049 73.1591  c
18.3172 73.8574 17.9501 74.3641 17.5036 74.6794  c
17.0572 74.9947 16.6266 75.1523 16.2119 75.1523  c
15.3909 75.1523 14.7075 74.6678 14.1616 73.6987  c
13.7003 72.8820 13.4697 71.8981 13.4697 70.7470  c
h
14.7138 70.9057 m
14.7138 72.0906 14.8598 73.0576 15.1518 73.8066  c
15.3930 74.4371 15.7527 74.7524 16.2309 74.7524  c
16.4594 74.7524 16.6964 74.6498 16.9418 74.4445  c
17.1873 74.2393 17.3735 73.8955 17.5004 73.4130  c
17.6951 72.6852 17.7924 71.6590 17.7924 70.3344  c
17.7924 69.3527 17.6909 68.5338 17.4877 67.8779  c
17.3354 67.3912 17.1386 67.0463 16.8974 66.8432  c
16.7239 66.7036 16.5144 66.6337 16.2690 66.6337  c
15.9812 66.6337 15.7252 66.7628 15.5009 67.0210  c
15.1962 67.3722 14.9889 67.9244 14.8789 68.6777  c
14.7688 69.4309 14.7138 70.1736 14.7138 70.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 47.0000 m
18.0000 47.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
12.0493 52.8261 m
12.0493 53.7275 l
10.8940 53.7275 l
10.8940 56.0000 l
9.84668 56.0000 l
9.84668 53.7275 l
6.20312 53.7275 l
6.20312 52.9150 l
10.1958 47.2148 l
10.8940 47.2148 l
10.8940 52.8261 l
h
9.84668 52.8261 m
9.84668 48.5542 l
6.82519 52.8261 l
h
13.4697 51.7470 m
13.4697 50.7653 13.6178 49.9200 13.9140 49.2111  c
14.2102 48.5023 14.6038 47.9744 15.0947 47.6274  c
15.4755 47.3523 15.8691 47.2148 16.2753 47.2148  c
16.9355 47.2148 17.5279 47.5512 18.0527 48.2241  c
18.7086 49.0577 19.0366 50.1876 19.0366 51.6137  c
19.0366 52.6124 18.8927 53.4609 18.6049 54.1591  c
18.3172 54.8574 17.9501 55.3641 17.5036 55.6794  c
17.0572 55.9947 16.6266 56.1523 16.2119 56.1523  c
15.3909 56.1523 14.7075 55.6678 14.1616 54.6987  c
13.7003 53.8820 13.4697 52.8981 13.4697 51.7470  c
h
14.7138 51.9057 m
14.7138 53.0906 14.8598 54.0576 15.1518 54.8066  c
15.3930 55.4371 15.7527 55.7524 16.2309 55.7524  c
16.4594 55.7524 16.6964 55.6498 16.9418 55.4445  c
17.1873 55.2393 17.3735 54.8955 17.5004 54.4130  c
17.6951 53.6852 17.7924 52.6590 17.7924 51.3344  c
17.7924 50.3527 17.6909 49.5338 17.4877 48.8779  c
17.3354 48.3912 17.1386 48.0463 16.8974 47.8432  c
16.7239 47.7036 16.5144 47.6337 16.2690 47.6337  c
15.9812 47.6337 15.7252 47.7628 15.5009 48.0210  c
15.1962 48.3722 14.9889 48.9244 14.8789 49.6777  c
14.7688 50.4309 14.7138 51.1736 14.7138 51.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 29.0000 m
18.0000 29.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
11.6430 29.3925 m
11.1479 30.4716 l
8.55810 30.4716 l
7.99316 31.6269 l
9.11458 31.7919 10.0032 32.2088 10.6591 32.8774  c
11.2220 33.4529 11.5034 34.1300 11.5034 34.9086  c
11.5034 35.3614 11.4113 35.7804 11.2272 36.1655  c
11.0432 36.5506 10.8115 36.8785 10.5322 37.1494  c
10.2529 37.4202 9.94189 37.6381 9.59912 37.8032  c
9.11246 38.0359 8.61311 38.1523 8.10107 38.1523  c
7.58479 38.1523 7.20922 38.0645 6.97436 37.8889  c
6.73950 37.7133 6.62207 37.5196 6.62207 37.3081  c
6.62207 37.1896 6.67073 37.0848 6.76806 36.9939  c
6.86539 36.9029 6.98811 36.8574 7.13623 36.8574  c
7.24625 36.8574 7.34252 36.8743 7.42504 36.9082  c
7.50756 36.9420 7.64827 37.0288 7.84716 37.1684  c
8.16455 37.3885 8.48616 37.4985 8.81201 37.4985  c
9.30712 37.4985 9.74194 37.3112 10.1164 36.9367  c
10.4909 36.5622 10.6782 36.1062 10.6782 35.5688  c
10.6782 35.0483 10.5110 34.5627 10.1767 34.1120  c
9.84244 33.6613 9.38118 33.3133 8.79296 33.0678  c
8.33170 32.8774 7.70328 32.7674 6.90771 32.7377  c
8.55810 29.3925 l
h
13.4697 33.7470 m
13.4697 32.7653 13.6178 31.9200 13.9140 31.2111  c
14.2102 30.5023 14.6038 29.9744 15.0947 29.6274  c
15.4755 29.3523 15.8691 29.2148 16.2753 29.2148  c
16.9355 29.2148 17.5279 29.5512 18.0527 30.2241  c
18.7086 31.0577 19.0366 32.1876 19.0366 33.6137  c
19.0366 34.6124 18.8927 35.4609 18.6049 36.1591  c
18.3172 36.8574 17.9501 37.3641 17.5036 37.6794  c
17.0572 37.9947 16.6266 38.1523 16.2119 38.1523  c
15.3909 38.1523 14.7075 37.6678 14.1616 36.6987  c
13.7003 35.8820 13.4697 34.8981 13.4697 33.7470  c
h
14.7138 33.9057 m
14.7138 35.0906 14.8598 36.0576 15.1518 36.8066  c
15.3930 37.4371 15.7527 37.7524 16.2309 37.7524  c
16.4594 37.7524 16.6964 37.6498 16.9418 37.4445  c
17.1873 37.2393 17.3735 36.8955 17.5004 36.4130  c
17.6951 35.6852 17.7924 34.6590 17.7924 33.3344  c
17.7924 32.3527 17.6909 31.5338 17.4877 30.8779  c
17.3354 30.3912 17.1386 30.0463 16.8974 29.8432  c
16.7239 29.7036 16.5144 29.6337 16.2690 29.6337  c
15.9812 29.6337 15.7252 29.7628 15.5009 30.0210  c
15.1962 30.3722 14.9889 30.9244 14.8789 31.6777  c
14.7688 32.4309 14.7138 33.1736 14.7138 33.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 10.0000 m
18.0000 10.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
11.8271 11.2148 m
11.8271 11.4497 l
11.2685 11.5047 10.8125 11.6158 10.4592 11.7829  c
10.1058 11.9501 9.75675 12.2050 9.41186 12.5478  c
9.06697 12.8906 8.78133 13.2725 8.55493 13.6936  c
8.32853 14.1146 8.13916 14.6150 7.98681 15.1948  c
8.59619 14.7758 9.20768 14.5664 9.82128 14.5664  c
10.4095 14.5664 10.9194 14.8033 11.3510 15.2773  c
11.7827 15.7513 11.9985 16.3606 11.9985 17.1054  c
11.9985 17.8248 11.7806 18.4807 11.3447 19.0732  c
10.8199 19.7926 10.1259 20.1523 9.26269 20.1523  c
8.67447 20.1523 8.17513 19.9576 7.76464 19.5683  c
6.96061 18.8108 6.55859 17.8291 6.55859 16.6230  c
6.55859 15.8528 6.71305 15.1207 7.02197 14.4267  c
7.33089 13.7327 7.77205 13.1170 8.34545 12.5795  c
8.91886 12.0421 9.46793 11.6803 9.99267 11.4941  c
10.5174 11.3079 11.0061 11.2148 11.4589 11.2148  c
h
7.87890 15.6582 m
7.80273 16.2294 7.76464 16.6907 7.76464 17.0419  c
7.76464 17.4482 7.83976 17.8894 7.98999 18.3654  c
8.14021 18.8415 8.36344 19.2192 8.65966 19.4985  c
8.87548 19.6974 9.13785 19.7968 9.44677 19.7968  c
9.81494 19.7968 10.1439 19.6233 10.4338 19.2763  c
10.7237 18.9293 10.8686 18.4342 10.8686 17.7910  c
10.8686 17.0673 10.7247 16.4410 10.4370 15.9121  c
10.1492 15.3831 9.74088 15.1186 9.21191 15.1186  c
9.05110 15.1186 8.87866 15.1525 8.69458 15.2202  c
8.51049 15.2879 8.23860 15.4339 7.87890 15.6582  c
h
13.4697 15.7470 m
13.4697 14.7653 13.6178 13.9200 13.9140 13.2111  c
14.2102 12.5023 14.6038 11.9744 15.0947 11.6274  c
15.4755 11.3523 15.8691 11.2148 16.2753 11.2148  c
16.9355 11.2148 17.5279 11.5512 18.0527 12.2241  c
18.7086 13.0577 19.0366 14.1876 19.0366 15.6137  c
19.0366 16.6124 18.8927 17.4609 18.6049 18.1591  c
18.3172 18.8574 17.9501 19.3641 17.5036 19.6794  c
17.0572 19.9947 16.6266 20.1523 16.2119 20.1523  c
15.3909 20.1523 14.7075 19.6678 14.1616 18.6987  c
13.7003 17.8820 13.4697 16.8981 13.4697 15.7470  c
h
14.7138 15.9057 m
14.7138 17.0906 14.8598 18.0576 15.1518 18.8066  c
15.3930 19.4371 15.7527 19.7524 16.2309 19.7524  c
16.4594 19.7524 16.6964 19.6498 16.9418 19.4445  c
17.1873 19.2393 17.3735 18.8955 17.5004 18.4130  c
17.6951 17.6852 17.7924 16.6590 17.7924 15.3344  c
17.7924 14.3527 17.6909 13.5338 17.4877 12.8779  c
17.3354 12.3912 17.1386 12.0463 16.8974 11.8432  c
16.7239 11.7036 16.5144 11.6337 16.2690 11.6337  c
15.9812 11.6337 15.7252 11.7628 15.5009 12.0210  c
15.1962 12.3722 14.9889 12.9244 14.8789 13.6777  c
14.7688 14.4309 14.7138 15.1736 14.7138 15.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 74.0000 m
20.0000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 56.0000 m
20.0000 56.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 38.0000 m
20.0000 38.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 19.0000 m
20.0000 19.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 408 115 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
