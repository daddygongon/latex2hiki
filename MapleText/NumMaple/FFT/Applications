Fast Fourier Transformation(FFT)高速フーリエ変換(あるいはデジタル(離散)フーリエ変換(DFT))は，周波数分解やフィルターを初め，画像処理などの多くの分野で使われている．基本となる考え方は，直交基底による関数の内挿法である．最初にその応用例を見た後，どのような理屈でFFTが動いているかを解説する．


!!!周波数分解 
はじめの例は，周波数分解．先ずは，非整合な波を二つ用意しておく．
<<<maple
> restart:
  funcs:=[sin(i/13),sin(i/2)];
  #funcs:=[sin(i*2),2*sin(i/2)];
  plot(funcs,i=0..300);
>>>
||{{attach_view(C10_FFTplot2d1.png,FFT)}}||
これを重ねあわせた波を作る．
<<<maple
> data1:=[]:
  for i from 1 to 256 do
    data1:=[op(data1),evalf(funcs[1]+funcs[2]))]; 
  end do:
  with(plots): 
  listplot(data1);
>>>
||{{attach_view(C10_FFTplot2d2.png,FFT)}}||
ゆっくり変化する波に，激しく変化する波が重なっていることが読み取れる．これにFFTを掛ける
<<<maple
> X:=array(data1): 
  Y:=array(1..256,sparse):
  FFT(8,X,Y);
>>>
{{dmath ' 256
 '}}
その強さを求めて，周波数で表示すると，
<<<maple
> Data2:=[seq([i,sqrt(X[i]^2+Y[i]^2)],i=1..128)]:
  plot(Data2);
>>>
||{{attach_view(C10_FFTplot2d3.png,FFT)}}||
もとの2つの周波数に対応するところにピークができているのが確認できる．広がりは，誤差のせい．
logplotでも良い．


!!!高周波フィルター 
次の例は，高周波フィルター．たとえば次のようなローレンツ関数を考える．
<<<maple
> restart;
  f1:=t->subs(a=10,b=40000,c=380,d=128,a+b/(c+(t-d)^2));
>>>
{{dmath ' {\it f1}\, := \,t\mapsto 10+ \frac{40000}{380+ \left( t-128 \right) ^{2} }
 '}}

<<<maple
> plot(f1(t),t=1..256);
>>>
||{{attach_view(C10_FFTplot2d4.png,FFT)}}||

これにノイズがのると，次のようになる．
<<<maple
> T:=[seq(f1(i)*(0.6+0.8*evalf(rand()/10^12)),i=1..256)]:
  #T:=[seq(evalf(rand()/10^12),i=1..256)]:  #これはホワイトノイズ
  #T:=[seq(f1(i),i=1..256)]: #これは元の関数そのまま
  with(plots):
  listplot(T);
>>>
||{{attach_view(C10_FFTplot2d5.png,FFT)}}||
これに高周波フィルターを掛けるとノイズが消えるが，その様子を示そう．先ずは，FFTを掛ける．
<<<maple
> Idata:=array([seq(0,i=1..256)]):
  Rdata:=convert(T,array):
  FFT(8,Rdata,Idata);
>>>
{{dmath ' 256
 '}}
これは次のような強度分布をもっている．
<<<maple
> Adata:=[seq([i,sqrt(Idata[i]^2+Rdata[i]^2)],i=1..128)]:
> logplot(Adata);
>>>
||{{attach_view(C10_FFTplot2d6.png,FFT)}}||
低周波の部分に，ゆっくりとした変化を表す成分が固まっている．次のような三角フィルターを用意する．これは，低周波ほど影響を大きくするフィルター．
<<<maple
> filter:=x->piecewise(x>=0 and x<=20,(1-x/20)): #三角フィルター
  #filter:=x->piecewise(x>=0 and x<=20,1); #方形フィルター
  plot(filter(x),x=0..40);
>>>
||{{attach_view(C10_FFTplot2d7.png,FFT)}}||
これとデータを各点で掛けあわせる事によって，フィルターを通したことになる．
<<<maple
> FRdata:=array([seq(Rdata[i]*filter(i),i=1..256)]):
> FIdata:=array([seq(Idata[i]*filter(i),i=1..256)]):
>>>
先ほどと同様に表示すると
<<<maple
> Bdata:=[seq([i,sqrt(FIdata[i]^2+FRdata[i]^2)],i=1..128)]:
> logplot(Adata);
>>>
||{{attach_view(C10_FFTplot3d6.png,FFT)}}||
{{math 'i=20'}}以上の領域がフィルターによってちょん切られていることが確認できる．これを逆フーリエ変換する．
<<<maple
> iFFT(8,FRdata,FIdata);
>>>
{{dmath ' 256
 '}}
これを表示すると，
<<<maple
> listplot(FRdata);
>>>
||{{attach_view(C10_FFTplot2d8.png,FFT)}}||
となる．ノイズが取り除かれているのが確認できる．元の関数に加えたホワイトノイズにFFTを掛ければ分かるが，全周波数域にわたって均質に広がった関数となる．これを三角フィルターなどで高周波成分をカットすることで，ノイズが取り除かれていくのが理解されよう．
