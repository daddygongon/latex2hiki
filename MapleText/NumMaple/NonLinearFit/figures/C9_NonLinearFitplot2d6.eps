%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 301 575 490
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ15“ú 18Žž29•ª28•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
302 102 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
302.000 0 l
302.000 102.000 l
0 102.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 292 92 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
30.0000 6.05596 259.993 51.9440 rc
newpath
31.0000 54.5710 m
67.7132 49.4026 l
104.426 33.8976 l
141.139 8.05596 l
177.853 33.8976 l
214.566 49.4026 l
251.279 54.5710 l
287.993 56.6991 l
S
cliprestore
newpath
0 0 m
0 92.0000 l
292.000 92.0000 l
292.000 0 l
h
W
Q
q
30.0000 6.05596 259.993 51.9440 rc
1.00000 0 0 RG
newpath
31.0000 54.2605 m
32.3511 54.1186 l
33.5268 53.9916 l
34.8489 53.8447 l
36.1798 53.6925 l
37.5044 53.5365 l
38.7324 53.3875 l
40.0040 53.2289 l
41.3191 53.0600 l
42.6299 52.8864 l
43.9783 52.7023 l
45.1659 52.5353 l
46.5029 52.3416 l
47.8454 52.1409 l
49.1391 51.9414 l
50.3140 51.7548 l
51.7110 51.5260 l
52.8944 51.3261 l
54.2711 51.0863 l
55.4896 50.8671 l
56.8265 50.6191 l
58.0996 50.3752 l
59.4279 50.1125 l
60.6478 49.8635 l
61.9635 49.5863 l
63.3302 49.2886 l
64.5199 49.0210 l
65.8048 48.7229 l
67.1322 48.4047 l
68.4309 48.0828 l
69.6874 47.7612 l
71.0825 47.3920 l
72.3361 47.0489 l
73.6745 46.6704 l
74.8874 46.3161 l
76.2134 45.9162 l
77.4610 45.5275 l
78.7651 45.1079 l
80.0402 44.6843 l
81.3750 44.2261 l
82.6606 43.7702 l
83.9753 43.2889 l
85.2792 42.7960 l
86.4772 42.3292 l
87.8504 41.7775 l
89.0786 41.2687 l
90.3880 40.7100 l
91.6414 40.1594 l
93.0330 39.5297 l
94.2381 38.9688 l
95.6059 38.3145 l
96.8524 37.7020 l
98.2160 37.0144 l
99.3925 36.4066 l
100.732 35.6984 l
102.026 34.9988 l
103.320 34.2849 l
104.608 33.5598 l
105.847 32.8513 l
107.185 32.0734 l
108.460 31.3217 l
109.803 30.5216 l
111.018 29.7910 l
112.361 28.9788 l
114.931 27.4204 l
116.271 26.6111 l
117.506 25.8717 l
118.770 25.1236 l
120.166 24.3123 l
121.430 23.5951 l
122.723 22.8827 l
124.037 22.1842 l
125.246 21.5691 l
126.534 20.9461 l
127.812 20.3651 l
129.179 19.7896 l
130.386 19.3248 l
131.778 18.8433 l
133.035 18.4626 l
134.278 18.1394 l
135.614 17.8540 l
136.956 17.6350 l
138.178 17.4963 l
139.474 17.4136 l
140.107 17.3975 l
140.740 17.3975 l
141.426 17.4157 l
142.112 17.4526 l
143.299 17.5606 l
144.662 17.7526 l
145.944 17.9978 l
147.213 18.3001 l
148.483 18.6595 l
149.779 19.0815 l
151.152 19.5861 l
152.411 20.0967 l
153.654 20.6420 l
154.983 21.2659 l
156.309 21.9262 l
157.499 22.5472 l
158.909 23.3125 l
160.088 23.9740 l
161.468 24.7677 l
162.784 25.5412 l
163.960 26.2417 l
165.282 27.0373 l
166.613 27.8431 l
167.938 28.6467 l
169.166 29.3907 l
170.437 30.1577 l
171.752 30.9450 l
173.063 31.7219 l
174.412 32.5108 l
175.599 33.1957 l
176.936 33.9543 l
178.279 34.7017 l
179.572 35.4073 l
180.747 36.0350 l
182.144 36.7646 l
183.328 37.3680 l
184.704 38.0527 l
185.923 38.6430 l
187.260 39.2736 l
188.533 39.8575 l
189.861 40.4494 l
191.081 40.9776 l
192.397 41.5309 l
193.763 42.0879 l
194.953 42.5583 l
196.238 43.0514 l
197.565 43.5449 l
198.864 44.0124 l
200.121 44.4507 l
201.516 44.9216 l
202.769 45.3309 l
204.108 45.7539 l
205.321 46.1251 l
206.647 46.5182 l
207.894 46.8761 l
209.198 47.2384 l
210.473 47.5813 l
211.808 47.9286 l
213.094 48.2521 l
214.409 48.5724 l
215.712 48.8796 l
216.910 49.1532 l
218.284 49.4569 l
219.512 49.7198 l
220.821 49.9914 l
222.075 50.2433 l
223.466 50.5139 l
224.671 50.7409 l
226.039 50.9906 l
227.286 51.2110 l
228.649 51.4445 l
229.826 51.6400 l
231.166 51.8560 l
232.460 52.0582 l
233.753 52.2541 l
235.042 52.4435 l
236.280 52.6201 l
237.619 52.8054 l
238.894 52.9767 l
240.236 53.1516 l
241.452 53.3054 l
242.795 53.4706 l
244.081 53.6241 l
245.364 53.7729 l
246.705 53.9238 l
247.939 54.0589 l
249.204 54.1935 l
250.600 54.3379 l
251.864 54.4648 l
253.156 54.5912 l
254.471 54.7161 l
255.679 54.8279 l
256.967 54.9440 l
258.246 55.0561 l
259.613 55.1728 l
260.820 55.2730 l
262.212 55.3857 l
263.468 55.4846 l
264.711 55.5800 l
266.048 55.6800 l
267.390 55.7777 l
268.611 55.8644 l
269.908 55.9541 l
271.174 56.0396 l
272.545 56.1299 l
273.732 56.2060 l
275.096 56.2914 l
276.377 56.3697 l
277.647 56.4454 l
278.917 56.5193 l
280.213 56.5929 l
281.586 56.6691 l
282.845 56.7372 l
284.088 56.8029 l
285.417 56.8715 l
286.743 56.9384 l
287.993 57.0000 l
S
cliprestore
newpath
0 0 m
0 92.0000 l
292.000 92.0000 l
292.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
28.0000 60.0000 m
287.993 60.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
152 77 14 15 rc
newpath
158.278 83.2553 m
158.486 83.4754 158.642 83.6954 158.748 83.9155  c
158.824 84.0678 158.949 84.4677 159.123 85.1152  c
159.681 84.2773 l
159.829 84.0742 160.009 83.8806 160.221 83.6965  c
160.432 83.5124 160.619 83.3865 160.779 83.3188  c
160.881 83.2765 160.993 83.2553 161.116 83.2553  c
161.298 83.2553 161.443 83.3040 161.551 83.4013  c
161.658 83.4987 161.712 83.6171 161.712 83.7568  c
161.712 83.9176 161.681 84.0276 161.617 84.0869  c
161.499 84.1927 161.363 84.2456 161.211 84.2456  c
161.122 84.2456 161.027 84.2265 160.925 84.1884  c
160.726 84.1207 160.593 84.0869 160.525 84.0869  c
160.424 84.0869 160.303 84.1461 160.164 84.2646  c
159.901 84.4847 159.588 84.9099 159.224 85.5405  c
159.745 87.7241 l
159.825 88.0584 159.893 88.2583 159.948 88.3239  c
160.003 88.3895 160.058 88.4223 160.113 88.4223  c
160.202 88.4223 160.305 88.3737 160.424 88.2763  c
160.657 88.0817 160.856 87.8278 161.021 87.5146  c
161.243 87.6289 l
160.976 88.1282 160.638 88.5429 160.227 88.8730  c
159.994 89.0592 159.798 89.1523 159.637 89.1523  c
159.400 89.1523 159.211 89.0190 159.072 88.7524  c
158.983 88.5874 158.799 87.8764 158.520 86.6196  c
157.859 87.7664 157.330 88.5048 156.933 88.8349  c
156.675 89.0465 156.425 89.1523 156.184 89.1523  c
156.014 89.1523 155.860 89.0909 155.720 88.9682  c
155.619 88.8751 155.568 88.7503 155.568 88.5937  c
155.568 88.4541 155.614 88.3377 155.708 88.2446  c
155.801 88.1515 155.915 88.1049 156.050 88.1049  c
156.186 88.1049 156.330 88.1726 156.482 88.3081  c
156.592 88.4054 156.677 88.4541 156.736 88.4541  c
156.787 88.4541 156.852 88.4202 156.933 88.3525  c
157.132 88.1917 157.402 87.8447 157.745 87.3115  c
158.088 86.7783 158.312 86.3932 158.418 86.1562  c
158.156 85.1279 158.014 84.5841 157.993 84.5249  c
157.895 84.2498 157.768 84.0551 157.612 83.9409  c
157.455 83.8266 157.225 83.7695 156.920 83.7695  c
156.823 83.7695 156.710 83.7737 156.584 83.7822  c
156.584 83.5537 l
h
f
Q
cliprestore
newpath
0 0 m
0 92.0000 l
292.000 92.0000 l
292.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
31.0000 60.0000 m
31.0000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
34.5234 70.2368 m
36.6181 69.2148 l
36.8276 69.2148 l
36.8276 76.4829 l
36.8276 76.9653 36.8477 77.2657 36.8879 77.3842  c
36.9281 77.5027 37.0117 77.5937 37.1386 77.6572  c
37.2656 77.7207 37.5237 77.7566 37.9130 77.7651  c
37.9130 78.0000 l
34.6757 78.0000 l
34.6757 77.7651 l
35.0820 77.7566 35.3444 77.7217 35.4628 77.6604  c
35.5813 77.5990 35.6639 77.5165 35.7104 77.4128  c
35.7570 77.3091 35.7802 76.9991 35.7802 76.4829  c
35.7802 71.8364 l
35.7802 71.2101 35.7591 70.8081 35.7168 70.6303  c
35.6871 70.4949 35.6332 70.3955 35.5549 70.3320  c
35.4766 70.2685 35.3824 70.2368 35.2724 70.2368  c
35.1158 70.2368 34.8979 70.3024 34.6186 70.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
68.0000 60.0000 m
68.0000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
74.9604 76.3432 m
74.3574 78.0000 l
69.2793 78.0000 l
69.2793 77.7651 l
70.7731 76.4025 71.8247 75.2895 72.4340 74.4262  c
73.0434 73.5629 73.3481 72.7737 73.3481 72.0585  c
73.3481 71.5127 73.1809 71.0641 72.8466 70.7128  c
72.5123 70.3616 72.1124 70.1860 71.6469 70.1860  c
71.2238 70.1860 70.8439 70.3098 70.5075 70.5573  c
70.1711 70.8049 69.9225 71.1678 69.7617 71.6460  c
69.5268 71.6460 l
69.6326 70.8631 69.9045 70.2622 70.3425 69.8432  c
70.7805 69.4243 71.3274 69.2148 71.9834 69.2148  c
72.6816 69.2148 73.2645 69.4391 73.7321 69.8877  c
74.1997 70.3362 74.4335 70.8652 74.4335 71.4746  c
74.4335 71.9104 74.3320 72.3463 74.1289 72.7822  c
73.8157 73.4677 73.3079 74.1935 72.6054 74.9594  c
71.5517 76.1105 70.8937 76.8045 70.6313 77.0415  c
72.8784 77.0415 l
73.3354 77.0415 73.6560 77.0245 73.8400 76.9907  c
74.0241 76.9568 74.1902 76.8881 74.3383 76.7844  c
74.4864 76.6807 74.6155 76.5336 74.7255 76.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
104.000 60.0000 m
104.000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
106.660 71.0302 m
106.905 70.4505 107.215 70.0030 107.590 69.6877  c
107.964 69.3724 108.431 69.2148 108.989 69.2148  c
109.679 69.2148 110.208 69.4391 110.576 69.8877  c
110.856 70.2220 110.995 70.5795 110.995 70.9604  c
110.995 71.5867 110.602 72.2342 109.814 72.9028  c
110.343 73.1101 110.743 73.4064 111.014 73.7915  c
111.285 74.1766 111.420 74.6293 111.420 75.1499  c
111.420 75.8946 111.183 76.5400 110.710 77.0859  c
110.092 77.7968 109.197 78.1523 108.024 78.1523  c
107.445 78.1523 107.050 78.0804 106.841 77.9365  c
106.631 77.7926 106.526 77.6381 106.526 77.4731  c
106.526 77.3504 106.576 77.2425 106.676 77.1494  c
106.775 77.0563 106.895 77.0097 107.034 77.0097  c
107.140 77.0097 107.248 77.0266 107.358 77.0605  c
107.430 77.0817 107.593 77.1589 107.847 77.2922  c
108.101 77.4255 108.276 77.5048 108.374 77.5302  c
108.530 77.5768 108.697 77.6001 108.875 77.6001  c
109.307 77.6001 109.682 77.4329 110.002 77.0986  c
110.321 76.7643 110.481 76.3686 110.481 75.9116  c
110.481 75.5773 110.407 75.2514 110.259 74.9340  c
110.149 74.6971 110.028 74.5172 109.897 74.3945  c
109.715 74.2252 109.465 74.0718 109.148 73.9343  c
108.831 73.7967 108.507 73.7280 108.177 73.7280  c
107.974 73.7280 l
107.974 73.5376 l
108.308 73.4952 108.643 73.3746 108.980 73.1757  c
109.316 72.9768 109.561 72.7377 109.713 72.4585  c
109.865 72.1792 109.941 71.8724 109.941 71.5380  c
109.941 71.1022 109.805 70.7499 109.532 70.4812  c
109.259 70.2124 108.919 70.0781 108.513 70.0781  c
107.857 70.0781 107.309 70.4293 106.869 71.1318  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
141.000 60.0000 m
141.000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
149.049 74.8261 m
149.049 75.7275 l
147.894 75.7275 l
147.894 78.0000 l
146.846 78.0000 l
146.846 75.7275 l
143.203 75.7275 l
143.203 74.9150 l
147.195 69.2148 l
147.894 69.2148 l
147.894 74.8261 l
h
146.846 74.8261 m
146.846 70.5542 l
143.825 74.8261 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
178.000 60.0000 m
178.000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
184.643 69.3925 m
184.147 70.4716 l
181.558 70.4716 l
180.993 71.6269 l
182.114 71.7919 183.003 72.2088 183.659 72.8774  c
184.222 73.4529 184.503 74.1300 184.503 74.9086  c
184.503 75.3614 184.411 75.7804 184.227 76.1655  c
184.043 76.5506 183.811 76.8785 183.532 77.1494  c
183.252 77.4202 182.941 77.6381 182.599 77.8032  c
182.112 78.0359 181.613 78.1523 181.101 78.1523  c
180.584 78.1523 180.209 78.0645 179.974 77.8889  c
179.739 77.7133 179.622 77.5196 179.622 77.3081  c
179.622 77.1896 179.670 77.0848 179.768 76.9939  c
179.865 76.9029 179.988 76.8574 180.136 76.8574  c
180.246 76.8574 180.342 76.8743 180.425 76.9082  c
180.507 76.9420 180.648 77.0288 180.847 77.1684  c
181.164 77.3885 181.486 77.4985 181.812 77.4985  c
182.307 77.4985 182.741 77.3112 183.116 76.9367  c
183.491 76.5622 183.678 76.1062 183.678 75.5688  c
183.678 75.0483 183.511 74.5627 183.176 74.1120  c
182.842 73.6613 182.381 73.3133 181.793 73.0678  c
181.331 72.8774 180.703 72.7674 179.907 72.7377  c
181.558 69.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
215.000 60.0000 m
215.000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
221.827 69.2148 m
221.827 69.4497 l
221.268 69.5047 220.812 69.6158 220.459 69.7829  c
220.105 69.9501 219.756 70.2050 219.411 70.5478  c
219.067 70.8906 218.781 71.2725 218.554 71.6936  c
218.328 72.1146 218.139 72.6150 217.986 73.1948  c
218.596 72.7758 219.207 72.5664 219.821 72.5664  c
220.409 72.5664 220.919 72.8033 221.351 73.2773  c
221.782 73.7513 221.998 74.3606 221.998 75.1054  c
221.998 75.8248 221.780 76.4807 221.344 77.0732  c
220.820 77.7926 220.126 78.1523 219.262 78.1523  c
218.674 78.1523 218.175 77.9576 217.764 77.5683  c
216.960 76.8108 216.558 75.8291 216.558 74.6230  c
216.558 73.8528 216.713 73.1207 217.022 72.4267  c
217.330 71.7327 217.772 71.1170 218.345 70.5795  c
218.918 70.0421 219.467 69.6803 219.992 69.4941  c
220.517 69.3079 221.006 69.2148 221.459 69.2148  c
h
217.878 73.6582 m
217.802 74.2294 217.764 74.6907 217.764 75.0419  c
217.764 75.4482 217.839 75.8894 217.990 76.3654  c
218.140 76.8415 218.363 77.2192 218.659 77.4985  c
218.875 77.6974 219.137 77.7968 219.446 77.7968  c
219.814 77.7968 220.144 77.6233 220.433 77.2763  c
220.723 76.9293 220.868 76.4342 220.868 75.7910  c
220.868 75.0673 220.724 74.4410 220.437 73.9121  c
220.149 73.3831 219.740 73.1186 219.211 73.1186  c
219.051 73.1186 218.878 73.1525 218.694 73.2202  c
218.510 73.2879 218.238 73.4339 217.878 73.6582  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
251.000 60.0000 m
251.000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
254.307 69.3925 m
258.922 69.3925 l
258.922 69.6337 l
256.053 78.1777 l
255.342 78.1777 l
257.913 70.4272 l
255.545 70.4272 l
255.067 70.4272 254.726 70.4843 254.523 70.5986  c
254.168 70.7932 253.882 71.0937 253.666 71.5000  c
253.482 71.4301 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
288.000 60.0000 m
288.000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
291.494 73.6645 m
290.813 73.1059 290.374 72.6573 290.177 72.3188  c
289.980 71.9803 289.882 71.6290 289.882 71.2651  c
289.882 70.7065 290.098 70.2251 290.529 69.8210  c
290.961 69.4169 291.534 69.2148 292.250 69.2148  c
292.944 69.2148 293.502 69.4031 293.925 69.7797  c
294.349 70.1564 294.560 70.5859 294.560 71.0683  c
294.560 71.3899 294.446 71.7179 294.217 72.0522  c
293.989 72.3865 293.513 72.7801 292.789 73.2329  c
293.534 73.8084 294.027 74.2612 294.268 74.5913  c
294.590 75.0229 294.751 75.4778 294.751 75.9560  c
294.751 76.5612 294.520 77.0785 294.059 77.5080  c
293.597 77.9375 292.992 78.1523 292.243 78.1523  c
291.426 78.1523 290.790 77.8963 290.333 77.3842  c
289.969 76.9738 289.787 76.5252 289.787 76.0385  c
289.787 75.6577 289.915 75.2800 290.171 74.9055  c
290.427 74.5310 290.868 74.1173 291.494 73.6645  c
h
292.491 72.9853 m
292.999 72.5283 293.320 72.1675 293.456 71.9030  c
293.591 71.6385 293.659 71.3391 293.659 71.0048  c
293.659 70.5605 293.534 70.2124 293.284 69.9606  c
293.035 69.7089 292.694 69.5830 292.262 69.5830  c
291.831 69.5830 291.479 69.7078 291.209 69.9575  c
290.938 70.2071 290.802 70.4991 290.802 70.8335  c
290.802 71.0535 290.858 71.2736 290.970 71.4936  c
291.083 71.7137 291.242 71.9231 291.450 72.1220  c
h
291.793 73.9057 m
291.441 74.2019 291.181 74.5246 291.012 74.8737  c
290.842 75.2229 290.758 75.6005 290.758 76.0068  c
290.758 76.5527 290.907 76.9896 291.205 77.3176  c
291.504 77.6455 291.884 77.8095 292.345 77.8095  c
292.802 77.8095 293.168 77.6805 293.443 77.4223  c
293.718 77.1642 293.856 76.8510 293.856 76.4829  c
293.856 76.1782 293.775 75.9052 293.614 75.6640  c
293.314 75.2154 292.707 74.6293 291.793 73.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
49.0000 60.0000 m
49.0000 62.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
86.0000 60.0000 m
86.0000 62.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
123.000 60.0000 m
123.000 62.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
159.000 60.0000 m
159.000 62.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
196.000 60.0000 m
196.000 62.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
233.000 60.0000 m
233.000 62.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
270.000 60.0000 m
270.000 62.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
28.0000 60.0000 m
28.0000 8.05596 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 25 8 15 rc
Q
cliprestore
newpath
0 0 m
0 92.0000 l
292.000 92.0000 l
292.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
28.0000 55.0000 m
25.0000 55.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
29.9604 62.3432 m
29.3574 64.0000 l
24.2793 64.0000 l
24.2793 63.7651 l
25.7731 62.4025 26.8247 61.2895 27.4340 60.4262  c
28.0434 59.5629 28.3481 58.7737 28.3481 58.0585  c
28.3481 57.5127 28.1809 57.0641 27.8466 56.7128  c
27.5123 56.3616 27.1124 56.1860 26.6469 56.1860  c
26.2238 56.1860 25.8439 56.3098 25.5075 56.5573  c
25.1711 56.8049 24.9225 57.1678 24.7617 57.6460  c
24.5268 57.6460 l
24.6326 56.8631 24.9045 56.2622 25.3425 55.8432  c
25.7805 55.4243 26.3274 55.2148 26.9834 55.2148  c
27.6816 55.2148 28.2645 55.4391 28.7321 55.8877  c
29.1997 56.3362 29.4335 56.8652 29.4335 57.4746  c
29.4335 57.9104 29.3320 58.3463 29.1289 58.7822  c
28.8157 59.4677 28.3079 60.1935 27.6054 60.9594  c
26.5517 62.1105 25.8937 62.8045 25.6313 63.0415  c
27.8784 63.0415 l
28.3354 63.0415 28.6560 63.0245 28.8400 62.9907  c
29.0241 62.9568 29.1902 62.8881 29.3383 62.7844  c
29.4864 62.6807 29.6155 62.5336 29.7255 62.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 49.0000 m
25.0000 49.0000 l
S
Q
q
0 J
1 j
newpath
28.0000 44.0000 m
25.0000 44.0000 l
S
Q
q
0 J
1 j
newpath
28.0000 39.0000 m
25.0000 39.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
29.6430 40.3925 m
29.1479 41.4716 l
26.5581 41.4716 l
25.9931 42.6269 l
27.1145 42.7919 28.0032 43.2088 28.6591 43.8774  c
29.2220 44.4529 29.5034 45.1300 29.5034 45.9086  c
29.5034 46.3614 29.4113 46.7804 29.2272 47.1655  c
29.0432 47.5506 28.8115 47.8785 28.5322 48.1494  c
28.2529 48.4202 27.9418 48.6381 27.5991 48.8032  c
27.1124 49.0359 26.6131 49.1523 26.1010 49.1523  c
25.5848 49.1523 25.2092 49.0645 24.9743 48.8889  c
24.7395 48.7133 24.6220 48.5196 24.6220 48.3081  c
24.6220 48.1896 24.6707 48.0848 24.7680 47.9939  c
24.8654 47.9029 24.9881 47.8574 25.1362 47.8574  c
25.2462 47.8574 25.3425 47.8743 25.4250 47.9082  c
25.5075 47.9420 25.6482 48.0288 25.8471 48.1684  c
26.1645 48.3885 26.4861 48.4985 26.8120 48.4985  c
27.3071 48.4985 27.7419 48.3112 28.1164 47.9367  c
28.4909 47.5622 28.6782 47.1062 28.6782 46.5688  c
28.6782 46.0483 28.5110 45.5627 28.1767 45.1120  c
27.8424 44.6613 27.3811 44.3133 26.7929 44.0678  c
26.3317 43.8774 25.7032 43.7674 24.9077 43.7377  c
26.5581 40.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 34.0000 m
25.0000 34.0000 l
S
Q
q
0 J
1 j
newpath
28.0000 29.0000 m
25.0000 29.0000 l
S
Q
q
0 J
1 j
newpath
28.0000 24.0000 m
25.0000 24.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
26.4946 28.6645 m
25.8133 28.1059 25.3742 27.6573 25.1774 27.3188  c
24.9807 26.9803 24.8823 26.6290 24.8823 26.2651  c
24.8823 25.7065 25.0981 25.2251 25.5297 24.8210  c
25.9614 24.4169 26.5348 24.2148 27.2500 24.2148  c
27.9440 24.2148 28.5026 24.4031 28.9257 24.7797  c
29.3489 25.1564 29.5605 25.5859 29.5605 26.0683  c
29.5605 26.3899 29.4462 26.7179 29.2177 27.0522  c
28.9892 27.3865 28.5131 27.7801 27.7895 28.2329  c
28.5343 28.8084 29.0273 29.2612 29.2685 29.5913  c
29.5901 30.0229 29.7509 30.4778 29.7509 30.9560  c
29.7509 31.5612 29.5203 32.0785 29.0590 32.5080  c
28.5978 32.9375 27.9926 33.1523 27.2436 33.1523  c
26.4269 33.1523 25.7900 32.8963 25.3330 32.3842  c
24.9690 31.9738 24.7871 31.5252 24.7871 31.0385  c
24.7871 30.6577 24.9151 30.2800 25.1711 29.9055  c
25.4271 29.5310 25.8683 29.1173 26.4946 28.6645  c
h
27.4912 27.9853 m
27.9990 27.5283 28.3206 27.1675 28.4560 26.9030  c
28.5914 26.6385 28.6591 26.3391 28.6591 26.0048  c
28.6591 25.5605 28.5343 25.2124 28.2846 24.9606  c
28.0349 24.7089 27.6943 24.5830 27.2627 24.5830  c
26.8310 24.5830 26.4798 24.7078 26.2089 24.9575  c
25.9381 25.2071 25.8027 25.4991 25.8027 25.8335  c
25.8027 26.0535 25.8588 26.2736 25.9709 26.4936  c
26.0830 26.7137 26.2428 26.9231 26.4502 27.1220  c
h
26.7929 28.9057 m
26.4417 29.2019 26.1814 29.5246 26.0122 29.8737  c
25.8429 30.2229 25.7583 30.6005 25.7583 31.0068  c
25.7583 31.5527 25.9074 31.9896 26.2058 32.3176  c
26.5041 32.6455 26.8839 32.8095 27.3452 32.8095  c
27.8022 32.8095 28.1682 32.6805 28.4433 32.4223  c
28.7184 32.1642 28.8559 31.8510 28.8559 31.4829  c
28.8559 31.1782 28.7755 30.9052 28.6147 30.6640  c
28.3142 30.2154 27.7070 29.6293 26.7929 28.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 18.0000 m
25.0000 18.0000 l
S
Q
q
0 J
1 j
newpath
28.0000 13.0000 m
25.0000 13.0000 l
S
Q
q
0 J
1 j
newpath
28.0000 8.00000 m
25.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.5234 10.2368 m
20.6181 9.21484 l
20.8276 9.21484 l
20.8276 16.4829 l
20.8276 16.9653 20.8477 17.2657 20.8879 17.3842  c
20.9281 17.5027 21.0117 17.5937 21.1386 17.6572  c
21.2656 17.7207 21.5237 17.7566 21.9130 17.7651  c
21.9130 18.0000 l
18.6757 18.0000 l
18.6757 17.7651 l
19.0820 17.7566 19.3444 17.7217 19.4628 17.6604  c
19.5813 17.5990 19.6639 17.5165 19.7104 17.4128  c
19.7570 17.3091 19.7802 16.9991 19.7802 16.4829  c
19.7802 11.8364 l
19.7802 11.2101 19.7591 10.8081 19.7168 10.6303  c
19.6871 10.4949 19.6332 10.3955 19.5549 10.3320  c
19.4766 10.2685 19.3824 10.2368 19.2724 10.2368  c
19.1158 10.2368 18.8979 10.3024 18.6186 10.4335  c
h
25.5234 10.2368 m
27.6181 9.21484 l
27.8276 9.21484 l
27.8276 16.4829 l
27.8276 16.9653 27.8477 17.2657 27.8879 17.3842  c
27.9281 17.5027 28.0117 17.5937 28.1386 17.6572  c
28.2656 17.7207 28.5237 17.7566 28.9130 17.7651  c
28.9130 18.0000 l
25.6757 18.0000 l
25.6757 17.7651 l
26.0820 17.7566 26.3444 17.7217 26.4628 17.6604  c
26.5813 17.5990 26.6639 17.5165 26.7104 17.4128  c
26.7570 17.3091 26.7802 16.9991 26.7802 16.4829  c
26.7802 11.8364 l
26.7802 11.2101 26.7591 10.8081 26.7168 10.6303  c
26.6871 10.4949 26.6332 10.3955 26.5549 10.3320  c
26.4766 10.2685 26.3824 10.2368 26.2724 10.2368  c
26.1158 10.2368 25.8979 10.3024 25.6186 10.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 52.0000 m
26.0000 52.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 47.0000 m
26.0000 47.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 42.0000 m
26.0000 42.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 36.0000 m
26.0000 36.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 31.0000 m
26.0000 31.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 26.0000 m
26.0000 26.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 21.0000 m
26.0000 21.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 16.0000 m
26.0000 16.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
28.0000 11.0000 m
26.0000 11.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 302 102 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
