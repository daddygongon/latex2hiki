%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 173 575 618
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ3“ú 20Žž35•ª02•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
228 182 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
228.000 0 l
228.000 182.000 l
0 182.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 218 172 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
8.00000 -1.00000 207.488 157.692 rc
1.00000 0 0 RG
newpath
9.00000 100.004 m
10.0751 101.554 l
11.0105 102.886 l
12.0625 104.363 l
13.1215 105.829 l
14.1755 107.267 l
15.1526 108.582 l
16.1644 109.924 l
17.2108 111.291 l
18.2538 112.634 l
19.3267 113.993 l
20.2717 115.172 l
21.3356 116.480 l
22.4038 117.771 l
23.4332 118.995 l
24.3680 120.089 l
25.4796 121.368 l
26.4213 122.433 l
27.5166 123.651 l
28.4862 124.711 l
29.5500 125.853 l
30.5630 126.920 l
31.6199 128.013 l
32.5906 128.998 l
33.6375 130.040 l
34.7249 131.101 l
35.6716 132.006 l
36.6940 132.965 l
37.7502 133.934 l
38.7835 134.862 l
39.7833 135.741 l
40.8934 136.694 l
41.8909 137.531 l
42.9559 138.404 l
43.9210 139.176 l
44.9760 140.000 l
45.9688 140.756 l
47.0064 141.527 l
48.0210 142.260 l
49.0831 143.007 l
50.1061 143.706 l
51.1522 144.401 l
52.1896 145.069 l
53.1429 145.666 l
54.2355 146.328 l
55.2128 146.901 l
56.2547 147.492 l
57.2520 148.038 l
58.3593 148.623 l
59.3182 149.110 l
60.4065 149.643 l
61.3984 150.108 l
62.4834 150.596 l
63.4196 150.999 l
64.4857 151.438 l
65.5156 151.842 l
66.5448 152.225 l
67.5702 152.586 l
68.5553 152.915 l
69.6202 153.250 l
70.6351 153.549 l
71.7033 153.843 l
72.6703 154.090 l
73.7389 154.342 l
74.7625 154.564 l
75.7836 154.765 l
76.8502 154.955 l
77.8325 155.110 l
78.8386 155.250 l
79.9493 155.382 l
80.9551 155.482 l
81.9836 155.564 l
83.0296 155.627 l
83.9911 155.666 l
85.0160 155.689 l
86.0331 155.692 l
87.1211 155.674 l
88.0812 155.639 l
89.1890 155.577 l
90.1886 155.501 l
91.1778 155.408 l
92.2414 155.286 l
93.3093 155.143 l
94.2809 154.993 l
95.3128 154.815 l
96.3198 154.622 l
97.4114 154.391 l
98.3559 154.172 l
99.4407 153.901 l
100.460 153.625 l
101.470 153.333 l
102.481 153.021 l
103.512 152.683 l
104.604 152.303 l
105.606 151.934 l
106.595 151.552 l
107.653 151.122 l
108.708 150.673 l
109.654 150.251 l
110.776 149.730 l
111.715 149.276 l
112.812 148.723 l
113.860 148.174 l
114.795 147.667 l
115.847 147.076 l
116.906 146.460 l
117.960 145.826 l
118.938 145.220 l
119.949 144.573 l
120.996 143.883 l
122.039 143.175 l
123.112 142.426 l
124.057 141.747 l
125.121 140.963 l
126.189 140.155 l
127.218 139.355 l
128.153 138.611 l
129.265 137.705 l
130.206 136.919 l
131.302 135.984 l
132.271 135.138 l
133.335 134.188 l
134.348 133.264 l
135.405 132.279 l
136.375 131.356 l
137.422 130.341 l
138.510 129.264 l
139.457 128.308 l
140.479 127.257 l
141.535 126.150 l
142.568 125.047 l
143.568 123.960 l
144.678 122.731 l
145.676 121.607 l
146.741 120.386 l
147.706 119.261 l
148.761 118.011 l
149.754 116.816 l
150.791 115.546 l
151.806 114.285 l
152.868 112.944 l
153.891 111.633 l
154.937 110.271 l
155.975 108.900 l
156.928 107.622 l
158.020 106.136 l
158.998 104.788 l
160.040 103.331 l
161.037 101.917 l
162.144 100.325 l
163.103 98.9276 l
164.191 97.3204 l
165.183 95.8361 l
166.268 94.1911 l
167.205 92.7539 l
168.271 91.0968 l
169.301 89.4757 l
170.330 87.8356 l
171.355 86.1816 l
172.340 84.5739 l
173.405 82.8152 l
174.420 81.1190 l
175.488 79.3128 l
176.455 77.6592 l
177.524 75.8109 l
178.547 74.0204 l
179.569 72.2144 l
180.635 70.3070 l
181.617 68.5311 l
182.623 66.6934 l
183.734 64.6421 l
184.740 62.7647 l
185.769 60.8248 l
186.815 58.8315 l
187.776 56.9810 l
188.801 54.9891 l
189.818 52.9927 l
190.906 50.8355 l
191.866 48.9132 l
192.974 46.6736 l
193.974 44.6326 l
194.963 42.5945 l
196.026 40.3822 l
197.094 38.1394 l
198.066 36.0800 l
199.098 33.8734 l
200.105 31.7006 l
201.196 29.3235 l
202.141 27.2485 l
203.226 24.8444 l
204.245 22.5641 l
205.255 20.2864 l
206.266 17.9875 l
207.297 15.6229 l
208.390 13.0945 l
209.392 10.7563 l
210.381 8.42958 l
211.438 5.92182 l
212.493 3.39843 l
213.488 1.00000 l
S
cliprestore
newpath
0 0 m
0 172.000 l
218.000 172.000 l
218.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
9.00000 137.000 m
213.488 137.000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
118 157 13 15 rc
newpath
123.091 163.407 m
127.122 163.407 l
127.122 163.566 l
122.730 168.136 l
124.589 168.136 l
125.029 168.136 125.309 168.119 125.427 168.085  c
125.546 168.052 125.655 167.980 125.754 167.870  c
125.854 167.760 125.965 167.561 126.087 167.273  c
126.322 167.273 l
125.770 169.000 l
121.638 169.000 l
121.638 168.815 l
126.030 164.245 l
124.202 164.245 l
123.817 164.245 123.584 164.256 123.504 164.277  c
123.385 164.302 123.268 164.369 123.152 164.477  c
123.035 164.585 122.916 164.764 122.793 165.013  c
122.552 165.013 l
h
f
Q
cliprestore
newpath
0 0 m
0 172.000 l
218.000 172.000 l
218.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
9.00000 137.000 m
9.00000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 147 7 13 rc
newpath
16.7900 154.438 m
8.21000 154.438 l
8.21000 153.762 l
16.7900 153.762 l
h
f
Q
newpath
16.5234 150.236 m
18.6181 149.214 l
18.8276 149.214 l
18.8276 156.482 l
18.8276 156.965 18.8477 157.265 18.8879 157.384  c
18.9281 157.502 19.0117 157.593 19.1386 157.657  c
19.2656 157.720 19.5237 157.756 19.9130 157.765  c
19.9130 158.000 l
16.6757 158.000 l
16.6757 157.765 l
17.0820 157.756 17.3444 157.721 17.4628 157.660  c
17.5813 157.599 17.6639 157.516 17.7104 157.412  c
17.7570 157.309 17.7802 156.999 17.7802 156.482  c
17.7802 151.836 l
17.7802 151.210 17.7591 150.808 17.7168 150.630  c
17.6871 150.495 17.6332 150.395 17.5549 150.332  c
17.4766 150.268 17.3824 150.236 17.2724 150.236  c
17.1158 150.236 16.8979 150.302 16.6186 150.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 137.000 m
35.0000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
31.4697 152.747 m
31.4697 151.765 31.6178 150.920 31.9140 150.211  c
32.2102 149.502 32.6038 148.974 33.0947 148.627  c
33.4755 148.352 33.8691 148.214 34.2753 148.214  c
34.9355 148.214 35.5279 148.551 36.0527 149.224  c
36.7086 150.057 37.0366 151.187 37.0366 152.613  c
37.0366 153.612 36.8927 154.460 36.6049 155.159  c
36.3172 155.857 35.9501 156.364 35.5036 156.679  c
35.0572 156.994 34.6266 157.152 34.2119 157.152  c
33.3909 157.152 32.7075 156.667 32.1616 155.698  c
31.7003 154.882 31.4697 153.898 31.4697 152.747  c
h
32.7138 152.905 m
32.7138 154.090 32.8598 155.057 33.1518 155.806  c
33.3930 156.437 33.7527 156.752 34.2309 156.752  c
34.4594 156.752 34.6964 156.649 34.9418 156.444  c
35.1873 156.239 35.3735 155.895 35.5004 155.413  c
35.6951 154.685 35.7924 153.659 35.7924 152.334  c
35.7924 151.352 35.6909 150.533 35.4877 149.877  c
35.3354 149.391 35.1386 149.046 34.8974 148.843  c
34.7239 148.703 34.5144 148.633 34.2690 148.633  c
33.9812 148.633 33.7252 148.762 33.5009 149.021  c
33.1962 149.372 32.9889 149.924 32.8789 150.677  c
32.7688 151.431 32.7138 152.173 32.7138 152.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
60.0000 137.000 m
60.0000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
63.5234 150.236 m
65.6181 149.214 l
65.8276 149.214 l
65.8276 156.482 l
65.8276 156.965 65.8477 157.265 65.8879 157.384  c
65.9281 157.502 66.0117 157.593 66.1386 157.657  c
66.2656 157.720 66.5237 157.756 66.9130 157.765  c
66.9130 158.000 l
63.6757 158.000 l
63.6757 157.765 l
64.0820 157.756 64.3444 157.721 64.4628 157.660  c
64.5813 157.599 64.6639 157.516 64.7104 157.412  c
64.7570 157.309 64.7802 156.999 64.7802 156.482  c
64.7802 151.836 l
64.7802 151.210 64.7591 150.808 64.7168 150.630  c
64.6871 150.495 64.6332 150.395 64.5549 150.332  c
64.4766 150.268 64.3824 150.236 64.2724 150.236  c
64.1158 150.236 63.8979 150.302 63.6186 150.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
86.0000 137.000 m
86.0000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
92.9604 156.343 m
92.3574 158.000 l
87.2793 158.000 l
87.2793 157.765 l
88.7731 156.402 89.8247 155.289 90.4340 154.426  c
91.0434 153.563 91.3481 152.773 91.3481 152.058  c
91.3481 151.512 91.1809 151.064 90.8466 150.712  c
90.5123 150.361 90.1124 150.186 89.6469 150.186  c
89.2238 150.186 88.8439 150.309 88.5075 150.557  c
88.1711 150.804 87.9225 151.167 87.7617 151.646  c
87.5268 151.646 l
87.6326 150.863 87.9045 150.262 88.3425 149.843  c
88.7805 149.424 89.3274 149.214 89.9834 149.214  c
90.6816 149.214 91.2645 149.439 91.7321 149.887  c
92.1997 150.336 92.4335 150.865 92.4335 151.474  c
92.4335 151.910 92.3320 152.346 92.1289 152.782  c
91.8157 153.467 91.3079 154.193 90.6054 154.959  c
89.5517 156.110 88.8937 156.804 88.6313 157.041  c
90.8784 157.041 l
91.3354 157.041 91.6560 157.024 91.8400 156.990  c
92.0241 156.956 92.1902 156.888 92.3383 156.784  c
92.4864 156.680 92.6155 156.533 92.7255 156.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
111.000 137.000 m
111.000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
113.660 151.030 m
113.905 150.450 114.215 150.003 114.590 149.687  c
114.964 149.372 115.431 149.214 115.989 149.214  c
116.679 149.214 117.208 149.439 117.576 149.887  c
117.856 150.222 117.995 150.579 117.995 150.960  c
117.995 151.586 117.602 152.234 116.814 152.902  c
117.343 153.110 117.743 153.406 118.014 153.791  c
118.285 154.176 118.420 154.629 118.420 155.149  c
118.420 155.894 118.183 156.540 117.710 157.085  c
117.092 157.796 116.197 158.152 115.024 158.152  c
114.445 158.152 114.050 158.080 113.841 157.936  c
113.631 157.792 113.526 157.638 113.526 157.473  c
113.526 157.350 113.576 157.242 113.676 157.149  c
113.775 157.056 113.895 157.009 114.034 157.009  c
114.140 157.009 114.248 157.026 114.358 157.060  c
114.430 157.081 114.593 157.158 114.847 157.292  c
115.101 157.425 115.276 157.504 115.374 157.530  c
115.530 157.576 115.697 157.600 115.875 157.600  c
116.307 157.600 116.682 157.432 117.002 157.098  c
117.321 156.764 117.481 156.368 117.481 155.911  c
117.481 155.577 117.407 155.251 117.259 154.934  c
117.149 154.697 117.028 154.517 116.897 154.394  c
116.715 154.225 116.465 154.071 116.148 153.934  c
115.831 153.796 115.507 153.728 115.177 153.728  c
114.974 153.728 l
114.974 153.537 l
115.308 153.495 115.643 153.374 115.980 153.175  c
116.316 152.976 116.561 152.737 116.713 152.458  c
116.865 152.179 116.941 151.872 116.941 151.538  c
116.941 151.102 116.805 150.749 116.532 150.481  c
116.259 150.212 115.919 150.078 115.513 150.078  c
114.857 150.078 114.309 150.429 113.869 151.131  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
137.000 137.000 m
137.000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
144.049 154.826 m
144.049 155.727 l
142.894 155.727 l
142.894 158.000 l
141.846 158.000 l
141.846 155.727 l
138.203 155.727 l
138.203 154.915 l
142.195 149.214 l
142.894 149.214 l
142.894 154.826 l
h
141.846 154.826 m
141.846 150.554 l
138.825 154.826 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
162.000 137.000 m
162.000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
169.643 149.392 m
169.147 150.471 l
166.558 150.471 l
165.993 151.627 l
167.114 151.792 168.003 152.208 168.659 152.877  c
169.222 153.453 169.503 154.130 169.503 154.908  c
169.503 155.361 169.411 155.780 169.227 156.165  c
169.043 156.550 168.811 156.878 168.532 157.149  c
168.252 157.420 167.941 157.638 167.599 157.803  c
167.112 158.036 166.613 158.152 166.101 158.152  c
165.584 158.152 165.209 158.064 164.974 157.888  c
164.739 157.713 164.622 157.519 164.622 157.308  c
164.622 157.189 164.670 157.084 164.768 156.993  c
164.865 156.902 164.988 156.857 165.136 156.857  c
165.246 156.857 165.342 156.874 165.425 156.908  c
165.507 156.942 165.648 157.028 165.847 157.168  c
166.164 157.388 166.486 157.498 166.812 157.498  c
167.307 157.498 167.741 157.311 168.116 156.936  c
168.491 156.562 168.678 156.106 168.678 155.568  c
168.678 155.048 168.511 154.562 168.176 154.112  c
167.842 153.661 167.381 153.313 166.793 153.067  c
166.331 152.877 165.703 152.767 164.907 152.737  c
166.558 149.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
188.000 137.000 m
188.000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
194.827 149.214 m
194.827 149.449 l
194.268 149.504 193.812 149.615 193.459 149.783  c
193.105 149.950 192.756 150.205 192.411 150.547  c
192.067 150.890 191.781 151.272 191.554 151.693  c
191.328 152.114 191.139 152.615 190.986 153.194  c
191.596 152.775 192.207 152.566 192.821 152.566  c
193.409 152.566 193.919 152.803 194.351 153.277  c
194.782 153.751 194.998 154.360 194.998 155.105  c
194.998 155.824 194.780 156.480 194.344 157.073  c
193.820 157.792 193.126 158.152 192.262 158.152  c
191.674 158.152 191.175 157.957 190.764 157.568  c
189.960 156.810 189.558 155.829 189.558 154.623  c
189.558 153.852 189.713 153.120 190.022 152.426  c
190.330 151.732 190.772 151.117 191.345 150.579  c
191.918 150.042 192.467 149.680 192.992 149.494  c
193.517 149.307 194.006 149.214 194.459 149.214  c
h
190.878 153.658 m
190.802 154.229 190.764 154.690 190.764 155.042  c
190.764 155.448 190.839 155.889 190.990 156.365  c
191.140 156.841 191.363 157.219 191.659 157.498  c
191.875 157.697 192.137 157.796 192.446 157.796  c
192.814 157.796 193.144 157.623 193.433 157.276  c
193.723 156.929 193.868 156.434 193.868 155.791  c
193.868 155.067 193.724 154.441 193.437 153.912  c
193.149 153.383 192.740 153.118 192.211 153.118  c
192.051 153.118 191.878 153.152 191.694 153.220  c
191.510 153.287 191.238 153.433 190.878 153.658  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
213.000 137.000 m
213.000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
216.307 149.392 m
220.922 149.392 l
220.922 149.633 l
218.053 158.177 l
217.342 158.177 l
219.913 150.427 l
217.545 150.427 l
217.067 150.427 216.726 150.484 216.523 150.598  c
216.168 150.793 215.882 151.093 215.666 151.500  c
215.482 151.430 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
22.0000 137.000 m
22.0000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
47.0000 137.000 m
47.0000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 137.000 m
73.0000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
98.0000 137.000 m
98.0000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
124.000 137.000 m
124.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
150.000 137.000 m
150.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
175.000 137.000 m
175.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
201.000 137.000 m
201.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
35.0000 155.692 m
35.0000 1.00000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
3 62 8 15 rc
Q
cliprestore
newpath
0 0 m
0 172.000 l
218.000 172.000 l
218.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
35.0000 137.000 m
31.0000 137.000 l
S
Q
q
0 J
1 j
newpath
35.0000 106.000 m
31.0000 106.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
32.6430 107.392 m
32.1479 108.471 l
29.5581 108.471 l
28.9931 109.627 l
30.1145 109.792 31.0032 110.208 31.6591 110.877  c
32.2220 111.453 32.5034 112.130 32.5034 112.908  c
32.5034 113.361 32.4113 113.780 32.2272 114.165  c
32.0432 114.550 31.8115 114.878 31.5322 115.149  c
31.2529 115.420 30.9418 115.638 30.5991 115.803  c
30.1124 116.036 29.6131 116.152 29.1010 116.152  c
28.5848 116.152 28.2092 116.064 27.9743 115.888  c
27.7395 115.713 27.6220 115.519 27.6220 115.308  c
27.6220 115.189 27.6707 115.084 27.7680 114.993  c
27.8654 114.902 27.9881 114.857 28.1362 114.857  c
28.2462 114.857 28.3425 114.874 28.4250 114.908  c
28.5075 114.942 28.6482 115.028 28.8471 115.168  c
29.1645 115.388 29.4861 115.498 29.8120 115.498  c
30.3071 115.498 30.7419 115.311 31.1164 114.936  c
31.4909 114.562 31.6782 114.106 31.6782 113.568  c
31.6782 113.048 31.5110 112.562 31.1767 112.112  c
30.8424 111.661 30.3811 111.313 29.7929 111.067  c
29.3317 110.877 28.7032 110.767 27.9077 110.737  c
29.5581 107.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 75.0000 m
31.0000 75.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
21.5234 77.2368 m
23.6181 76.2148 l
23.8276 76.2148 l
23.8276 83.4829 l
23.8276 83.9653 23.8477 84.2657 23.8879 84.3842  c
23.9281 84.5027 24.0117 84.5937 24.1386 84.6572  c
24.2656 84.7207 24.5237 84.7566 24.9130 84.7651  c
24.9130 85.0000 l
21.6757 85.0000 l
21.6757 84.7651 l
22.0820 84.7566 22.3444 84.7217 22.4628 84.6604  c
22.5813 84.5990 22.6639 84.5165 22.7104 84.4128  c
22.7570 84.3091 22.7802 83.9991 22.7802 83.4829  c
22.7802 78.8364 l
22.7802 78.2101 22.7591 77.8081 22.7168 77.6303  c
22.6871 77.4949 22.6332 77.3955 22.5549 77.3320  c
22.4766 77.2685 22.3824 77.2368 22.2724 77.2368  c
22.1158 77.2368 21.8979 77.3024 21.6186 77.4335  c
h
27.4697 80.7470 m
27.4697 79.7653 27.6178 78.9200 27.9140 78.2111  c
28.2102 77.5023 28.6038 76.9744 29.0947 76.6274  c
29.4755 76.3523 29.8691 76.2148 30.2753 76.2148  c
30.9355 76.2148 31.5279 76.5512 32.0527 77.2241  c
32.7086 78.0577 33.0366 79.1876 33.0366 80.6137  c
33.0366 81.6124 32.8927 82.4609 32.6049 83.1591  c
32.3172 83.8574 31.9501 84.3641 31.5036 84.6794  c
31.0572 84.9947 30.6266 85.1523 30.2119 85.1523  c
29.3909 85.1523 28.7075 84.6678 28.1616 83.6987  c
27.7003 82.8820 27.4697 81.8981 27.4697 80.7470  c
h
28.7138 80.9057 m
28.7138 82.0906 28.8598 83.0576 29.1518 83.8066  c
29.3930 84.4371 29.7527 84.7524 30.2309 84.7524  c
30.4594 84.7524 30.6964 84.6498 30.9418 84.4445  c
31.1873 84.2393 31.3735 83.8955 31.5004 83.4130  c
31.6951 82.6852 31.7924 81.6590 31.7924 80.3344  c
31.7924 79.3527 31.6909 78.5338 31.4877 77.8779  c
31.3354 77.3912 31.1386 77.0463 30.8974 76.8432  c
30.7239 76.7036 30.5144 76.6337 30.2690 76.6337  c
29.9812 76.6337 29.7252 76.7628 29.5009 77.0210  c
29.1962 77.3722 28.9889 77.9244 28.8789 78.6777  c
28.7688 79.4309 28.7138 80.1736 28.7138 80.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 44.0000 m
31.0000 44.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
21.5234 46.2368 m
23.6181 45.2148 l
23.8276 45.2148 l
23.8276 52.4829 l
23.8276 52.9653 23.8477 53.2657 23.8879 53.3842  c
23.9281 53.5027 24.0117 53.5937 24.1386 53.6572  c
24.2656 53.7207 24.5237 53.7566 24.9130 53.7651  c
24.9130 54.0000 l
21.6757 54.0000 l
21.6757 53.7651 l
22.0820 53.7566 22.3444 53.7217 22.4628 53.6604  c
22.5813 53.5990 22.6639 53.5165 22.7104 53.4128  c
22.7570 53.3091 22.7802 52.9991 22.7802 52.4829  c
22.7802 47.8364 l
22.7802 47.2101 22.7591 46.8081 22.7168 46.6303  c
22.6871 46.4949 22.6332 46.3955 22.5549 46.3320  c
22.4766 46.2685 22.3824 46.2368 22.2724 46.2368  c
22.1158 46.2368 21.8979 46.3024 21.6186 46.4335  c
h
32.6430 45.3925 m
32.1479 46.4716 l
29.5581 46.4716 l
28.9931 47.6269 l
30.1145 47.7919 31.0032 48.2088 31.6591 48.8774  c
32.2220 49.4529 32.5034 50.1300 32.5034 50.9086  c
32.5034 51.3614 32.4113 51.7804 32.2272 52.1655  c
32.0432 52.5506 31.8115 52.8785 31.5322 53.1494  c
31.2529 53.4202 30.9418 53.6381 30.5991 53.8032  c
30.1124 54.0359 29.6131 54.1523 29.1010 54.1523  c
28.5848 54.1523 28.2092 54.0645 27.9743 53.8889  c
27.7395 53.7133 27.6220 53.5196 27.6220 53.3081  c
27.6220 53.1896 27.6707 53.0848 27.7680 52.9939  c
27.8654 52.9029 27.9881 52.8574 28.1362 52.8574  c
28.2462 52.8574 28.3425 52.8743 28.4250 52.9082  c
28.5075 52.9420 28.6482 53.0288 28.8471 53.1684  c
29.1645 53.3885 29.4861 53.4985 29.8120 53.4985  c
30.3071 53.4985 30.7419 53.3112 31.1164 52.9367  c
31.4909 52.5622 31.6782 52.1062 31.6782 51.5688  c
31.6782 51.0483 31.5110 50.5627 31.1767 50.1120  c
30.8424 49.6613 30.3811 49.3133 29.7929 49.0678  c
29.3317 48.8774 28.7032 48.7674 27.9077 48.7377  c
29.5581 45.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 13.0000 m
31.0000 13.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.9604 21.3432 m
25.3574 23.0000 l
20.2793 23.0000 l
20.2793 22.7651 l
21.7731 21.4025 22.8247 20.2895 23.4340 19.4262  c
24.0434 18.5629 24.3481 17.7737 24.3481 17.0585  c
24.3481 16.5127 24.1809 16.0641 23.8466 15.7128  c
23.5123 15.3616 23.1124 15.1860 22.6469 15.1860  c
22.2238 15.1860 21.8439 15.3098 21.5075 15.5573  c
21.1711 15.8049 20.9225 16.1678 20.7617 16.6460  c
20.5268 16.6460 l
20.6326 15.8631 20.9045 15.2622 21.3425 14.8432  c
21.7805 14.4243 22.3274 14.2148 22.9834 14.2148  c
23.6816 14.2148 24.2645 14.4391 24.7321 14.8877  c
25.1997 15.3362 25.4335 15.8652 25.4335 16.4746  c
25.4335 16.9104 25.3320 17.3463 25.1289 17.7822  c
24.8157 18.4677 24.3079 19.1935 23.6054 19.9594  c
22.5517 21.1105 21.8937 21.8045 21.6313 22.0415  c
23.8784 22.0415 l
24.3354 22.0415 24.6560 22.0245 24.8400 21.9907  c
25.0241 21.9568 25.1902 21.8881 25.3383 21.7844  c
25.4864 21.6807 25.6155 21.5336 25.7255 21.3432  c
h
27.4697 18.7470 m
27.4697 17.7653 27.6178 16.9200 27.9140 16.2111  c
28.2102 15.5023 28.6038 14.9744 29.0947 14.6274  c
29.4755 14.3523 29.8691 14.2148 30.2753 14.2148  c
30.9355 14.2148 31.5279 14.5512 32.0527 15.2241  c
32.7086 16.0577 33.0366 17.1876 33.0366 18.6137  c
33.0366 19.6124 32.8927 20.4609 32.6049 21.1591  c
32.3172 21.8574 31.9501 22.3641 31.5036 22.6794  c
31.0572 22.9947 30.6266 23.1523 30.2119 23.1523  c
29.3909 23.1523 28.7075 22.6678 28.1616 21.6987  c
27.7003 20.8820 27.4697 19.8981 27.4697 18.7470  c
h
28.7138 18.9057 m
28.7138 20.0906 28.8598 21.0576 29.1518 21.8066  c
29.3930 22.4371 29.7527 22.7524 30.2309 22.7524  c
30.4594 22.7524 30.6964 22.6498 30.9418 22.4445  c
31.1873 22.2393 31.3735 21.8955 31.5004 21.4130  c
31.6951 20.6852 31.7924 19.6590 31.7924 18.3344  c
31.7924 17.3527 31.6909 16.5338 31.4877 15.8779  c
31.3354 15.3912 31.1386 15.0463 30.8974 14.8432  c
30.7239 14.7036 30.5144 14.6337 30.2690 14.6337  c
29.9812 14.6337 29.7252 14.7628 29.5009 15.0210  c
29.1962 15.3722 28.9889 15.9244 28.8789 16.6777  c
28.7688 17.4309 28.7138 18.1736 28.7138 18.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 150.000 m
33.0000 150.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 143.000 m
33.0000 143.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 131.000 m
33.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 125.000 m
33.0000 125.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 119.000 m
33.0000 119.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 112.000 m
33.0000 112.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 100.000 m
33.0000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 94.0000 m
33.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 88.0000 m
33.0000 88.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 81.0000 m
33.0000 81.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 69.0000 m
33.0000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 63.0000 m
33.0000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 57.0000 m
33.0000 57.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 51.0000 m
33.0000 51.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 38.0000 m
33.0000 38.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 32.0000 m
33.0000 32.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 26.0000 m
33.0000 26.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 20.0000 m
33.0000 20.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 7.00000 m
33.0000 7.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
35.0000 1.00000 m
33.0000 1.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 228 182 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
