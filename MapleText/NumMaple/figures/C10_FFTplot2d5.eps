%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 296 575 495
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ16“ú 17Žž06•ª18•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
472 168 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
472.000 0 l
472.000 168.000 l
0 168.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 462 158 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
31.7000 2.01526 428.295 130.984 rc
newpath
32.7000 128.404 m
34.3678 130.352 l
36.0356 132.000 l
37.7034 124.317 l
39.3713 127.949 l
41.0391 123.796 l
42.7069 128.023 l
44.3747 122.154 l
46.0426 128.202 l
47.7104 125.064 l
49.3782 124.220 l
51.0460 124.592 l
52.7139 130.878 l
54.3817 127.886 l
56.0495 122.221 l
57.7173 129.699 l
59.3852 124.091 l
61.0530 127.088 l
62.7208 124.098 l
64.3886 128.285 l
66.0565 125.229 l
67.7243 122.721 l
69.3921 126.629 l
71.0600 127.403 l
72.7278 122.588 l
74.3956 126.401 l
76.0634 129.040 l
77.7313 130.567 l
79.3991 123.494 l
81.0669 125.175 l
82.7347 122.881 l
84.4026 126.450 l
86.0704 121.475 l
87.7382 121.373 l
89.4060 120.124 l
91.0739 125.357 l
92.7417 124.586 l
94.4095 126.710 l
96.0773 119.351 l
97.7452 122.173 l
99.4130 123.322 l
101.080 123.406 l
102.748 130.161 l
104.416 129.929 l
106.084 124.970 l
107.752 125.646 l
109.420 121.258 l
111.087 120.418 l
112.755 127.988 l
114.423 119.265 l
116.091 125.505 l
117.759 120.873 l
119.427 117.805 l
121.094 123.718 l
122.762 124.860 l
124.430 118.393 l
126.098 117.749 l
127.766 119.510 l
129.433 126.745 l
131.101 123.738 l
132.769 122.857 l
134.437 125.472 l
136.105 125.628 l
137.773 115.510 l
139.440 119.674 l
141.108 112.944 l
142.776 127.258 l
144.444 120.245 l
146.112 127.383 l
147.780 116.988 l
149.447 123.093 l
151.115 110.706 l
152.783 125.969 l
154.451 116.555 l
156.119 123.263 l
157.787 114.347 l
159.454 118.221 l
161.122 123.690 l
162.790 110.437 l
164.458 120.067 l
166.126 106.702 l
167.793 106.997 l
169.461 120.732 l
171.129 115.835 l
172.797 102.251 l
174.465 102.563 l
176.133 116.944 l
177.800 98.2631 l
179.468 106.727 l
181.136 109.962 l
182.804 116.408 l
184.472 102.073 l
186.140 105.184 l
187.807 101.827 l
189.475 107.929 l
191.143 97.4854 l
192.811 94.7453 l
194.479 114.106 l
196.146 114.058 l
197.814 103.195 l
199.482 92.1343 l
201.150 76.4983 l
202.818 78.7142 l
204.486 92.6247 l
206.153 104.948 l
207.821 96.8218 l
209.489 58.9416 l
211.157 63.2881 l
212.825 86.6709 l
214.493 83.6708 l
216.160 54.2506 l
217.828 57.9213 l
219.496 40.5798 l
221.164 64.9090 l
222.832 72.8947 l
224.500 35.0379 l
226.167 29.1833 l
227.835 44.8299 l
229.503 16.0431 l
231.171 25.0350 l
232.839 42.5080 l
234.506 4.01527 l
236.174 25.9532 l
237.842 25.5902 l
239.510 56.7295 l
241.178 60.9260 l
242.846 29.9598 l
244.513 43.4886 l
246.181 41.8166 l
247.849 27.9960 l
249.517 52.0466 l
251.185 19.9883 l
252.853 60.4600 l
254.520 41.1576 l
256.188 14.1710 l
257.856 51.6518 l
259.524 22.8567 l
261.192 83.4031 l
262.860 72.9359 l
264.527 26.1019 l
266.195 77.2081 l
267.863 62.2685 l
269.531 39.9729 l
271.199 95.6549 l
272.866 60.7696 l
274.534 78.1647 l
276.202 61.9246 l
277.870 56.2991 l
279.538 92.2200 l
281.206 82.2635 l
282.873 85.8236 l
284.541 103.109 l
286.209 81.4135 l
287.877 77.3431 l
289.545 99.3261 l
291.213 103.341 l
292.880 87.5604 l
294.548 86.9946 l
296.216 86.6462 l
297.884 98.0972 l
299.552 111.398 l
301.220 100.450 l
302.887 101.916 l
304.555 106.225 l
306.223 111.604 l
307.891 115.251 l
309.559 119.976 l
311.227 120.487 l
312.894 100.505 l
314.562 116.092 l
316.230 107.536 l
317.898 107.530 l
319.566 118.445 l
321.233 112.807 l
322.901 120.517 l
324.569 121.528 l
326.237 118.812 l
327.905 112.418 l
329.573 116.249 l
331.240 120.000 l
332.908 114.563 l
334.576 111.321 l
336.244 113.395 l
337.912 121.805 l
339.580 118.226 l
341.247 118.668 l
342.915 115.077 l
344.583 121.821 l
346.251 126.931 l
347.919 115.306 l
349.586 114.909 l
351.254 116.006 l
352.922 123.184 l
354.590 115.089 l
356.258 118.967 l
357.926 117.925 l
359.593 119.966 l
361.261 120.269 l
362.929 117.549 l
364.597 128.657 l
366.265 125.085 l
367.933 118.788 l
369.600 125.911 l
371.268 125.269 l
372.936 123.524 l
374.604 127.461 l
376.272 125.605 l
377.940 128.034 l
379.607 127.524 l
381.275 128.101 l
382.943 128.775 l
384.611 121.715 l
386.279 120.702 l
387.947 120.709 l
389.614 126.199 l
391.282 128.594 l
392.950 125.934 l
394.618 127.300 l
396.286 129.191 l
397.953 119.908 l
399.621 128.007 l
401.289 127.374 l
402.957 123.915 l
404.625 122.342 l
406.293 127.087 l
407.960 120.736 l
409.628 122.264 l
411.296 125.786 l
412.964 123.367 l
414.632 126.088 l
416.300 131.115 l
417.967 131.202 l
419.635 121.276 l
421.303 123.714 l
422.971 129.189 l
424.639 130.516 l
426.306 127.128 l
427.974 131.096 l
429.642 121.992 l
431.310 127.495 l
432.978 122.900 l
434.646 129.574 l
436.313 126.446 l
437.981 129.548 l
439.649 124.596 l
441.317 127.390 l
442.985 125.309 l
444.653 122.733 l
446.320 128.407 l
447.988 122.569 l
449.656 131.566 l
451.324 125.552 l
452.992 131.276 l
454.660 129.495 l
456.327 125.278 l
457.995 124.178 l
S
cliprestore
newpath
0 0 m
0 158.000 l
462.000 158.000 l
462.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
29.7000 135.000 m
457.995 135.000 l
S
Q
q
q
0 J
1 j
newpath
114.000 135.000 m
114.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
117.643 149.392 m
117.147 150.471 l
114.558 150.471 l
113.993 151.627 l
115.114 151.792 116.003 152.208 116.659 152.877  c
117.222 153.453 117.503 154.130 117.503 154.908  c
117.503 155.361 117.411 155.780 117.227 156.165  c
117.043 156.550 116.811 156.878 116.532 157.149  c
116.252 157.420 115.941 157.638 115.599 157.803  c
115.112 158.036 114.613 158.152 114.101 158.152  c
113.584 158.152 113.209 158.064 112.974 157.888  c
112.739 157.713 112.622 157.519 112.622 157.308  c
112.622 157.189 112.670 157.084 112.768 156.993  c
112.865 156.902 112.988 156.857 113.136 156.857  c
113.246 156.857 113.342 156.874 113.425 156.908  c
113.507 156.942 113.648 157.028 113.847 157.168  c
114.164 157.388 114.486 157.498 114.812 157.498  c
115.307 157.498 115.741 157.311 116.116 156.936  c
116.491 156.562 116.678 156.106 116.678 155.568  c
116.678 155.048 116.511 154.562 116.176 154.112  c
115.842 153.661 115.381 153.313 114.793 153.067  c
114.331 152.877 113.703 152.767 112.907 152.737  c
114.558 149.392 l
h
119.469 153.747 m
119.469 152.765 119.617 151.920 119.914 151.211  c
120.210 150.502 120.603 149.974 121.094 149.627  c
121.475 149.352 121.869 149.214 122.275 149.214  c
122.935 149.214 123.528 149.551 124.052 150.224  c
124.708 151.057 125.036 152.187 125.036 153.613  c
125.036 154.612 124.892 155.460 124.605 156.159  c
124.317 156.857 123.950 157.364 123.503 157.679  c
123.057 157.994 122.626 158.152 122.211 158.152  c
121.391 158.152 120.707 157.667 120.161 156.698  c
119.700 155.882 119.469 154.898 119.469 153.747  c
h
120.713 153.905 m
120.713 155.090 120.859 156.057 121.151 156.806  c
121.393 157.437 121.752 157.752 122.231 157.752  c
122.459 157.752 122.696 157.649 122.941 157.444  c
123.187 157.239 123.373 156.895 123.500 156.413  c
123.695 155.685 123.792 154.659 123.792 153.334  c
123.792 152.352 123.690 151.533 123.487 150.877  c
123.335 150.391 123.138 150.046 122.897 149.843  c
122.724 149.703 122.514 149.633 122.269 149.633  c
121.981 149.633 121.725 149.762 121.501 150.021  c
121.196 150.372 120.988 150.924 120.878 151.677  c
120.768 152.431 120.713 153.173 120.713 153.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
198.000 135.000 m
198.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
193.523 150.236 m
195.618 149.214 l
195.827 149.214 l
195.827 156.482 l
195.827 156.965 195.847 157.265 195.887 157.384  c
195.928 157.502 196.011 157.593 196.138 157.657  c
196.265 157.720 196.523 157.756 196.913 157.765  c
196.913 158.000 l
193.675 158.000 l
193.675 157.765 l
194.082 157.756 194.344 157.721 194.462 157.660  c
194.581 157.599 194.663 157.516 194.710 157.412  c
194.757 157.309 194.780 156.999 194.780 156.482  c
194.780 151.836 l
194.780 151.210 194.759 150.808 194.716 150.630  c
194.687 150.495 194.633 150.395 194.554 150.332  c
194.476 150.268 194.382 150.236 194.272 150.236  c
194.115 150.236 193.897 150.302 193.618 150.433  c
h
199.469 153.747 m
199.469 152.765 199.617 151.920 199.914 151.211  c
200.210 150.502 200.603 149.974 201.094 149.627  c
201.475 149.352 201.869 149.214 202.275 149.214  c
202.935 149.214 203.528 149.551 204.052 150.224  c
204.708 151.057 205.036 152.187 205.036 153.613  c
205.036 154.612 204.892 155.460 204.605 156.159  c
204.317 156.857 203.950 157.364 203.503 157.679  c
203.057 157.994 202.626 158.152 202.211 158.152  c
201.391 158.152 200.707 157.667 200.161 156.698  c
199.700 155.882 199.469 154.898 199.469 153.747  c
h
200.713 153.905 m
200.713 155.090 200.859 156.057 201.151 156.806  c
201.393 157.437 201.752 157.752 202.231 157.752  c
202.459 157.752 202.696 157.649 202.941 157.444  c
203.187 157.239 203.373 156.895 203.500 156.413  c
203.695 155.685 203.792 154.659 203.792 153.334  c
203.792 152.352 203.690 151.533 203.487 150.877  c
203.335 150.391 203.138 150.046 202.897 149.843  c
202.724 149.703 202.514 149.633 202.269 149.633  c
201.981 149.633 201.725 149.762 201.501 150.021  c
201.196 150.372 200.988 150.924 200.878 151.677  c
200.768 152.431 200.713 153.173 200.713 153.905  c
h
206.469 153.747 m
206.469 152.765 206.617 151.920 206.914 151.211  c
207.210 150.502 207.603 149.974 208.094 149.627  c
208.475 149.352 208.869 149.214 209.275 149.214  c
209.935 149.214 210.528 149.551 211.052 150.224  c
211.708 151.057 212.036 152.187 212.036 153.613  c
212.036 154.612 211.892 155.460 211.605 156.159  c
211.317 156.857 210.950 157.364 210.503 157.679  c
210.057 157.994 209.626 158.152 209.211 158.152  c
208.391 158.152 207.707 157.667 207.161 156.698  c
206.700 155.882 206.469 154.898 206.469 153.747  c
h
207.713 153.905 m
207.713 155.090 207.859 156.057 208.151 156.806  c
208.393 157.437 208.752 157.752 209.231 157.752  c
209.459 157.752 209.696 157.649 209.941 157.444  c
210.187 157.239 210.373 156.895 210.500 156.413  c
210.695 155.685 210.792 154.659 210.792 153.334  c
210.792 152.352 210.690 151.533 210.487 150.877  c
210.335 150.391 210.138 150.046 209.897 149.843  c
209.724 149.703 209.514 149.633 209.269 149.633  c
208.981 149.633 208.725 149.762 208.501 150.021  c
208.196 150.372 207.988 150.924 207.878 151.677  c
207.768 152.431 207.713 153.173 207.713 153.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
281.000 135.000 m
281.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
277.523 150.236 m
279.618 149.214 l
279.827 149.214 l
279.827 156.482 l
279.827 156.965 279.847 157.265 279.887 157.384  c
279.928 157.502 280.011 157.593 280.138 157.657  c
280.265 157.720 280.523 157.756 280.913 157.765  c
280.913 158.000 l
277.675 158.000 l
277.675 157.765 l
278.082 157.756 278.344 157.721 278.462 157.660  c
278.581 157.599 278.663 157.516 278.710 157.412  c
278.757 157.309 278.780 156.999 278.780 156.482  c
278.780 151.836 l
278.780 151.210 278.759 150.808 278.716 150.630  c
278.687 150.495 278.633 150.395 278.554 150.332  c
278.476 150.268 278.382 150.236 278.272 150.236  c
278.115 150.236 277.897 150.302 277.618 150.433  c
h
288.643 149.392 m
288.147 150.471 l
285.558 150.471 l
284.993 151.627 l
286.114 151.792 287.003 152.208 287.659 152.877  c
288.222 153.453 288.503 154.130 288.503 154.908  c
288.503 155.361 288.411 155.780 288.227 156.165  c
288.043 156.550 287.811 156.878 287.532 157.149  c
287.252 157.420 286.941 157.638 286.599 157.803  c
286.112 158.036 285.613 158.152 285.101 158.152  c
284.584 158.152 284.209 158.064 283.974 157.888  c
283.739 157.713 283.622 157.519 283.622 157.308  c
283.622 157.189 283.670 157.084 283.768 156.993  c
283.865 156.902 283.988 156.857 284.136 156.857  c
284.246 156.857 284.342 156.874 284.425 156.908  c
284.507 156.942 284.648 157.028 284.847 157.168  c
285.164 157.388 285.486 157.498 285.812 157.498  c
286.307 157.498 286.741 157.311 287.116 156.936  c
287.491 156.562 287.678 156.106 287.678 155.568  c
287.678 155.048 287.511 154.562 287.176 154.112  c
286.842 153.661 286.381 153.313 285.793 153.067  c
285.331 152.877 284.703 152.767 283.907 152.737  c
285.558 149.392 l
h
290.469 153.747 m
290.469 152.765 290.617 151.920 290.914 151.211  c
291.210 150.502 291.603 149.974 292.094 149.627  c
292.475 149.352 292.869 149.214 293.275 149.214  c
293.935 149.214 294.528 149.551 295.052 150.224  c
295.708 151.057 296.036 152.187 296.036 153.613  c
296.036 154.612 295.892 155.460 295.605 156.159  c
295.317 156.857 294.950 157.364 294.503 157.679  c
294.057 157.994 293.626 158.152 293.211 158.152  c
292.391 158.152 291.707 157.667 291.161 156.698  c
290.700 155.882 290.469 154.898 290.469 153.747  c
h
291.713 153.905 m
291.713 155.090 291.859 156.057 292.151 156.806  c
292.393 157.437 292.752 157.752 293.231 157.752  c
293.459 157.752 293.696 157.649 293.941 157.444  c
294.187 157.239 294.373 156.895 294.500 156.413  c
294.695 155.685 294.792 154.659 294.792 153.334  c
294.792 152.352 294.690 151.533 294.487 150.877  c
294.335 150.391 294.138 150.046 293.897 149.843  c
293.724 149.703 293.514 149.633 293.269 149.633  c
292.981 149.633 292.725 149.762 292.501 150.021  c
292.196 150.372 291.988 150.924 291.878 151.677  c
291.768 152.431 291.713 153.173 291.713 153.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
365.000 135.000 m
365.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
364.960 156.343 m
364.357 158.000 l
359.279 158.000 l
359.279 157.765 l
360.773 156.402 361.824 155.289 362.434 154.426  c
363.043 153.563 363.348 152.773 363.348 152.058  c
363.348 151.512 363.181 151.064 362.846 150.712  c
362.512 150.361 362.112 150.186 361.647 150.186  c
361.223 150.186 360.844 150.309 360.507 150.557  c
360.171 150.804 359.922 151.167 359.761 151.646  c
359.526 151.646 l
359.632 150.863 359.904 150.262 360.342 149.843  c
360.780 149.424 361.327 149.214 361.983 149.214  c
362.681 149.214 363.264 149.439 363.732 149.887  c
364.199 150.336 364.433 150.865 364.433 151.474  c
364.433 151.910 364.332 152.346 364.128 152.782  c
363.815 153.467 363.307 154.193 362.605 154.959  c
361.551 156.110 360.893 156.804 360.631 157.041  c
362.878 157.041 l
363.335 157.041 363.656 157.024 363.840 156.990  c
364.024 156.956 364.190 156.888 364.338 156.784  c
364.486 156.680 364.615 156.533 364.725 156.343  c
h
366.469 153.747 m
366.469 152.765 366.617 151.920 366.914 151.211  c
367.210 150.502 367.603 149.974 368.094 149.627  c
368.475 149.352 368.869 149.214 369.275 149.214  c
369.935 149.214 370.528 149.551 371.052 150.224  c
371.708 151.057 372.036 152.187 372.036 153.613  c
372.036 154.612 371.892 155.460 371.605 156.159  c
371.317 156.857 370.950 157.364 370.503 157.679  c
370.057 157.994 369.626 158.152 369.211 158.152  c
368.391 158.152 367.707 157.667 367.161 156.698  c
366.700 155.882 366.469 154.898 366.469 153.747  c
h
367.713 153.905 m
367.713 155.090 367.859 156.057 368.151 156.806  c
368.393 157.437 368.752 157.752 369.231 157.752  c
369.459 157.752 369.696 157.649 369.941 157.444  c
370.187 157.239 370.373 156.895 370.500 156.413  c
370.695 155.685 370.792 154.659 370.792 153.334  c
370.792 152.352 370.690 151.533 370.487 150.877  c
370.335 150.391 370.138 150.046 369.897 149.843  c
369.724 149.703 369.514 149.633 369.269 149.633  c
368.981 149.633 368.725 149.762 368.501 150.021  c
368.196 150.372 367.988 150.924 367.878 151.677  c
367.768 152.431 367.713 153.173 367.713 153.905  c
h
373.469 153.747 m
373.469 152.765 373.617 151.920 373.914 151.211  c
374.210 150.502 374.603 149.974 375.094 149.627  c
375.475 149.352 375.869 149.214 376.275 149.214  c
376.935 149.214 377.528 149.551 378.052 150.224  c
378.708 151.057 379.036 152.187 379.036 153.613  c
379.036 154.612 378.892 155.460 378.605 156.159  c
378.317 156.857 377.950 157.364 377.503 157.679  c
377.057 157.994 376.626 158.152 376.211 158.152  c
375.391 158.152 374.707 157.667 374.161 156.698  c
373.700 155.882 373.469 154.898 373.469 153.747  c
h
374.713 153.905 m
374.713 155.090 374.859 156.057 375.151 156.806  c
375.393 157.437 375.752 157.752 376.231 157.752  c
376.459 157.752 376.696 157.649 376.941 157.444  c
377.187 157.239 377.373 156.895 377.500 156.413  c
377.695 155.685 377.792 154.659 377.792 153.334  c
377.792 152.352 377.690 151.533 377.487 150.877  c
377.335 150.391 377.138 150.046 376.897 149.843  c
376.724 149.703 376.514 149.633 376.269 149.633  c
375.981 149.633 375.725 149.762 375.501 150.021  c
375.196 150.372 374.988 150.924 374.878 151.677  c
374.768 152.431 374.713 153.173 374.713 153.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
448.000 135.000 m
448.000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
447.960 156.343 m
447.357 158.000 l
442.279 158.000 l
442.279 157.765 l
443.773 156.402 444.824 155.289 445.434 154.426  c
446.043 153.563 446.348 152.773 446.348 152.058  c
446.348 151.512 446.181 151.064 445.846 150.712  c
445.512 150.361 445.112 150.186 444.647 150.186  c
444.223 150.186 443.844 150.309 443.507 150.557  c
443.171 150.804 442.922 151.167 442.761 151.646  c
442.526 151.646 l
442.632 150.863 442.904 150.262 443.342 149.843  c
443.780 149.424 444.327 149.214 444.983 149.214  c
445.681 149.214 446.264 149.439 446.732 149.887  c
447.199 150.336 447.433 150.865 447.433 151.474  c
447.433 151.910 447.332 152.346 447.128 152.782  c
446.815 153.467 446.307 154.193 445.605 154.959  c
444.551 156.110 443.893 156.804 443.631 157.041  c
445.878 157.041 l
446.335 157.041 446.656 157.024 446.840 156.990  c
447.024 156.956 447.190 156.888 447.338 156.784  c
447.486 156.680 447.615 156.533 447.725 156.343  c
h
454.643 149.392 m
454.147 150.471 l
451.558 150.471 l
450.993 151.627 l
452.114 151.792 453.003 152.208 453.659 152.877  c
454.222 153.453 454.503 154.130 454.503 154.908  c
454.503 155.361 454.411 155.780 454.227 156.165  c
454.043 156.550 453.811 156.878 453.532 157.149  c
453.252 157.420 452.941 157.638 452.599 157.803  c
452.112 158.036 451.613 158.152 451.101 158.152  c
450.584 158.152 450.209 158.064 449.974 157.888  c
449.739 157.713 449.622 157.519 449.622 157.308  c
449.622 157.189 449.670 157.084 449.768 156.993  c
449.865 156.902 449.988 156.857 450.136 156.857  c
450.246 156.857 450.342 156.874 450.425 156.908  c
450.507 156.942 450.648 157.028 450.847 157.168  c
451.164 157.388 451.486 157.498 451.812 157.498  c
452.307 157.498 452.741 157.311 453.116 156.936  c
453.491 156.562 453.678 156.106 453.678 155.568  c
453.678 155.048 453.511 154.562 453.176 154.112  c
452.842 153.661 452.381 153.313 451.793 153.067  c
451.331 152.877 450.703 152.767 449.907 152.737  c
451.558 149.392 l
h
456.469 153.747 m
456.469 152.765 456.617 151.920 456.914 151.211  c
457.210 150.502 457.603 149.974 458.094 149.627  c
458.475 149.352 458.869 149.214 459.275 149.214  c
459.935 149.214 460.528 149.551 461.052 150.224  c
461.708 151.057 462.036 152.187 462.036 153.613  c
462.036 154.612 461.892 155.460 461.605 156.159  c
461.317 156.857 460.950 157.364 460.503 157.679  c
460.057 157.994 459.626 158.152 459.211 158.152  c
458.391 158.152 457.707 157.667 457.161 156.698  c
456.700 155.882 456.469 154.898 456.469 153.747  c
h
457.713 153.905 m
457.713 155.090 457.859 156.057 458.151 156.806  c
458.393 157.437 458.752 157.752 459.231 157.752  c
459.459 157.752 459.696 157.649 459.941 157.444  c
460.187 157.239 460.373 156.895 460.500 156.413  c
460.695 155.685 460.792 154.659 460.792 153.334  c
460.792 152.352 460.690 151.533 460.487 150.877  c
460.335 150.391 460.138 150.046 459.897 149.843  c
459.724 149.703 459.514 149.633 459.269 149.633  c
458.981 149.633 458.725 149.762 458.501 150.021  c
458.196 150.372 457.988 150.924 457.878 151.677  c
457.768 152.431 457.713 153.173 457.713 153.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
48.0000 135.000 m
48.0000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
64.0000 135.000 m
64.0000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
81.0000 135.000 m
81.0000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
98.0000 135.000 m
98.0000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
131.000 135.000 m
131.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
148.000 135.000 m
148.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
164.000 135.000 m
164.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
181.000 135.000 m
181.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
214.000 135.000 m
214.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
231.000 135.000 m
231.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
248.000 135.000 m
248.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
265.000 135.000 m
265.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
298.000 135.000 m
298.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
315.000 135.000 m
315.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
331.000 135.000 m
331.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
348.000 135.000 m
348.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
381.000 135.000 m
381.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
398.000 135.000 m
398.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
415.000 135.000 m
415.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
431.000 135.000 m
431.000 137.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
30.0000 135.000 m
30.0000 4.01527 l
S
Q
q
q
0 J
1 j
newpath
30.0000 120.000 m
25.0000 120.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.9604 127.343 m
18.3574 129.000 l
13.2793 129.000 l
13.2793 128.765 l
14.7731 127.402 15.8247 126.289 16.4340 125.426  c
17.0434 124.563 17.3481 123.773 17.3481 123.058  c
17.3481 122.512 17.1809 122.064 16.8466 121.712  c
16.5123 121.361 16.1124 121.186 15.6469 121.186  c
15.2238 121.186 14.8439 121.309 14.5075 121.557  c
14.1711 121.804 13.9225 122.167 13.7617 122.646  c
13.5268 122.646 l
13.6326 121.863 13.9045 121.262 14.3425 120.843  c
14.7805 120.424 15.3274 120.214 15.9834 120.214  c
16.6816 120.214 17.2645 120.439 17.7321 120.887  c
18.1997 121.336 18.4335 121.865 18.4335 122.474  c
18.4335 122.910 18.3320 123.346 18.1289 123.782  c
17.8157 124.467 17.3079 125.193 16.6054 125.959  c
15.5517 127.110 14.8937 127.804 14.6313 128.041  c
16.8784 128.041 l
17.3354 128.041 17.6560 128.024 17.8400 127.990  c
18.0241 127.956 18.1902 127.888 18.3383 127.784  c
18.4864 127.680 18.6155 127.533 18.7255 127.343  c
h
20.4697 124.747 m
20.4697 123.765 20.6178 122.920 20.9140 122.211  c
21.2102 121.502 21.6038 120.974 22.0947 120.627  c
22.4755 120.352 22.8691 120.214 23.2753 120.214  c
23.9355 120.214 24.5279 120.551 25.0527 121.224  c
25.7086 122.057 26.0366 123.187 26.0366 124.613  c
26.0366 125.612 25.8927 126.460 25.6049 127.159  c
25.3172 127.857 24.9501 128.364 24.5036 128.679  c
24.0572 128.994 23.6266 129.152 23.2119 129.152  c
22.3909 129.152 21.7075 128.667 21.1616 127.698  c
20.7003 126.882 20.4697 125.898 20.4697 124.747  c
h
21.7138 124.905 m
21.7138 126.090 21.8598 127.057 22.1518 127.806  c
22.3930 128.437 22.7527 128.752 23.2309 128.752  c
23.4594 128.752 23.6964 128.649 23.9418 128.444  c
24.1873 128.239 24.3735 127.895 24.5004 127.413  c
24.6951 126.685 24.7924 125.659 24.7924 124.334  c
24.7924 123.352 24.6909 122.533 24.4877 121.877  c
24.3354 121.391 24.1386 121.046 23.8974 120.843  c
23.7239 120.703 23.5144 120.633 23.2690 120.633  c
22.9812 120.633 22.7252 120.762 22.5009 121.021  c
22.1962 121.372 21.9889 121.924 21.8789 122.677  c
21.7688 123.431 21.7138 124.173 21.7138 124.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 100.000 m
25.0000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
19.0493 106.826 m
19.0493 107.727 l
17.8940 107.727 l
17.8940 110.000 l
16.8466 110.000 l
16.8466 107.727 l
13.2031 107.727 l
13.2031 106.915 l
17.1958 101.214 l
17.8940 101.214 l
17.8940 106.826 l
h
16.8466 106.826 m
16.8466 102.554 l
13.8252 106.826 l
h
20.4697 105.747 m
20.4697 104.765 20.6178 103.920 20.9140 103.211  c
21.2102 102.502 21.6038 101.974 22.0947 101.627  c
22.4755 101.352 22.8691 101.214 23.2753 101.214  c
23.9355 101.214 24.5279 101.551 25.0527 102.224  c
25.7086 103.057 26.0366 104.187 26.0366 105.613  c
26.0366 106.612 25.8927 107.460 25.6049 108.159  c
25.3172 108.857 24.9501 109.364 24.5036 109.679  c
24.0572 109.994 23.6266 110.152 23.2119 110.152  c
22.3909 110.152 21.7075 109.667 21.1616 108.698  c
20.7003 107.882 20.4697 106.898 20.4697 105.747  c
h
21.7138 105.905 m
21.7138 107.090 21.8598 108.057 22.1518 108.806  c
22.3930 109.437 22.7527 109.752 23.2309 109.752  c
23.4594 109.752 23.6964 109.649 23.9418 109.444  c
24.1873 109.239 24.3735 108.895 24.5004 108.413  c
24.6951 107.685 24.7924 106.659 24.7924 105.334  c
24.7924 104.352 24.6909 103.533 24.4877 102.877  c
24.3354 102.391 24.1386 102.046 23.8974 101.843  c
23.7239 101.703 23.5144 101.633 23.2690 101.633  c
22.9812 101.633 22.7252 101.762 22.5009 102.021  c
22.1962 102.372 21.9889 102.924 21.8789 103.677  c
21.7688 104.431 21.7138 105.173 21.7138 105.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 81.0000 m
25.0000 81.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.8271 81.2148 m
18.8271 81.4497 l
18.2685 81.5047 17.8125 81.6158 17.4592 81.7829  c
17.1058 81.9501 16.7567 82.2050 16.4118 82.5478  c
16.0669 82.8906 15.7813 83.2725 15.5549 83.6936  c
15.3285 84.1146 15.1391 84.6150 14.9868 85.1948  c
15.5961 84.7758 16.2076 84.5664 16.8212 84.5664  c
17.4095 84.5664 17.9194 84.8033 18.3510 85.2773  c
18.7827 85.7513 18.9985 86.3606 18.9985 87.1054  c
18.9985 87.8248 18.7806 88.4807 18.3447 89.0732  c
17.8199 89.7926 17.1259 90.1523 16.2627 90.1523  c
15.6744 90.1523 15.1751 89.9576 14.7646 89.5683  c
13.9606 88.8108 13.5585 87.8291 13.5585 86.6230  c
13.5585 85.8528 13.7130 85.1207 14.0219 84.4267  c
14.3308 83.7327 14.7720 83.1170 15.3454 82.5795  c
15.9188 82.0421 16.4679 81.6803 16.9926 81.4941  c
17.5174 81.3079 18.0061 81.2148 18.4589 81.2148  c
h
14.8789 85.6582 m
14.8027 86.2294 14.7646 86.6907 14.7646 87.0419  c
14.7646 87.4482 14.8397 87.8894 14.9899 88.3654  c
15.1402 88.8415 15.3634 89.2192 15.6596 89.4985  c
15.8754 89.6974 16.1378 89.7968 16.4467 89.7968  c
16.8149 89.7968 17.1439 89.6233 17.4338 89.2763  c
17.7237 88.9293 17.8686 88.4342 17.8686 87.7910  c
17.8686 87.0673 17.7247 86.4410 17.4370 85.9121  c
17.1492 85.3831 16.7408 85.1186 16.2119 85.1186  c
16.0511 85.1186 15.8786 85.1525 15.6945 85.2202  c
15.5105 85.2879 15.2386 85.4339 14.8789 85.6582  c
h
20.4697 85.7470 m
20.4697 84.7653 20.6178 83.9200 20.9140 83.2111  c
21.2102 82.5023 21.6038 81.9744 22.0947 81.6274  c
22.4755 81.3523 22.8691 81.2148 23.2753 81.2148  c
23.9355 81.2148 24.5279 81.5512 25.0527 82.2241  c
25.7086 83.0577 26.0366 84.1876 26.0366 85.6137  c
26.0366 86.6124 25.8927 87.4609 25.6049 88.1591  c
25.3172 88.8574 24.9501 89.3641 24.5036 89.6794  c
24.0572 89.9947 23.6266 90.1523 23.2119 90.1523  c
22.3909 90.1523 21.7075 89.6678 21.1616 88.6987  c
20.7003 87.8820 20.4697 86.8981 20.4697 85.7470  c
h
21.7138 85.9057 m
21.7138 87.0906 21.8598 88.0576 22.1518 88.8066  c
22.3930 89.4371 22.7527 89.7524 23.2309 89.7524  c
23.4594 89.7524 23.6964 89.6498 23.9418 89.4445  c
24.1873 89.2393 24.3735 88.8955 24.5004 88.4130  c
24.6951 87.6852 24.7924 86.6590 24.7924 85.3344  c
24.7924 84.3527 24.6909 83.5338 24.4877 82.8779  c
24.3354 82.3912 24.1386 82.0463 23.8974 81.8432  c
23.7239 81.7036 23.5144 81.6337 23.2690 81.6337  c
22.9812 81.6337 22.7252 81.7628 22.5009 82.0210  c
22.1962 82.3722 21.9889 82.9244 21.8789 83.6777  c
21.7688 84.4309 21.7138 85.1736 21.7138 85.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 61.0000 m
25.0000 61.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
15.4946 66.6645 m
14.8133 66.1059 14.3742 65.6573 14.1774 65.3188  c
13.9807 64.9803 13.8823 64.6290 13.8823 64.2651  c
13.8823 63.7065 14.0981 63.2251 14.5297 62.8210  c
14.9614 62.4169 15.5348 62.2148 16.2500 62.2148  c
16.9440 62.2148 17.5026 62.4031 17.9257 62.7797  c
18.3489 63.1564 18.5605 63.5859 18.5605 64.0683  c
18.5605 64.3899 18.4462 64.7179 18.2177 65.0522  c
17.9892 65.3865 17.5131 65.7801 16.7895 66.2329  c
17.5343 66.8084 18.0273 67.2612 18.2685 67.5913  c
18.5901 68.0229 18.7509 68.4778 18.7509 68.9560  c
18.7509 69.5612 18.5203 70.0785 18.0590 70.5080  c
17.5978 70.9375 16.9926 71.1523 16.2436 71.1523  c
15.4269 71.1523 14.7900 70.8963 14.3330 70.3842  c
13.9690 69.9738 13.7871 69.5252 13.7871 69.0385  c
13.7871 68.6577 13.9151 68.2800 14.1711 67.9055  c
14.4271 67.5310 14.8683 67.1173 15.4946 66.6645  c
h
16.4912 65.9853 m
16.9990 65.5283 17.3206 65.1675 17.4560 64.9030  c
17.5914 64.6385 17.6591 64.3391 17.6591 64.0048  c
17.6591 63.5605 17.5343 63.2124 17.2846 62.9606  c
17.0349 62.7089 16.6943 62.5830 16.2627 62.5830  c
15.8310 62.5830 15.4798 62.7078 15.2089 62.9575  c
14.9381 63.2071 14.8027 63.4991 14.8027 63.8335  c
14.8027 64.0535 14.8588 64.2736 14.9709 64.4936  c
15.0830 64.7137 15.2428 64.9231 15.4502 65.1220  c
h
15.7929 66.9057 m
15.4417 67.2019 15.1814 67.5246 15.0122 67.8737  c
14.8429 68.2229 14.7583 68.6005 14.7583 69.0068  c
14.7583 69.5527 14.9074 69.9896 15.2058 70.3176  c
15.5041 70.6455 15.8839 70.8095 16.3452 70.8095  c
16.8022 70.8095 17.1682 70.6805 17.4433 70.4223  c
17.7184 70.1642 17.8559 69.8510 17.8559 69.4829  c
17.8559 69.1782 17.7755 68.9052 17.6147 68.6640  c
17.3142 68.2154 16.7070 67.6293 15.7929 66.9057  c
h
20.4697 66.7470 m
20.4697 65.7653 20.6178 64.9200 20.9140 64.2111  c
21.2102 63.5023 21.6038 62.9744 22.0947 62.6274  c
22.4755 62.3523 22.8691 62.2148 23.2753 62.2148  c
23.9355 62.2148 24.5279 62.5512 25.0527 63.2241  c
25.7086 64.0577 26.0366 65.1876 26.0366 66.6137  c
26.0366 67.6124 25.8927 68.4609 25.6049 69.1591  c
25.3172 69.8574 24.9501 70.3641 24.5036 70.6794  c
24.0572 70.9947 23.6266 71.1523 23.2119 71.1523  c
22.3909 71.1523 21.7075 70.6678 21.1616 69.6987  c
20.7003 68.8820 20.4697 67.8981 20.4697 66.7470  c
h
21.7138 66.9057 m
21.7138 68.0906 21.8598 69.0576 22.1518 69.8066  c
22.3930 70.4371 22.7527 70.7524 23.2309 70.7524  c
23.4594 70.7524 23.6964 70.6498 23.9418 70.4445  c
24.1873 70.2393 24.3735 69.8955 24.5004 69.4130  c
24.6951 68.6852 24.7924 67.6590 24.7924 66.3344  c
24.7924 65.3527 24.6909 64.5338 24.4877 63.8779  c
24.3354 63.3912 24.1386 63.0463 23.8974 62.8432  c
23.7239 62.7036 23.5144 62.6337 23.2690 62.6337  c
22.9812 62.6337 22.7252 62.7628 22.5009 63.0210  c
22.1962 63.3722 21.9889 63.9244 21.8789 64.6777  c
21.7688 65.4309 21.7138 66.1736 21.7138 66.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 41.0000 m
25.0000 41.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
7.52343 43.2368 m
9.61816 42.2148 l
9.82763 42.2148 l
9.82763 49.4829 l
9.82763 49.9653 9.84773 50.2657 9.88793 50.3842  c
9.92814 50.5027 10.0117 50.5937 10.1386 50.6572  c
10.2656 50.7207 10.5237 50.7566 10.9130 50.7651  c
10.9130 51.0000 l
7.67578 51.0000 l
7.67578 50.7651 l
8.08203 50.7566 8.34440 50.7217 8.46289 50.6604  c
8.58138 50.5990 8.66390 50.5165 8.71044 50.4128  c
8.75699 50.3091 8.78027 49.9991 8.78027 49.4829  c
8.78027 44.8364 l
8.78027 44.2101 8.75911 43.8081 8.71679 43.6303  c
8.68717 43.4949 8.63321 43.3955 8.55493 43.3320  c
8.47664 43.2685 8.38248 43.2368 8.27246 43.2368  c
8.11588 43.2368 7.89794 43.3024 7.61865 43.4335  c
h
13.4697 46.7470 m
13.4697 45.7653 13.6178 44.9200 13.9140 44.2111  c
14.2102 43.5023 14.6038 42.9744 15.0947 42.6274  c
15.4755 42.3523 15.8691 42.2148 16.2753 42.2148  c
16.9355 42.2148 17.5279 42.5512 18.0527 43.2241  c
18.7086 44.0577 19.0366 45.1876 19.0366 46.6137  c
19.0366 47.6124 18.8927 48.4609 18.6049 49.1591  c
18.3172 49.8574 17.9501 50.3641 17.5036 50.6794  c
17.0572 50.9947 16.6266 51.1523 16.2119 51.1523  c
15.3909 51.1523 14.7075 50.6678 14.1616 49.6987  c
13.7003 48.8820 13.4697 47.8981 13.4697 46.7470  c
h
14.7138 46.9057 m
14.7138 48.0906 14.8598 49.0576 15.1518 49.8066  c
15.3930 50.4371 15.7527 50.7524 16.2309 50.7524  c
16.4594 50.7524 16.6964 50.6498 16.9418 50.4445  c
17.1873 50.2393 17.3735 49.8955 17.5004 49.4130  c
17.6951 48.6852 17.7924 47.6590 17.7924 46.3344  c
17.7924 45.3527 17.6909 44.5338 17.4877 43.8779  c
17.3354 43.3912 17.1386 43.0463 16.8974 42.8432  c
16.7239 42.7036 16.5144 42.6337 16.2690 42.6337  c
15.9812 42.6337 15.7252 42.7628 15.5009 43.0210  c
15.1962 43.3722 14.9889 43.9244 14.8789 44.6777  c
14.7688 45.4309 14.7138 46.1736 14.7138 46.9057  c
h
20.4697 46.7470 m
20.4697 45.7653 20.6178 44.9200 20.9140 44.2111  c
21.2102 43.5023 21.6038 42.9744 22.0947 42.6274  c
22.4755 42.3523 22.8691 42.2148 23.2753 42.2148  c
23.9355 42.2148 24.5279 42.5512 25.0527 43.2241  c
25.7086 44.0577 26.0366 45.1876 26.0366 46.6137  c
26.0366 47.6124 25.8927 48.4609 25.6049 49.1591  c
25.3172 49.8574 24.9501 50.3641 24.5036 50.6794  c
24.0572 50.9947 23.6266 51.1523 23.2119 51.1523  c
22.3909 51.1523 21.7075 50.6678 21.1616 49.6987  c
20.7003 48.8820 20.4697 47.8981 20.4697 46.7470  c
h
21.7138 46.9057 m
21.7138 48.0906 21.8598 49.0576 22.1518 49.8066  c
22.3930 50.4371 22.7527 50.7524 23.2309 50.7524  c
23.4594 50.7524 23.6964 50.6498 23.9418 50.4445  c
24.1873 50.2393 24.3735 49.8955 24.5004 49.4130  c
24.6951 48.6852 24.7924 47.6590 24.7924 46.3344  c
24.7924 45.3527 24.6909 44.5338 24.4877 43.8779  c
24.3354 43.3912 24.1386 43.0463 23.8974 42.8432  c
23.7239 42.7036 23.5144 42.6337 23.2690 42.6337  c
22.9812 42.6337 22.7252 42.7628 22.5009 43.0210  c
22.1962 43.3722 21.9889 43.9244 21.8789 44.6777  c
21.7688 45.4309 21.7138 46.1736 21.7138 46.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 22.0000 m
25.0000 22.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
7.52343 23.2368 m
9.61816 22.2148 l
9.82763 22.2148 l
9.82763 29.4829 l
9.82763 29.9653 9.84773 30.2657 9.88793 30.3842  c
9.92814 30.5027 10.0117 30.5937 10.1386 30.6572  c
10.2656 30.7207 10.5237 30.7566 10.9130 30.7651  c
10.9130 31.0000 l
7.67578 31.0000 l
7.67578 30.7651 l
8.08203 30.7566 8.34440 30.7217 8.46289 30.6604  c
8.58138 30.5990 8.66390 30.5165 8.71044 30.4128  c
8.75699 30.3091 8.78027 29.9991 8.78027 29.4829  c
8.78027 24.8364 l
8.78027 24.2101 8.75911 23.8081 8.71679 23.6303  c
8.68717 23.4949 8.63321 23.3955 8.55493 23.3320  c
8.47664 23.2685 8.38248 23.2368 8.27246 23.2368  c
8.11588 23.2368 7.89794 23.3024 7.61865 23.4335  c
h
18.9604 29.3432 m
18.3574 31.0000 l
13.2793 31.0000 l
13.2793 30.7651 l
14.7731 29.4025 15.8247 28.2895 16.4340 27.4262  c
17.0434 26.5629 17.3481 25.7737 17.3481 25.0585  c
17.3481 24.5127 17.1809 24.0641 16.8466 23.7128  c
16.5123 23.3616 16.1124 23.1860 15.6469 23.1860  c
15.2238 23.1860 14.8439 23.3098 14.5075 23.5573  c
14.1711 23.8049 13.9225 24.1678 13.7617 24.6460  c
13.5268 24.6460 l
13.6326 23.8631 13.9045 23.2622 14.3425 22.8432  c
14.7805 22.4243 15.3274 22.2148 15.9834 22.2148  c
16.6816 22.2148 17.2645 22.4391 17.7321 22.8877  c
18.1997 23.3362 18.4335 23.8652 18.4335 24.4746  c
18.4335 24.9104 18.3320 25.3463 18.1289 25.7822  c
17.8157 26.4677 17.3079 27.1935 16.6054 27.9594  c
15.5517 29.1105 14.8937 29.8045 14.6313 30.0415  c
16.8784 30.0415 l
17.3354 30.0415 17.6560 30.0245 17.8400 29.9907  c
18.0241 29.9568 18.1902 29.8881 18.3383 29.7844  c
18.4864 29.6807 18.6155 29.5336 18.7255 29.3432  c
h
20.4697 26.7470 m
20.4697 25.7653 20.6178 24.9200 20.9140 24.2111  c
21.2102 23.5023 21.6038 22.9744 22.0947 22.6274  c
22.4755 22.3523 22.8691 22.2148 23.2753 22.2148  c
23.9355 22.2148 24.5279 22.5512 25.0527 23.2241  c
25.7086 24.0577 26.0366 25.1876 26.0366 26.6137  c
26.0366 27.6124 25.8927 28.4609 25.6049 29.1591  c
25.3172 29.8574 24.9501 30.3641 24.5036 30.6794  c
24.0572 30.9947 23.6266 31.1523 23.2119 31.1523  c
22.3909 31.1523 21.7075 30.6678 21.1616 29.6987  c
20.7003 28.8820 20.4697 27.8981 20.4697 26.7470  c
h
21.7138 26.9057 m
21.7138 28.0906 21.8598 29.0576 22.1518 29.8066  c
22.3930 30.4371 22.7527 30.7524 23.2309 30.7524  c
23.4594 30.7524 23.6964 30.6498 23.9418 30.4445  c
24.1873 30.2393 24.3735 29.8955 24.5004 29.4130  c
24.6951 28.6852 24.7924 27.6590 24.7924 26.3344  c
24.7924 25.3527 24.6909 24.5338 24.4877 23.8779  c
24.3354 23.3912 24.1386 23.0463 23.8974 22.8432  c
23.7239 22.7036 23.5144 22.6337 23.2690 22.6337  c
22.9812 22.6337 22.7252 22.7628 22.5009 23.0210  c
22.1962 23.3722 21.9889 23.9244 21.8789 24.6777  c
21.7688 25.4309 21.7138 26.1736 21.7138 26.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 130.000 m
28.0000 130.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 110.000 m
28.0000 110.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 90.0000 m
28.0000 90.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 71.0000 m
28.0000 71.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 51.0000 m
28.0000 51.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 32.0000 m
28.0000 32.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
30.0000 12.0000 m
28.0000 12.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 472 168 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
