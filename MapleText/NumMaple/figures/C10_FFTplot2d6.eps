%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 319 575 472
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2013”N11ŒŽ29“ú 18Žž58•ª20•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
498 137 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
498.000 0 l
498.000 137.000 l
0 137.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 488 127 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
44.0000 1.00242 442.997 91.9975 rc
0.470588 0 0.0549020 RG
newpath
45.0000 3.00242 m
48.4645 12.8568 l
51.9291 19.6835 l
55.3936 26.1346 l
58.8582 33.5636 l
62.3227 41.4110 l
65.7873 51.3096 l
69.2518 49.0755 l
72.7164 53.0154 l
76.1809 60.4013 l
79.6455 59.0717 l
83.1100 77.7029 l
86.5746 58.7147 l
90.0391 61.9001 l
93.5037 58.4978 l
96.9682 60.7056 l
100.432 57.0796 l
103.897 66.1111 l
107.361 61.1394 l
110.826 54.0207 l
114.291 54.2146 l
117.755 56.6504 l
121.220 57.2600 l
124.684 67.1552 l
128.149 73.0174 l
131.613 64.8118 l
135.078 65.6000 l
138.542 65.6040 l
142.007 62.4164 l
145.472 63.6260 l
148.936 62.5663 l
152.401 64.9734 l
155.865 63.7782 l
159.330 58.4968 l
162.794 71.6552 l
166.259 70.8778 l
169.723 61.1961 l
173.188 53.9598 l
176.652 61.4119 l
180.117 59.3623 l
183.582 61.3611 l
187.046 59.2679 l
190.511 64.7886 l
193.975 52.4786 l
197.440 52.4337 l
200.904 50.6231 l
204.369 50.7811 l
207.833 58.9002 l
211.298 58.5955 l
214.763 55.2238 l
218.227 49.1028 l
221.692 51.9566 l
225.156 60.2797 l
228.621 62.1713 l
232.085 58.7367 l
235.550 51.2279 l
239.014 55.9657 l
242.479 76.3770 l
245.943 75.1084 l
249.408 88.3552 l
252.873 60.1737 l
256.337 57.7262 l
259.802 65.8883 l
263.266 78.4735 l
266.731 64.8797 l
270.195 51.6993 l
273.660 50.2345 l
277.124 62.1183 l
280.589 60.7470 l
284.054 85.7233 l
287.518 61.2107 l
290.983 56.8714 l
294.447 68.1362 l
297.912 79.5332 l
301.376 56.9946 l
304.841 57.2948 l
308.305 59.2083 l
311.770 62.6188 l
315.235 65.1484 l
318.699 60.8035 l
322.164 61.9032 l
325.628 65.9737 l
329.093 63.3096 l
332.557 57.1617 l
336.022 67.3811 l
339.486 74.6863 l
342.951 59.5528 l
346.415 58.3606 l
349.880 52.9868 l
353.345 51.2876 l
356.809 55.3274 l
360.274 66.1293 l
363.738 67.7912 l
367.203 55.5742 l
370.667 52.7723 l
374.132 50.8061 l
377.596 45.7978 l
381.061 46.5667 l
384.525 48.1029 l
387.990 49.8841 l
391.455 48.3632 l
394.919 53.7451 l
398.384 51.2952 l
401.848 54.5731 l
405.313 57.6955 l
408.777 60.4123 l
412.242 63.6184 l
415.706 72.4754 l
419.171 72.7142 l
422.636 86.3485 l
426.100 63.5133 l
429.565 60.4157 l
433.029 70.0810 l
436.494 69.4857 l
439.958 65.7155 l
443.423 66.2200 l
446.887 64.6023 l
450.352 92.0000 l
453.817 62.3354 l
457.281 62.8053 l
460.746 54.3382 l
464.210 68.4437 l
467.675 61.7119 l
471.139 66.3084 l
474.604 60.7964 l
478.068 74.5806 l
481.533 61.8414 l
484.997 66.5789 l
S
cliprestore
newpath
0 0 m
0 127.000 l
488.000 127.000 l
488.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
43.0000 94.0000 m
484.997 94.0000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
260 112 8 15 rc
Q
cliprestore
newpath
0 0 m
0 127.000 l
488.000 127.000 l
488.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
111.000 94.0000 m
111.000 97.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
113.960 111.343 m
113.357 113.000 l
108.279 113.000 l
108.279 112.765 l
109.773 111.402 110.824 110.289 111.434 109.426  c
112.043 108.563 112.348 107.773 112.348 107.058  c
112.348 106.512 112.181 106.064 111.846 105.712  c
111.512 105.361 111.112 105.186 110.647 105.186  c
110.223 105.186 109.844 105.309 109.507 105.557  c
109.171 105.804 108.922 106.167 108.761 106.646  c
108.526 106.646 l
108.632 105.863 108.904 105.262 109.342 104.843  c
109.780 104.424 110.327 104.214 110.983 104.214  c
111.681 104.214 112.264 104.439 112.732 104.887  c
113.199 105.336 113.433 105.865 113.433 106.474  c
113.433 106.910 113.332 107.346 113.128 107.782  c
112.815 108.467 112.307 109.193 111.605 109.959  c
110.551 111.110 109.893 111.804 109.631 112.041  c
111.878 112.041 l
112.335 112.041 112.656 112.024 112.840 111.990  c
113.024 111.956 113.190 111.888 113.338 111.784  c
113.486 111.680 113.615 111.533 113.725 111.343  c
h
115.469 108.747 m
115.469 107.765 115.617 106.920 115.914 106.211  c
116.210 105.502 116.603 104.974 117.094 104.627  c
117.475 104.352 117.869 104.214 118.275 104.214  c
118.935 104.214 119.528 104.551 120.052 105.224  c
120.708 106.057 121.036 107.187 121.036 108.613  c
121.036 109.612 120.892 110.460 120.605 111.159  c
120.317 111.857 119.950 112.364 119.503 112.679  c
119.057 112.994 118.626 113.152 118.211 113.152  c
117.391 113.152 116.707 112.667 116.161 111.698  c
115.700 110.882 115.469 109.898 115.469 108.747  c
h
116.713 108.905 m
116.713 110.090 116.859 111.057 117.151 111.806  c
117.393 112.437 117.752 112.752 118.231 112.752  c
118.459 112.752 118.696 112.649 118.941 112.444  c
119.187 112.239 119.373 111.895 119.500 111.413  c
119.695 110.685 119.792 109.659 119.792 108.334  c
119.792 107.352 119.690 106.533 119.487 105.877  c
119.335 105.391 119.138 105.046 118.897 104.843  c
118.724 104.703 118.514 104.633 118.269 104.633  c
117.981 104.633 117.725 104.762 117.501 105.021  c
117.196 105.372 116.988 105.924 116.878 106.677  c
116.768 107.431 116.713 108.173 116.713 108.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
180.000 94.0000 m
180.000 97.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
184.049 109.826 m
184.049 110.727 l
182.894 110.727 l
182.894 113.000 l
181.846 113.000 l
181.846 110.727 l
178.203 110.727 l
178.203 109.915 l
182.195 104.214 l
182.894 104.214 l
182.894 109.826 l
h
181.846 109.826 m
181.846 105.554 l
178.825 109.826 l
h
185.469 108.747 m
185.469 107.765 185.617 106.920 185.914 106.211  c
186.210 105.502 186.603 104.974 187.094 104.627  c
187.475 104.352 187.869 104.214 188.275 104.214  c
188.935 104.214 189.528 104.551 190.052 105.224  c
190.708 106.057 191.036 107.187 191.036 108.613  c
191.036 109.612 190.892 110.460 190.605 111.159  c
190.317 111.857 189.950 112.364 189.503 112.679  c
189.057 112.994 188.626 113.152 188.211 113.152  c
187.391 113.152 186.707 112.667 186.161 111.698  c
185.700 110.882 185.469 109.898 185.469 108.747  c
h
186.713 108.905 m
186.713 110.090 186.859 111.057 187.151 111.806  c
187.393 112.437 187.752 112.752 188.231 112.752  c
188.459 112.752 188.696 112.649 188.941 112.444  c
189.187 112.239 189.373 111.895 189.500 111.413  c
189.695 110.685 189.792 109.659 189.792 108.334  c
189.792 107.352 189.690 106.533 189.487 105.877  c
189.335 105.391 189.138 105.046 188.897 104.843  c
188.724 104.703 188.514 104.633 188.269 104.633  c
187.981 104.633 187.725 104.762 187.501 105.021  c
187.196 105.372 186.988 105.924 186.878 106.677  c
186.768 107.431 186.713 108.173 186.713 108.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
249.000 94.0000 m
249.000 97.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
252.827 104.214 m
252.827 104.449 l
252.268 104.504 251.812 104.615 251.459 104.783  c
251.105 104.950 250.756 105.205 250.411 105.547  c
250.067 105.890 249.781 106.272 249.554 106.693  c
249.328 107.114 249.139 107.615 248.986 108.194  c
249.596 107.775 250.207 107.566 250.821 107.566  c
251.409 107.566 251.919 107.803 252.351 108.277  c
252.782 108.751 252.998 109.360 252.998 110.105  c
252.998 110.824 252.780 111.480 252.344 112.073  c
251.820 112.792 251.126 113.152 250.262 113.152  c
249.674 113.152 249.175 112.957 248.764 112.568  c
247.960 111.810 247.558 110.829 247.558 109.623  c
247.558 108.852 247.713 108.120 248.022 107.426  c
248.330 106.732 248.772 106.117 249.345 105.579  c
249.918 105.042 250.467 104.680 250.992 104.494  c
251.517 104.307 252.006 104.214 252.459 104.214  c
h
248.878 108.658 m
248.802 109.229 248.764 109.690 248.764 110.042  c
248.764 110.448 248.839 110.889 248.990 111.365  c
249.140 111.841 249.363 112.219 249.659 112.498  c
249.875 112.697 250.137 112.796 250.446 112.796  c
250.814 112.796 251.144 112.623 251.433 112.276  c
251.723 111.929 251.868 111.434 251.868 110.791  c
251.868 110.067 251.724 109.441 251.437 108.912  c
251.149 108.383 250.740 108.118 250.211 108.118  c
250.051 108.118 249.878 108.152 249.694 108.220  c
249.510 108.287 249.238 108.433 248.878 108.658  c
h
254.469 108.747 m
254.469 107.765 254.617 106.920 254.914 106.211  c
255.210 105.502 255.603 104.974 256.094 104.627  c
256.475 104.352 256.869 104.214 257.275 104.214  c
257.935 104.214 258.528 104.551 259.052 105.224  c
259.708 106.057 260.036 107.187 260.036 108.613  c
260.036 109.612 259.892 110.460 259.605 111.159  c
259.317 111.857 258.950 112.364 258.503 112.679  c
258.057 112.994 257.626 113.152 257.211 113.152  c
256.391 113.152 255.707 112.667 255.161 111.698  c
254.700 110.882 254.469 109.898 254.469 108.747  c
h
255.713 108.905 m
255.713 110.090 255.859 111.057 256.151 111.806  c
256.393 112.437 256.752 112.752 257.231 112.752  c
257.459 112.752 257.696 112.649 257.941 112.444  c
258.187 112.239 258.373 111.895 258.500 111.413  c
258.695 110.685 258.792 109.659 258.792 108.334  c
258.792 107.352 258.690 106.533 258.487 105.877  c
258.335 105.391 258.138 105.046 257.897 104.843  c
257.724 104.703 257.514 104.633 257.269 104.633  c
256.981 104.633 256.725 104.762 256.501 105.021  c
256.196 105.372 255.988 105.924 255.878 106.677  c
255.768 107.431 255.713 108.173 255.713 108.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
319.000 94.0000 m
319.000 97.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
318.494 108.664 m
317.813 108.106 317.374 107.657 317.177 107.318  c
316.980 106.980 316.882 106.629 316.882 106.265  c
316.882 105.706 317.098 105.225 317.529 104.821  c
317.961 104.416 318.534 104.214 319.250 104.214  c
319.944 104.214 320.502 104.403 320.925 104.779  c
321.349 105.156 321.560 105.585 321.560 106.068  c
321.560 106.390 321.446 106.717 321.217 107.052  c
320.989 107.386 320.513 107.780 319.789 108.232  c
320.534 108.808 321.027 109.261 321.268 109.591  c
321.590 110.022 321.751 110.477 321.751 110.956  c
321.751 111.561 321.520 112.078 321.059 112.508  c
320.597 112.937 319.992 113.152 319.243 113.152  c
318.426 113.152 317.790 112.896 317.333 112.384  c
316.969 111.973 316.787 111.525 316.787 111.038  c
316.787 110.657 316.915 110.280 317.171 109.905  c
317.427 109.531 317.868 109.117 318.494 108.664  c
h
319.491 107.985 m
319.999 107.528 320.320 107.167 320.456 106.903  c
320.591 106.638 320.659 106.339 320.659 106.004  c
320.659 105.560 320.534 105.212 320.284 104.960  c
320.035 104.708 319.694 104.583 319.262 104.583  c
318.831 104.583 318.479 104.707 318.209 104.957  c
317.938 105.207 317.802 105.499 317.802 105.833  c
317.802 106.053 317.858 106.273 317.970 106.493  c
318.083 106.713 318.242 106.923 318.450 107.122  c
h
318.793 108.905 m
318.441 109.202 318.181 109.524 318.012 109.873  c
317.842 110.222 317.758 110.600 317.758 111.006  c
317.758 111.552 317.907 111.989 318.205 112.317  c
318.504 112.645 318.884 112.809 319.345 112.809  c
319.802 112.809 320.168 112.680 320.443 112.422  c
320.718 112.164 320.856 111.851 320.856 111.482  c
320.856 111.178 320.775 110.905 320.614 110.664  c
320.314 110.215 319.707 109.629 318.793 108.905  c
h
323.469 108.747 m
323.469 107.765 323.617 106.920 323.914 106.211  c
324.210 105.502 324.603 104.974 325.094 104.627  c
325.475 104.352 325.869 104.214 326.275 104.214  c
326.935 104.214 327.528 104.551 328.052 105.224  c
328.708 106.057 329.036 107.187 329.036 108.613  c
329.036 109.612 328.892 110.460 328.605 111.159  c
328.317 111.857 327.950 112.364 327.503 112.679  c
327.057 112.994 326.626 113.152 326.211 113.152  c
325.391 113.152 324.707 112.667 324.161 111.698  c
323.700 110.882 323.469 109.898 323.469 108.747  c
h
324.713 108.905 m
324.713 110.090 324.859 111.057 325.151 111.806  c
325.393 112.437 325.752 112.752 326.231 112.752  c
326.459 112.752 326.696 112.649 326.941 112.444  c
327.187 112.239 327.373 111.895 327.500 111.413  c
327.695 110.685 327.792 109.659 327.792 108.334  c
327.792 107.352 327.690 106.533 327.487 105.877  c
327.335 105.391 327.138 105.046 326.897 104.843  c
326.724 104.703 326.514 104.633 326.269 104.633  c
325.981 104.633 325.725 104.762 325.501 105.021  c
325.196 105.372 324.988 105.924 324.878 106.677  c
324.768 107.431 324.713 108.173 324.713 108.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
388.000 94.0000 m
388.000 97.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
383.523 105.236 m
385.618 104.214 l
385.827 104.214 l
385.827 111.482 l
385.827 111.965 385.847 112.265 385.887 112.384  c
385.928 112.502 386.011 112.593 386.138 112.657  c
386.265 112.720 386.523 112.756 386.913 112.765  c
386.913 113.000 l
383.675 113.000 l
383.675 112.765 l
384.082 112.756 384.344 112.721 384.462 112.660  c
384.581 112.599 384.663 112.516 384.710 112.412  c
384.757 112.309 384.780 111.999 384.780 111.482  c
384.780 106.836 l
384.780 106.210 384.759 105.808 384.716 105.630  c
384.687 105.495 384.633 105.395 384.554 105.332  c
384.476 105.268 384.382 105.236 384.272 105.236  c
384.115 105.236 383.897 105.302 383.618 105.433  c
h
389.469 108.747 m
389.469 107.765 389.617 106.920 389.914 106.211  c
390.210 105.502 390.603 104.974 391.094 104.627  c
391.475 104.352 391.869 104.214 392.275 104.214  c
392.935 104.214 393.528 104.551 394.052 105.224  c
394.708 106.057 395.036 107.187 395.036 108.613  c
395.036 109.612 394.892 110.460 394.605 111.159  c
394.317 111.857 393.950 112.364 393.503 112.679  c
393.057 112.994 392.626 113.152 392.211 113.152  c
391.391 113.152 390.707 112.667 390.161 111.698  c
389.700 110.882 389.469 109.898 389.469 108.747  c
h
390.713 108.905 m
390.713 110.090 390.859 111.057 391.151 111.806  c
391.393 112.437 391.752 112.752 392.231 112.752  c
392.459 112.752 392.696 112.649 392.941 112.444  c
393.187 112.239 393.373 111.895 393.500 111.413  c
393.695 110.685 393.792 109.659 393.792 108.334  c
393.792 107.352 393.690 106.533 393.487 105.877  c
393.335 105.391 393.138 105.046 392.897 104.843  c
392.724 104.703 392.514 104.633 392.269 104.633  c
391.981 104.633 391.725 104.762 391.501 105.021  c
391.196 105.372 390.988 105.924 390.878 106.677  c
390.768 107.431 390.713 108.173 390.713 108.905  c
h
396.469 108.747 m
396.469 107.765 396.617 106.920 396.914 106.211  c
397.210 105.502 397.603 104.974 398.094 104.627  c
398.475 104.352 398.869 104.214 399.275 104.214  c
399.935 104.214 400.528 104.551 401.052 105.224  c
401.708 106.057 402.036 107.187 402.036 108.613  c
402.036 109.612 401.892 110.460 401.605 111.159  c
401.317 111.857 400.950 112.364 400.503 112.679  c
400.057 112.994 399.626 113.152 399.211 113.152  c
398.391 113.152 397.707 112.667 397.161 111.698  c
396.700 110.882 396.469 109.898 396.469 108.747  c
h
397.713 108.905 m
397.713 110.090 397.859 111.057 398.151 111.806  c
398.393 112.437 398.752 112.752 399.231 112.752  c
399.459 112.752 399.696 112.649 399.941 112.444  c
400.187 112.239 400.373 111.895 400.500 111.413  c
400.695 110.685 400.792 109.659 400.792 108.334  c
400.792 107.352 400.690 106.533 400.487 105.877  c
400.335 105.391 400.138 105.046 399.897 104.843  c
399.724 104.703 399.514 104.633 399.269 104.633  c
398.981 104.633 398.725 104.762 398.501 105.021  c
398.196 105.372 397.988 105.924 397.878 106.677  c
397.768 107.431 397.713 108.173 397.713 108.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
457.000 94.0000 m
457.000 97.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
453.523 105.236 m
455.618 104.214 l
455.827 104.214 l
455.827 111.482 l
455.827 111.965 455.847 112.265 455.887 112.384  c
455.928 112.502 456.011 112.593 456.138 112.657  c
456.265 112.720 456.523 112.756 456.913 112.765  c
456.913 113.000 l
453.675 113.000 l
453.675 112.765 l
454.082 112.756 454.344 112.721 454.462 112.660  c
454.581 112.599 454.663 112.516 454.710 112.412  c
454.757 112.309 454.780 111.999 454.780 111.482  c
454.780 106.836 l
454.780 106.210 454.759 105.808 454.716 105.630  c
454.687 105.495 454.633 105.395 454.554 105.332  c
454.476 105.268 454.382 105.236 454.272 105.236  c
454.115 105.236 453.897 105.302 453.618 105.433  c
h
464.960 111.343 m
464.357 113.000 l
459.279 113.000 l
459.279 112.765 l
460.773 111.402 461.824 110.289 462.434 109.426  c
463.043 108.563 463.348 107.773 463.348 107.058  c
463.348 106.512 463.181 106.064 462.846 105.712  c
462.512 105.361 462.112 105.186 461.647 105.186  c
461.223 105.186 460.844 105.309 460.507 105.557  c
460.171 105.804 459.922 106.167 459.761 106.646  c
459.526 106.646 l
459.632 105.863 459.904 105.262 460.342 104.843  c
460.780 104.424 461.327 104.214 461.983 104.214  c
462.681 104.214 463.264 104.439 463.732 104.887  c
464.199 105.336 464.433 105.865 464.433 106.474  c
464.433 106.910 464.332 107.346 464.128 107.782  c
463.815 108.467 463.307 109.193 462.605 109.959  c
461.551 111.110 460.893 111.804 460.631 112.041  c
462.878 112.041 l
463.335 112.041 463.656 112.024 463.840 111.990  c
464.024 111.956 464.190 111.888 464.338 111.784  c
464.486 111.680 464.615 111.533 464.725 111.343  c
h
466.469 108.747 m
466.469 107.765 466.617 106.920 466.914 106.211  c
467.210 105.502 467.603 104.974 468.094 104.627  c
468.475 104.352 468.869 104.214 469.275 104.214  c
469.935 104.214 470.528 104.551 471.052 105.224  c
471.708 106.057 472.036 107.187 472.036 108.613  c
472.036 109.612 471.892 110.460 471.605 111.159  c
471.317 111.857 470.950 112.364 470.503 112.679  c
470.057 112.994 469.626 113.152 469.211 113.152  c
468.391 113.152 467.707 112.667 467.161 111.698  c
466.700 110.882 466.469 109.898 466.469 108.747  c
h
467.713 108.905 m
467.713 110.090 467.859 111.057 468.151 111.806  c
468.393 112.437 468.752 112.752 469.231 112.752  c
469.459 112.752 469.696 112.649 469.941 112.444  c
470.187 112.239 470.373 111.895 470.500 111.413  c
470.695 110.685 470.792 109.659 470.792 108.334  c
470.792 107.352 470.690 106.533 470.487 105.877  c
470.335 105.391 470.138 105.046 469.897 104.843  c
469.724 104.703 469.514 104.633 469.269 104.633  c
468.981 104.633 468.725 104.762 468.501 105.021  c
468.196 105.372 467.988 105.924 467.878 106.677  c
467.768 107.431 467.713 108.173 467.713 108.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
76.0000 94.0000 m
76.0000 96.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
145.000 94.0000 m
145.000 96.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
215.000 94.0000 m
215.000 96.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
284.000 94.0000 m
284.000 96.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
353.000 94.0000 m
353.000 96.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
423.000 94.0000 m
423.000 96.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
q
0 J
1 j
newpath
43.0000 94.0000 m
43.0000 3.00242 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 40 8 15 rc
Q
cliprestore
newpath
0 0 m
0 127.000 l
488.000 127.000 l
488.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
43.0000 72.0000 m
40.0000 72.0000 l
S
Q
q
0 w
newpath
43.0000 63.0000 m
40.0000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.5234 64.2368 m
27.6181 63.2148 l
27.8276 63.2148 l
27.8276 70.4829 l
27.8276 70.9653 27.8477 71.2657 27.8879 71.3842  c
27.9281 71.5027 28.0117 71.5937 28.1386 71.6572  c
28.2656 71.7207 28.5237 71.7566 28.9130 71.7651  c
28.9130 72.0000 l
25.6757 72.0000 l
25.6757 71.7651 l
26.0820 71.7566 26.3444 71.7217 26.4628 71.6604  c
26.5813 71.5990 26.6639 71.5165 26.7104 71.4128  c
26.7570 71.3091 26.7802 70.9991 26.7802 70.4829  c
26.7802 65.8364 l
26.7802 65.2101 26.7591 64.8081 26.7168 64.6303  c
26.6871 64.4949 26.6332 64.3955 26.5549 64.3320  c
26.4766 64.2685 26.3824 64.2368 26.2724 64.2368  c
26.1158 64.2368 25.8979 64.3024 25.6186 64.4335  c
h
31.4697 67.7470 m
31.4697 66.7653 31.6178 65.9200 31.9140 65.2111  c
32.2102 64.5023 32.6038 63.9744 33.0947 63.6274  c
33.4755 63.3523 33.8691 63.2148 34.2753 63.2148  c
34.9355 63.2148 35.5279 63.5512 36.0527 64.2241  c
36.7086 65.0577 37.0366 66.1876 37.0366 67.6137  c
37.0366 68.6124 36.8927 69.4609 36.6049 70.1591  c
36.3172 70.8574 35.9501 71.3641 35.5036 71.6794  c
35.0572 71.9947 34.6266 72.1523 34.2119 72.1523  c
33.3909 72.1523 32.7075 71.6678 32.1616 70.6987  c
31.7003 69.8820 31.4697 68.8981 31.4697 67.7470  c
h
32.7138 67.9057 m
32.7138 69.0906 32.8598 70.0576 33.1518 70.8066  c
33.3930 71.4371 33.7527 71.7524 34.2309 71.7524  c
34.4594 71.7524 34.6964 71.6498 34.9418 71.4445  c
35.1873 71.2393 35.3735 70.8955 35.5004 70.4130  c
35.6951 69.6852 35.7924 68.6590 35.7924 67.3344  c
35.7924 66.3527 35.6909 65.5338 35.4877 64.8779  c
35.3354 64.3912 35.1386 64.0463 34.8974 63.8432  c
34.7239 63.7036 34.5144 63.6337 34.2690 63.6337  c
33.9812 63.6337 33.7252 63.7628 33.5009 64.0210  c
33.1962 64.3722 32.9889 64.9244 32.8789 65.6777  c
32.7688 66.4309 32.7138 67.1736 32.7138 67.9057  c
h
38.4697 67.7470 m
38.4697 66.7653 38.6178 65.9200 38.9140 65.2111  c
39.2102 64.5023 39.6038 63.9744 40.0947 63.6274  c
40.4755 63.3523 40.8691 63.2148 41.2753 63.2148  c
41.9355 63.2148 42.5279 63.5512 43.0527 64.2241  c
43.7086 65.0577 44.0366 66.1876 44.0366 67.6137  c
44.0366 68.6124 43.8927 69.4609 43.6049 70.1591  c
43.3172 70.8574 42.9501 71.3641 42.5036 71.6794  c
42.0572 71.9947 41.6266 72.1523 41.2119 72.1523  c
40.3909 72.1523 39.7075 71.6678 39.1616 70.6987  c
38.7003 69.8820 38.4697 68.8981 38.4697 67.7470  c
h
39.7138 67.9057 m
39.7138 69.0906 39.8598 70.0576 40.1518 70.8066  c
40.3930 71.4371 40.7527 71.7524 41.2309 71.7524  c
41.4594 71.7524 41.6964 71.6498 41.9418 71.4445  c
42.1873 71.2393 42.3735 70.8955 42.5004 70.4130  c
42.6951 69.6852 42.7924 68.6590 42.7924 67.3344  c
42.7924 66.3527 42.6909 65.5338 42.4877 64.8779  c
42.3354 64.3912 42.1386 64.0463 41.8974 63.8432  c
41.7239 63.7036 41.5144 63.6337 41.2690 63.6337  c
40.9812 63.6337 40.7252 63.7628 40.5009 64.0210  c
40.1962 64.3722 39.9889 64.9244 39.8789 65.6777  c
39.7688 66.4309 39.7138 67.1736 39.7138 67.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
43.0000 41.0000 m
40.0000 41.0000 l
S
Q
q
0 w
newpath
43.0000 32.0000 m
40.0000 32.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.5234 33.2368 m
20.6181 32.2148 l
20.8276 32.2148 l
20.8276 39.4829 l
20.8276 39.9653 20.8477 40.2657 20.8879 40.3842  c
20.9281 40.5027 21.0117 40.5937 21.1386 40.6572  c
21.2656 40.7207 21.5237 40.7566 21.9130 40.7651  c
21.9130 41.0000 l
18.6757 41.0000 l
18.6757 40.7651 l
19.0820 40.7566 19.3444 40.7217 19.4628 40.6604  c
19.5813 40.5990 19.6639 40.5165 19.7104 40.4128  c
19.7570 40.3091 19.7802 39.9991 19.7802 39.4829  c
19.7802 34.8364 l
19.7802 34.2101 19.7591 33.8081 19.7168 33.6303  c
19.6871 33.4949 19.6332 33.3955 19.5549 33.3320  c
19.4766 33.2685 19.3824 33.2368 19.2724 33.2368  c
19.1158 33.2368 18.8979 33.3024 18.6186 33.4335  c
h
24.4697 36.7470 m
24.4697 35.7653 24.6178 34.9200 24.9140 34.2111  c
25.2102 33.5023 25.6038 32.9744 26.0947 32.6274  c
26.4755 32.3523 26.8691 32.2148 27.2753 32.2148  c
27.9355 32.2148 28.5279 32.5512 29.0527 33.2241  c
29.7086 34.0577 30.0366 35.1876 30.0366 36.6137  c
30.0366 37.6124 29.8927 38.4609 29.6049 39.1591  c
29.3172 39.8574 28.9501 40.3641 28.5036 40.6794  c
28.0572 40.9947 27.6266 41.1523 27.2119 41.1523  c
26.3909 41.1523 25.7075 40.6678 25.1616 39.6987  c
24.7003 38.8820 24.4697 37.8981 24.4697 36.7470  c
h
25.7138 36.9057 m
25.7138 38.0906 25.8598 39.0576 26.1518 39.8066  c
26.3930 40.4371 26.7527 40.7524 27.2309 40.7524  c
27.4594 40.7524 27.6964 40.6498 27.9418 40.4445  c
28.1873 40.2393 28.3735 39.8955 28.5004 39.4130  c
28.6951 38.6852 28.7924 37.6590 28.7924 36.3344  c
28.7924 35.3527 28.6909 34.5338 28.4877 33.8779  c
28.3354 33.3912 28.1386 33.0463 27.8974 32.8432  c
27.7239 32.7036 27.5144 32.6337 27.2690 32.6337  c
26.9812 32.6337 26.7252 32.7628 26.5009 33.0210  c
26.1962 33.3722 25.9889 33.9244 25.8789 34.6777  c
25.7688 35.4309 25.7138 36.1736 25.7138 36.9057  c
h
31.4697 36.7470 m
31.4697 35.7653 31.6178 34.9200 31.9140 34.2111  c
32.2102 33.5023 32.6038 32.9744 33.0947 32.6274  c
33.4755 32.3523 33.8691 32.2148 34.2753 32.2148  c
34.9355 32.2148 35.5279 32.5512 36.0527 33.2241  c
36.7086 34.0577 37.0366 35.1876 37.0366 36.6137  c
37.0366 37.6124 36.8927 38.4609 36.6049 39.1591  c
36.3172 39.8574 35.9501 40.3641 35.5036 40.6794  c
35.0572 40.9947 34.6266 41.1523 34.2119 41.1523  c
33.3909 41.1523 32.7075 40.6678 32.1616 39.6987  c
31.7003 38.8820 31.4697 37.8981 31.4697 36.7470  c
h
32.7138 36.9057 m
32.7138 38.0906 32.8598 39.0576 33.1518 39.8066  c
33.3930 40.4371 33.7527 40.7524 34.2309 40.7524  c
34.4594 40.7524 34.6964 40.6498 34.9418 40.4445  c
35.1873 40.2393 35.3735 39.8955 35.5004 39.4130  c
35.6951 38.6852 35.7924 37.6590 35.7924 36.3344  c
35.7924 35.3527 35.6909 34.5338 35.4877 33.8779  c
35.3354 33.3912 35.1386 33.0463 34.8974 32.8432  c
34.7239 32.7036 34.5144 32.6337 34.2690 32.6337  c
33.9812 32.6337 33.7252 32.7628 33.5009 33.0210  c
33.1962 33.3722 32.9889 33.9244 32.8789 34.6777  c
32.7688 35.4309 32.7138 36.1736 32.7138 36.9057  c
h
38.4697 36.7470 m
38.4697 35.7653 38.6178 34.9200 38.9140 34.2111  c
39.2102 33.5023 39.6038 32.9744 40.0947 32.6274  c
40.4755 32.3523 40.8691 32.2148 41.2753 32.2148  c
41.9355 32.2148 42.5279 32.5512 43.0527 33.2241  c
43.7086 34.0577 44.0366 35.1876 44.0366 36.6137  c
44.0366 37.6124 43.8927 38.4609 43.6049 39.1591  c
43.3172 39.8574 42.9501 40.3641 42.5036 40.6794  c
42.0572 40.9947 41.6266 41.1523 41.2119 41.1523  c
40.3909 41.1523 39.7075 40.6678 39.1616 39.6987  c
38.7003 38.8820 38.4697 37.8981 38.4697 36.7470  c
h
39.7138 36.9057 m
39.7138 38.0906 39.8598 39.0576 40.1518 39.8066  c
40.3930 40.4371 40.7527 40.7524 41.2309 40.7524  c
41.4594 40.7524 41.6964 40.6498 41.9418 40.4445  c
42.1873 40.2393 42.3735 39.8955 42.5004 39.4130  c
42.6951 38.6852 42.7924 37.6590 42.7924 36.3344  c
42.7924 35.3527 42.6909 34.5338 42.4877 33.8779  c
42.3354 33.3912 42.1386 33.0463 41.8974 32.8432  c
41.7239 32.7036 41.5144 32.6337 41.2690 32.6337  c
40.9812 32.6337 40.7252 32.7628 40.5009 33.0210  c
40.1962 33.3722 39.9889 33.9244 39.8789 34.6777  c
39.7688 35.4309 39.7138 36.1736 39.7138 36.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
43.0000 10.0000 m
40.0000 10.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
22.6430 11.3925 m
22.1479 12.4716 l
19.5581 12.4716 l
18.9931 13.6269 l
20.1145 13.7919 21.0032 14.2088 21.6591 14.8774  c
22.2220 15.4529 22.5034 16.1300 22.5034 16.9086  c
22.5034 17.3614 22.4113 17.7804 22.2272 18.1655  c
22.0432 18.5506 21.8115 18.8785 21.5322 19.1494  c
21.2529 19.4202 20.9418 19.6381 20.5991 19.8032  c
20.1124 20.0359 19.6131 20.1523 19.1010 20.1523  c
18.5848 20.1523 18.2092 20.0645 17.9743 19.8889  c
17.7395 19.7133 17.6220 19.5196 17.6220 19.3081  c
17.6220 19.1896 17.6707 19.0848 17.7680 18.9939  c
17.8654 18.9029 17.9881 18.8574 18.1362 18.8574  c
18.2462 18.8574 18.3425 18.8743 18.4250 18.9082  c
18.5075 18.9420 18.6482 19.0288 18.8471 19.1684  c
19.1645 19.3885 19.4861 19.4985 19.8120 19.4985  c
20.3071 19.4985 20.7419 19.3112 21.1164 18.9367  c
21.4909 18.5622 21.6782 18.1062 21.6782 17.5688  c
21.6782 17.0483 21.5110 16.5627 21.1767 16.1120  c
20.8424 15.6613 20.3811 15.3133 19.7929 15.0678  c
19.3317 14.8774 18.7032 14.7674 17.9077 14.7377  c
19.5581 11.3925 l
h
24.4697 15.7470 m
24.4697 14.7653 24.6178 13.9200 24.9140 13.2111  c
25.2102 12.5023 25.6038 11.9744 26.0947 11.6274  c
26.4755 11.3523 26.8691 11.2148 27.2753 11.2148  c
27.9355 11.2148 28.5279 11.5512 29.0527 12.2241  c
29.7086 13.0577 30.0366 14.1876 30.0366 15.6137  c
30.0366 16.6124 29.8927 17.4609 29.6049 18.1591  c
29.3172 18.8574 28.9501 19.3641 28.5036 19.6794  c
28.0572 19.9947 27.6266 20.1523 27.2119 20.1523  c
26.3909 20.1523 25.7075 19.6678 25.1616 18.6987  c
24.7003 17.8820 24.4697 16.8981 24.4697 15.7470  c
h
25.7138 15.9057 m
25.7138 17.0906 25.8598 18.0576 26.1518 18.8066  c
26.3930 19.4371 26.7527 19.7524 27.2309 19.7524  c
27.4594 19.7524 27.6964 19.6498 27.9418 19.4445  c
28.1873 19.2393 28.3735 18.8955 28.5004 18.4130  c
28.6951 17.6852 28.7924 16.6590 28.7924 15.3344  c
28.7924 14.3527 28.6909 13.5338 28.4877 12.8779  c
28.3354 12.3912 28.1386 12.0463 27.8974 11.8432  c
27.7239 11.7036 27.5144 11.6337 27.2690 11.6337  c
26.9812 11.6337 26.7252 11.7628 26.5009 12.0210  c
26.1962 12.3722 25.9889 12.9244 25.8789 13.6777  c
25.7688 14.4309 25.7138 15.1736 25.7138 15.9057  c
h
31.4697 15.7470 m
31.4697 14.7653 31.6178 13.9200 31.9140 13.2111  c
32.2102 12.5023 32.6038 11.9744 33.0947 11.6274  c
33.4755 11.3523 33.8691 11.2148 34.2753 11.2148  c
34.9355 11.2148 35.5279 11.5512 36.0527 12.2241  c
36.7086 13.0577 37.0366 14.1876 37.0366 15.6137  c
37.0366 16.6124 36.8927 17.4609 36.6049 18.1591  c
36.3172 18.8574 35.9501 19.3641 35.5036 19.6794  c
35.0572 19.9947 34.6266 20.1523 34.2119 20.1523  c
33.3909 20.1523 32.7075 19.6678 32.1616 18.6987  c
31.7003 17.8820 31.4697 16.8981 31.4697 15.7470  c
h
32.7138 15.9057 m
32.7138 17.0906 32.8598 18.0576 33.1518 18.8066  c
33.3930 19.4371 33.7527 19.7524 34.2309 19.7524  c
34.4594 19.7524 34.6964 19.6498 34.9418 19.4445  c
35.1873 19.2393 35.3735 18.8955 35.5004 18.4130  c
35.6951 17.6852 35.7924 16.6590 35.7924 15.3344  c
35.7924 14.3527 35.6909 13.5338 35.4877 12.8779  c
35.3354 12.3912 35.1386 12.0463 34.8974 11.8432  c
34.7239 11.7036 34.5144 11.6337 34.2690 11.6337  c
33.9812 11.6337 33.7252 11.7628 33.5009 12.0210  c
33.1962 12.3722 32.9889 12.9244 32.8789 13.6777  c
32.7688 14.4309 32.7138 15.1736 32.7138 15.9057  c
h
38.4697 15.7470 m
38.4697 14.7653 38.6178 13.9200 38.9140 13.2111  c
39.2102 12.5023 39.6038 11.9744 40.0947 11.6274  c
40.4755 11.3523 40.8691 11.2148 41.2753 11.2148  c
41.9355 11.2148 42.5279 11.5512 43.0527 12.2241  c
43.7086 13.0577 44.0366 14.1876 44.0366 15.6137  c
44.0366 16.6124 43.8927 17.4609 43.6049 18.1591  c
43.3172 18.8574 42.9501 19.3641 42.5036 19.6794  c
42.0572 19.9947 41.6266 20.1523 41.2119 20.1523  c
40.3909 20.1523 39.7075 19.6678 39.1616 18.6987  c
38.7003 17.8820 38.4697 16.8981 38.4697 15.7470  c
h
39.7138 15.9057 m
39.7138 17.0906 39.8598 18.0576 40.1518 18.8066  c
40.3930 19.4371 40.7527 19.7524 41.2309 19.7524  c
41.4594 19.7524 41.6964 19.6498 41.9418 19.4445  c
42.1873 19.2393 42.3735 18.8955 42.5004 18.4130  c
42.6951 17.6852 42.7924 16.6590 42.7924 15.3344  c
42.7924 14.3527 42.6909 13.5338 42.4877 12.8779  c
42.3354 12.3912 42.1386 12.0463 41.8974 11.8432  c
41.7239 11.7036 41.5144 11.6337 41.2690 11.6337  c
40.9812 11.6337 40.7252 11.7628 40.5009 12.0210  c
40.1962 12.3722 39.9889 12.9244 39.8789 13.6777  c
39.7688 14.4309 39.7138 15.1736 39.7138 15.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 498 137 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
