%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 287 575 504
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ15“ú 18Žž29•ª27•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
276 107 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
276.000 0 l
276.000 107.000 l
0 107.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 266 97 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
28.0000 6.05032 235.992 57.9496 rc
newpath
29.0000 60.5959 m
62.2846 54.7575 l
95.5692 37.2423 l
128.853 8.05033 l
162.138 37.2423 l
195.423 54.7575 l
228.707 60.5959 l
261.992 63.0000 l
S
cliprestore
newpath
0 0 m
0 97.0000 l
266.000 97.0000 l
266.000 0 l
h
W
Q
q
28.0000 6.05032 235.992 57.9496 rc
1.00000 0 0 RG
newpath
29.0000 62.9092 m
30.2249 62.8397 l
31.2908 62.7776 l
32.4894 62.7058 l
33.6961 62.6315 l
34.8969 62.5554 l
36.0103 62.4828 l
37.1631 62.4055 l
38.3554 62.3233 l
39.5438 62.2389 l
40.7662 62.1494 l
41.8429 62.0683 l
43.0551 61.9743 l
44.2722 61.8769 l
45.4451 61.7801 l
46.5102 61.6897 l
47.7768 61.5788 l
48.8497 61.4818 l
50.0977 61.3656 l
51.2025 61.2593 l
52.4146 61.1391 l
53.5688 61.0208 l
54.7730 60.8933 l
55.8789 60.7723 l
57.0718 60.6376 l
58.3108 60.4928 l
59.3894 60.3625 l
60.5543 60.2171 l
61.7578 60.0617 l
62.9352 59.9043 l
64.0743 59.7466 l
65.3392 59.5652 l
66.4757 59.3961 l
67.6891 59.2091 l
68.7887 59.0335 l
69.9909 58.8347 l
71.1220 58.6406 l
72.3043 58.4303 l
73.4603 58.2169 l
74.6705 57.9849 l
75.8360 57.7528 l
77.0279 57.5062 l
78.2100 57.2519 l
79.2962 57.0094 l
80.5411 56.7206 l
81.6546 56.4518 l
82.8417 56.1540 l
83.9780 55.8575 l
85.2397 55.5146 l
86.3322 55.2054 l
87.5723 54.8401 l
88.7025 54.4932 l
89.9387 54.0978 l
91.0053 53.7427 l
92.2201 53.3216 l
93.3935 52.8974 l
94.5662 52.4556 l
95.7345 51.9968 l
96.8569 51.5377 l
98.0703 51.0205 l
99.2267 50.5064 l
100.443 49.9422 l
101.545 49.4101 l
102.763 48.7977 l
103.929 48.1862 l
105.092 47.5511 l
106.308 46.8603 l
107.427 46.1983 l
108.573 45.4944 l
109.839 44.6860 l
110.985 43.9253 l
112.157 43.1188 l
113.348 42.2690 l
114.444 41.4616 l
115.612 40.5735 l
116.771 39.6648 l
118.010 38.6637 l
119.104 37.7566 l
120.366 36.6845 l
121.505 35.6957 l
122.632 34.7003 l
123.844 33.6145 l
125.061 32.5127 l
127.344 30.4339 l
128.491 29.3945 l
129.735 28.2816 l
130.811 27.3370 l
132.047 26.2821 l
133.209 25.3283 l
134.360 24.4289 l
135.511 23.5828 l
136.686 22.7849 l
137.931 22.0211 l
139.073 21.4040 l
140.200 20.8804 l
141.404 20.4224 l
142.606 20.0765 l
143.146 19.9588 l
143.685 19.8649 l
144.324 19.7849 l
144.963 19.7390 l
145.498 19.7271 l
146.032 19.7392 l
146.658 19.7840 l
147.283 19.8614 l
147.880 19.9655 l
148.477 20.0988 l
149.543 20.4076 l
150.741 20.8591 l
151.948 21.4187 l
153.149 22.0724 l
154.262 22.7570 l
155.415 23.5370 l
156.607 24.4105 l
157.796 25.3391 l
159.018 26.3441 l
160.095 27.2631 l
161.307 28.3264 l
162.524 29.4161 l
163.697 30.4790 l
166.029 32.6022 l
167.102 33.5735 l
168.350 34.6921 l
169.454 35.6681 l
170.667 36.7202 l
171.821 37.7008 l
173.025 38.6997 l
174.131 39.5932 l
175.324 40.5303 l
176.563 41.4731 l
177.641 42.2679 l
178.806 43.0989 l
180.010 43.9274 l
181.187 44.7085 l
182.326 45.4368 l
183.591 46.2144 l
184.728 46.8857 l
185.941 47.5746 l
187.041 48.1746 l
188.243 48.8050 l
189.374 49.3745 l
190.556 49.9461 l
191.712 50.4824 l
192.922 51.0209 l
194.088 51.5181 l
195.280 52.0058 l
196.462 52.4696 l
197.548 52.8789 l
198.793 53.3292 l
199.907 53.7155 l
201.094 54.1111 l
202.230 54.4746 l
203.492 54.8618 l
204.584 55.1837 l
205.824 55.5346 l
206.954 55.8417 l
208.191 56.1644 l
209.257 56.4321 l
210.472 56.7256 l
211.646 56.9980 l
212.818 57.2599 l
213.987 57.5109 l
215.109 57.7433 l
216.322 57.9851 l
217.479 58.2069 l
218.696 58.4318 l
219.798 58.6280 l
221.015 58.8370 l
222.181 59.0300 l
223.345 59.2157 l
224.560 59.4028 l
225.679 59.5691 l
226.826 59.7336 l
228.091 59.9090 l
229.237 60.0621 l
230.409 60.2135 l
231.601 60.3623 l
232.696 60.4946 l
233.864 60.6312 l
235.023 60.7623 l
236.263 60.8980 l
237.357 61.0138 l
238.619 61.1433 l
239.758 61.2563 l
240.885 61.3647 l
242.097 61.4777 l
243.313 61.5875 l
244.421 61.6844 l
245.596 61.7843 l
246.744 61.8789 l
247.987 61.9783 l
249.064 62.0618 l
250.300 62.1549 l
251.462 62.2399 l
252.612 62.3216 l
253.764 62.4011 l
254.938 62.4799 l
256.184 62.5611 l
257.325 62.6333 l
258.452 62.7028 l
259.657 62.7750 l
260.859 62.8450 l
261.992 62.9092 l
S
cliprestore
newpath
0 0 m
0 97.0000 l
266.000 97.0000 l
266.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
26.0000 66.0000 m
261.992 66.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
138 81 14 15 rc
newpath
144.278 87.2553 m
144.486 87.4754 144.642 87.6954 144.748 87.9155  c
144.824 88.0678 144.949 88.4677 145.123 89.1152  c
145.681 88.2773 l
145.829 88.0742 146.009 87.8806 146.221 87.6965  c
146.432 87.5124 146.619 87.3865 146.779 87.3188  c
146.881 87.2765 146.993 87.2553 147.116 87.2553  c
147.298 87.2553 147.443 87.3040 147.551 87.4013  c
147.658 87.4987 147.712 87.6171 147.712 87.7568  c
147.712 87.9176 147.681 88.0276 147.617 88.0869  c
147.499 88.1927 147.363 88.2456 147.211 88.2456  c
147.122 88.2456 147.027 88.2265 146.925 88.1884  c
146.726 88.1207 146.593 88.0869 146.525 88.0869  c
146.424 88.0869 146.303 88.1461 146.164 88.2646  c
145.901 88.4847 145.588 88.9099 145.224 89.5405  c
145.745 91.7241 l
145.825 92.0584 145.893 92.2583 145.948 92.3239  c
146.003 92.3895 146.058 92.4223 146.113 92.4223  c
146.202 92.4223 146.305 92.3737 146.424 92.2763  c
146.657 92.0817 146.856 91.8278 147.021 91.5146  c
147.243 91.6289 l
146.976 92.1282 146.638 92.5429 146.227 92.8730  c
145.994 93.0592 145.798 93.1523 145.637 93.1523  c
145.400 93.1523 145.211 93.0190 145.072 92.7524  c
144.983 92.5874 144.799 91.8764 144.520 90.6196  c
143.859 91.7664 143.330 92.5048 142.933 92.8349  c
142.675 93.0465 142.425 93.1523 142.184 93.1523  c
142.014 93.1523 141.860 93.0909 141.720 92.9682  c
141.619 92.8751 141.568 92.7503 141.568 92.5937  c
141.568 92.4541 141.614 92.3377 141.708 92.2446  c
141.801 92.1515 141.915 92.1049 142.050 92.1049  c
142.186 92.1049 142.330 92.1726 142.482 92.3081  c
142.592 92.4054 142.677 92.4541 142.736 92.4541  c
142.787 92.4541 142.852 92.4202 142.933 92.3525  c
143.132 92.1917 143.402 91.8447 143.745 91.3115  c
144.088 90.7783 144.312 90.3932 144.418 90.1562  c
144.156 89.1279 144.014 88.5841 143.993 88.5249  c
143.895 88.2498 143.768 88.0551 143.612 87.9409  c
143.455 87.8266 143.225 87.7695 142.920 87.7695  c
142.823 87.7695 142.710 87.7737 142.584 87.7822  c
142.584 87.5537 l
h
f
Q
cliprestore
newpath
0 0 m
0 97.0000 l
266.000 97.0000 l
266.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
29.0000 66.0000 m
29.0000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
32.5234 76.2368 m
34.6181 75.2148 l
34.8276 75.2148 l
34.8276 82.4829 l
34.8276 82.9653 34.8477 83.2657 34.8879 83.3842  c
34.9281 83.5027 35.0117 83.5937 35.1386 83.6572  c
35.2656 83.7207 35.5237 83.7566 35.9130 83.7651  c
35.9130 84.0000 l
32.6757 84.0000 l
32.6757 83.7651 l
33.0820 83.7566 33.3444 83.7217 33.4628 83.6604  c
33.5813 83.5990 33.6639 83.5165 33.7104 83.4128  c
33.7570 83.3091 33.7802 82.9991 33.7802 82.4829  c
33.7802 77.8364 l
33.7802 77.2101 33.7591 76.8081 33.7168 76.6303  c
33.6871 76.4949 33.6332 76.3955 33.5549 76.3320  c
33.4766 76.2685 33.3824 76.2368 33.2724 76.2368  c
33.1158 76.2368 32.8979 76.3024 32.6186 76.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
62.0000 66.0000 m
62.0000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
69.9604 82.3432 m
69.3574 84.0000 l
64.2793 84.0000 l
64.2793 83.7651 l
65.7731 82.4025 66.8247 81.2895 67.4340 80.4262  c
68.0434 79.5629 68.3481 78.7737 68.3481 78.0585  c
68.3481 77.5127 68.1809 77.0641 67.8466 76.7128  c
67.5123 76.3616 67.1124 76.1860 66.6469 76.1860  c
66.2238 76.1860 65.8439 76.3098 65.5075 76.5573  c
65.1711 76.8049 64.9225 77.1678 64.7617 77.6460  c
64.5268 77.6460 l
64.6326 76.8631 64.9045 76.2622 65.3425 75.8432  c
65.7805 75.4243 66.3274 75.2148 66.9834 75.2148  c
67.6816 75.2148 68.2645 75.4391 68.7321 75.8877  c
69.1997 76.3362 69.4335 76.8652 69.4335 77.4746  c
69.4335 77.9104 69.3320 78.3463 69.1289 78.7822  c
68.8157 79.4677 68.3079 80.1935 67.6054 80.9594  c
66.5517 82.1105 65.8937 82.8045 65.6313 83.0415  c
67.8784 83.0415 l
68.3354 83.0415 68.6560 83.0245 68.8400 82.9907  c
69.0241 82.9568 69.1902 82.8881 69.3383 82.7844  c
69.4864 82.6807 69.6155 82.5336 69.7255 82.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
96.0000 66.0000 m
96.0000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
97.6601 77.0302 m
97.9056 76.4505 98.2155 76.0030 98.5900 75.6877  c
98.9646 75.3724 99.4311 75.2148 99.9897 75.2148  c
100.679 75.2148 101.208 75.4391 101.576 75.8877  c
101.856 76.2220 101.995 76.5795 101.995 76.9604  c
101.995 77.5867 101.602 78.2342 100.814 78.9028  c
101.343 79.1101 101.743 79.4064 102.014 79.7915  c
102.285 80.1766 102.420 80.6293 102.420 81.1499  c
102.420 81.8946 102.183 82.5400 101.710 83.0859  c
101.092 83.7968 100.197 84.1523 99.0249 84.1523  c
98.4451 84.1523 98.0505 84.0804 97.8410 83.9365  c
97.6315 83.7926 97.5268 83.6381 97.5268 83.4731  c
97.5268 83.3504 97.5765 83.2425 97.6760 83.1494  c
97.7754 83.0563 97.8950 83.0097 98.0346 83.0097  c
98.1404 83.0097 98.2483 83.0266 98.3584 83.0605  c
98.4303 83.0817 98.5932 83.1589 98.8471 83.2922  c
99.1010 83.4255 99.2766 83.5048 99.3740 83.5302  c
99.5306 83.5768 99.6977 83.6001 99.8754 83.6001  c
100.307 83.6001 100.682 83.4329 101.002 83.0986  c
101.321 82.7643 101.481 82.3686 101.481 81.9116  c
101.481 81.5773 101.407 81.2514 101.259 80.9340  c
101.149 80.6971 101.028 80.5172 100.897 80.3945  c
100.715 80.2252 100.465 80.0718 100.148 79.9343  c
99.8310 79.7967 99.5073 79.7280 99.1772 79.7280  c
98.9741 79.7280 l
98.9741 79.5376 l
99.3084 79.4952 99.6438 79.3746 99.9802 79.1757  c
100.316 78.9768 100.561 78.7377 100.713 78.4585  c
100.865 78.1792 100.941 77.8724 100.941 77.5380  c
100.941 77.1022 100.805 76.7499 100.532 76.4812  c
100.259 76.2124 99.9199 76.0781 99.5136 76.0781  c
98.8577 76.0781 98.3097 76.4293 97.8696 77.1318  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
129.000 66.0000 m
129.000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
136.049 80.8261 m
136.049 81.7275 l
134.894 81.7275 l
134.894 84.0000 l
133.846 84.0000 l
133.846 81.7275 l
130.203 81.7275 l
130.203 80.9150 l
134.195 75.2148 l
134.894 75.2148 l
134.894 80.8261 l
h
133.846 80.8261 m
133.846 76.5542 l
130.825 80.8261 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
162.000 66.0000 m
162.000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
169.643 75.3925 m
169.147 76.4716 l
166.558 76.4716 l
165.993 77.6269 l
167.114 77.7919 168.003 78.2088 168.659 78.8774  c
169.222 79.4529 169.503 80.1300 169.503 80.9086  c
169.503 81.3614 169.411 81.7804 169.227 82.1655  c
169.043 82.5506 168.811 82.8785 168.532 83.1494  c
168.252 83.4202 167.941 83.6381 167.599 83.8032  c
167.112 84.0359 166.613 84.1523 166.101 84.1523  c
165.584 84.1523 165.209 84.0645 164.974 83.8889  c
164.739 83.7133 164.622 83.5196 164.622 83.3081  c
164.622 83.1896 164.670 83.0848 164.768 82.9939  c
164.865 82.9029 164.988 82.8574 165.136 82.8574  c
165.246 82.8574 165.342 82.8743 165.425 82.9082  c
165.507 82.9420 165.648 83.0288 165.847 83.1684  c
166.164 83.3885 166.486 83.4985 166.812 83.4985  c
167.307 83.4985 167.741 83.3112 168.116 82.9367  c
168.491 82.5622 168.678 82.1062 168.678 81.5688  c
168.678 81.0483 168.511 80.5627 168.176 80.1120  c
167.842 79.6613 167.381 79.3133 166.793 79.0678  c
166.331 78.8774 165.703 78.7674 164.907 78.7377  c
166.558 75.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
195.000 66.0000 m
195.000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
202.827 75.2148 m
202.827 75.4497 l
202.268 75.5047 201.812 75.6158 201.459 75.7829  c
201.105 75.9501 200.756 76.2050 200.411 76.5478  c
200.067 76.8906 199.781 77.2725 199.554 77.6936  c
199.328 78.1146 199.139 78.6150 198.986 79.1948  c
199.596 78.7758 200.207 78.5664 200.821 78.5664  c
201.409 78.5664 201.919 78.8033 202.351 79.2773  c
202.782 79.7513 202.998 80.3606 202.998 81.1054  c
202.998 81.8248 202.780 82.4807 202.344 83.0732  c
201.820 83.7926 201.126 84.1523 200.262 84.1523  c
199.674 84.1523 199.175 83.9576 198.764 83.5683  c
197.960 82.8108 197.558 81.8291 197.558 80.6230  c
197.558 79.8528 197.713 79.1207 198.022 78.4267  c
198.330 77.7327 198.772 77.1170 199.345 76.5795  c
199.918 76.0421 200.467 75.6803 200.992 75.4941  c
201.517 75.3079 202.006 75.2148 202.459 75.2148  c
h
198.878 79.6582 m
198.802 80.2294 198.764 80.6907 198.764 81.0419  c
198.764 81.4482 198.839 81.8894 198.990 82.3654  c
199.140 82.8415 199.363 83.2192 199.659 83.4985  c
199.875 83.6974 200.137 83.7968 200.446 83.7968  c
200.814 83.7968 201.144 83.6233 201.433 83.2763  c
201.723 82.9293 201.868 82.4342 201.868 81.7910  c
201.868 81.0673 201.724 80.4410 201.437 79.9121  c
201.149 79.3831 200.740 79.1186 200.211 79.1186  c
200.051 79.1186 199.878 79.1525 199.694 79.2202  c
199.510 79.2879 199.238 79.4339 198.878 79.6582  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
229.000 66.0000 m
229.000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
231.307 75.3925 m
235.922 75.3925 l
235.922 75.6337 l
233.053 84.1777 l
232.342 84.1777 l
234.913 76.4272 l
232.545 76.4272 l
232.067 76.4272 231.726 76.4843 231.523 76.5986  c
231.168 76.7932 230.882 77.0937 230.666 77.5000  c
230.482 77.4301 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
262.000 66.0000 m
262.000 69.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
265.494 79.6645 m
264.813 79.1059 264.374 78.6573 264.177 78.3188  c
263.980 77.9803 263.882 77.6290 263.882 77.2651  c
263.882 76.7065 264.098 76.2251 264.529 75.8210  c
264.961 75.4169 265.534 75.2148 266.250 75.2148  c
266.944 75.2148 267.502 75.4031 267.925 75.7797  c
268.349 76.1564 268.560 76.5859 268.560 77.0683  c
268.560 77.3899 268.446 77.7179 268.217 78.0522  c
267.989 78.3865 267.513 78.7801 266.789 79.2329  c
267.534 79.8084 268.027 80.2612 268.268 80.5913  c
268.590 81.0229 268.751 81.4778 268.751 81.9560  c
268.751 82.5612 268.520 83.0785 268.059 83.5080  c
267.597 83.9375 266.992 84.1523 266.243 84.1523  c
265.426 84.1523 264.790 83.8963 264.333 83.3842  c
263.969 82.9738 263.787 82.5252 263.787 82.0385  c
263.787 81.6577 263.915 81.2800 264.171 80.9055  c
264.427 80.5310 264.868 80.1173 265.494 79.6645  c
h
266.491 78.9853 m
266.999 78.5283 267.320 78.1675 267.456 77.9030  c
267.591 77.6385 267.659 77.3391 267.659 77.0048  c
267.659 76.5605 267.534 76.2124 267.284 75.9606  c
267.035 75.7089 266.694 75.5830 266.262 75.5830  c
265.831 75.5830 265.479 75.7078 265.209 75.9575  c
264.938 76.2071 264.802 76.4991 264.802 76.8335  c
264.802 77.0535 264.858 77.2736 264.970 77.4936  c
265.083 77.7137 265.242 77.9231 265.450 78.1220  c
h
265.793 79.9057 m
265.441 80.2019 265.181 80.5246 265.012 80.8737  c
264.842 81.2229 264.758 81.6005 264.758 82.0068  c
264.758 82.5527 264.907 82.9896 265.205 83.3176  c
265.504 83.6455 265.884 83.8095 266.345 83.8095  c
266.802 83.8095 267.168 83.6805 267.443 83.4223  c
267.718 83.1642 267.856 82.8510 267.856 82.4829  c
267.856 82.1782 267.775 81.9052 267.614 81.6640  c
267.314 81.2154 266.707 80.6293 265.793 79.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
46.0000 66.0000 m
46.0000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
79.0000 66.0000 m
79.0000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
112.000 66.0000 m
112.000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
145.000 66.0000 m
145.000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
179.000 66.0000 m
179.000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
212.000 66.0000 m
212.000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
245.000 66.0000 m
245.000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
26.0000 66.0000 m
26.0000 8.05033 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 28 8 15 rc
Q
cliprestore
newpath
0 0 m
0 97.0000 l
266.000 97.0000 l
266.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
26.0000 61.0000 m
23.0000 61.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
27.9604 68.3432 m
27.3574 70.0000 l
22.2793 70.0000 l
22.2793 69.7651 l
23.7731 68.4025 24.8247 67.2895 25.4340 66.4262  c
26.0434 65.5629 26.3481 64.7737 26.3481 64.0585  c
26.3481 63.5127 26.1809 63.0641 25.8466 62.7128  c
25.5123 62.3616 25.1124 62.1860 24.6469 62.1860  c
24.2238 62.1860 23.8439 62.3098 23.5075 62.5573  c
23.1711 62.8049 22.9225 63.1678 22.7617 63.6460  c
22.5268 63.6460 l
22.6326 62.8631 22.9045 62.2622 23.3425 61.8432  c
23.7805 61.4243 24.3274 61.2148 24.9834 61.2148  c
25.6816 61.2148 26.2645 61.4391 26.7321 61.8877  c
27.1997 62.3362 27.4335 62.8652 27.4335 63.4746  c
27.4335 63.9104 27.3320 64.3463 27.1289 64.7822  c
26.8157 65.4677 26.3079 66.1935 25.6054 66.9594  c
24.5517 68.1105 23.8937 68.8045 23.6313 69.0415  c
25.8784 69.0415 l
26.3354 69.0415 26.6560 69.0245 26.8400 68.9907  c
27.0241 68.9568 27.1902 68.8881 27.3383 68.7844  c
27.4864 68.6807 27.6155 68.5336 27.7255 68.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 55.0000 m
23.0000 55.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 49.0000 m
23.0000 49.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 43.0000 m
23.0000 43.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
27.6430 44.3925 m
27.1479 45.4716 l
24.5581 45.4716 l
23.9931 46.6269 l
25.1145 46.7919 26.0032 47.2088 26.6591 47.8774  c
27.2220 48.4529 27.5034 49.1300 27.5034 49.9086  c
27.5034 50.3614 27.4113 50.7804 27.2272 51.1655  c
27.0432 51.5506 26.8115 51.8785 26.5322 52.1494  c
26.2529 52.4202 25.9418 52.6381 25.5991 52.8032  c
25.1124 53.0359 24.6131 53.1523 24.1010 53.1523  c
23.5848 53.1523 23.2092 53.0645 22.9743 52.8889  c
22.7395 52.7133 22.6220 52.5196 22.6220 52.3081  c
22.6220 52.1896 22.6707 52.0848 22.7680 51.9939  c
22.8654 51.9029 22.9881 51.8574 23.1362 51.8574  c
23.2462 51.8574 23.3425 51.8743 23.4250 51.9082  c
23.5075 51.9420 23.6482 52.0288 23.8471 52.1684  c
24.1645 52.3885 24.4861 52.4985 24.8120 52.4985  c
25.3071 52.4985 25.7419 52.3112 26.1164 51.9367  c
26.4909 51.5622 26.6782 51.1062 26.6782 50.5688  c
26.6782 50.0483 26.5110 49.5627 26.1767 49.1120  c
25.8424 48.6613 25.3811 48.3133 24.7929 48.0678  c
24.3317 47.8774 23.7032 47.7674 22.9077 47.7377  c
24.5581 44.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 37.0000 m
23.0000 37.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 31.0000 m
23.0000 31.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 26.0000 m
23.0000 26.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.4946 30.6645 m
23.8133 30.1059 23.3742 29.6573 23.1774 29.3188  c
22.9807 28.9803 22.8823 28.6290 22.8823 28.2651  c
22.8823 27.7065 23.0981 27.2251 23.5297 26.8210  c
23.9614 26.4169 24.5348 26.2148 25.2500 26.2148  c
25.9440 26.2148 26.5026 26.4031 26.9257 26.7797  c
27.3489 27.1564 27.5605 27.5859 27.5605 28.0683  c
27.5605 28.3899 27.4462 28.7179 27.2177 29.0522  c
26.9892 29.3865 26.5131 29.7801 25.7895 30.2329  c
26.5343 30.8084 27.0273 31.2612 27.2685 31.5913  c
27.5901 32.0229 27.7509 32.4778 27.7509 32.9560  c
27.7509 33.5612 27.5203 34.0785 27.0590 34.5080  c
26.5978 34.9375 25.9926 35.1523 25.2436 35.1523  c
24.4269 35.1523 23.7900 34.8963 23.3330 34.3842  c
22.9690 33.9738 22.7871 33.5252 22.7871 33.0385  c
22.7871 32.6577 22.9151 32.2800 23.1711 31.9055  c
23.4271 31.5310 23.8683 31.1173 24.4946 30.6645  c
h
25.4912 29.9853 m
25.9990 29.5283 26.3206 29.1675 26.4560 28.9030  c
26.5914 28.6385 26.6591 28.3391 26.6591 28.0048  c
26.6591 27.5605 26.5343 27.2124 26.2846 26.9606  c
26.0349 26.7089 25.6943 26.5830 25.2627 26.5830  c
24.8310 26.5830 24.4798 26.7078 24.2089 26.9575  c
23.9381 27.2071 23.8027 27.4991 23.8027 27.8335  c
23.8027 28.0535 23.8588 28.2736 23.9709 28.4936  c
24.0830 28.7137 24.2428 28.9231 24.4502 29.1220  c
h
24.7929 30.9057 m
24.4417 31.2019 24.1814 31.5246 24.0122 31.8737  c
23.8429 32.2229 23.7583 32.6005 23.7583 33.0068  c
23.7583 33.5527 23.9074 33.9896 24.2058 34.3176  c
24.5041 34.6455 24.8839 34.8095 25.3452 34.8095  c
25.8022 34.8095 26.1682 34.6805 26.4433 34.4223  c
26.7184 34.1642 26.8559 33.8510 26.8559 33.4829  c
26.8559 33.1782 26.7755 32.9052 26.6147 32.6640  c
26.3142 32.2154 25.7070 31.6293 24.7929 30.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 20.0000 m
23.0000 20.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 14.0000 m
23.0000 14.0000 l
S
Q
q
0 J
1 j
newpath
26.0000 8.00000 m
23.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
16.5234 10.2368 m
18.6181 9.21484 l
18.8276 9.21484 l
18.8276 16.4829 l
18.8276 16.9653 18.8477 17.2657 18.8879 17.3842  c
18.9281 17.5027 19.0117 17.5937 19.1386 17.6572  c
19.2656 17.7207 19.5237 17.7566 19.9130 17.7651  c
19.9130 18.0000 l
16.6757 18.0000 l
16.6757 17.7651 l
17.0820 17.7566 17.3444 17.7217 17.4628 17.6604  c
17.5813 17.5990 17.6639 17.5165 17.7104 17.4128  c
17.7570 17.3091 17.7802 16.9991 17.7802 16.4829  c
17.7802 11.8364 l
17.7802 11.2101 17.7591 10.8081 17.7168 10.6303  c
17.6871 10.4949 17.6332 10.3955 17.5549 10.3320  c
17.4766 10.2685 17.3824 10.2368 17.2724 10.2368  c
17.1158 10.2368 16.8979 10.3024 16.6186 10.4335  c
h
23.5234 10.2368 m
25.6181 9.21484 l
25.8276 9.21484 l
25.8276 16.4829 l
25.8276 16.9653 25.8477 17.2657 25.8879 17.3842  c
25.9281 17.5027 26.0117 17.5937 26.1386 17.6572  c
26.2656 17.7207 26.5237 17.7566 26.9130 17.7651  c
26.9130 18.0000 l
23.6757 18.0000 l
23.6757 17.7651 l
24.0820 17.7566 24.3444 17.7217 24.4628 17.6604  c
24.5813 17.5990 24.6639 17.5165 24.7104 17.4128  c
24.7570 17.3091 24.7802 16.9991 24.7802 16.4829  c
24.7802 11.8364 l
24.7802 11.2101 24.7591 10.8081 24.7168 10.6303  c
24.6871 10.4949 24.6332 10.3955 24.5549 10.3320  c
24.4766 10.2685 24.3824 10.2368 24.2724 10.2368  c
24.1158 10.2368 23.8979 10.3024 23.6186 10.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 58.0000 m
24.0000 58.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 52.0000 m
24.0000 52.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 46.0000 m
24.0000 46.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 40.0000 m
24.0000 40.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 34.0000 m
24.0000 34.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 28.0000 m
24.0000 28.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 23.0000 m
24.0000 23.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 17.0000 m
24.0000 17.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 11.0000 m
24.0000 11.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 276 107 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
