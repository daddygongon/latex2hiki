
!収束性と安定性 
実際のコードの出力からも分かる通り，解の収束の速さは2つの手法で極端に違う．2分法では一回の操作で解の区間が半分になる．このように繰り返しごとに誤差幅が前回の誤差幅の定数(<1)倍になる方法は1次収束(linear convergence)するという．Newton法では関数・初期値が素直な場合({{math 'f'(x) <> 0'}})に，収束が誤差の2乗に比例する2次収束を示す．以下はその導出を示した．

<<<maple
> restart; ff:=subs(xi-x[f]=ei,series(f(xi),xi=x[f],4));
>>>
{{dmath ' {\it ff}\, := \,f \left( x_{{f}} \right) +D \left( f \right)  \left( x_{{f}} \right) {\it ei}+\frac{1}{2}\,  D^{ \left( 2 \right) }   \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{2} +\frac{1}{6}\, 
D^{ \left( 3 \right) }   \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{3}+O \left( {{\it ei}}^{4} \right)
 '}}
<<<maple
> dff:=subs({0=x[f],x=ei},series(diff(f(x),x),x,3));
>>>
{{dmath ' {\it dff}\, := \,D \left( f \right)  \left( x_{{f}} \right) + 
D^{ \left( 2 \right) } \left( f \right)  \left( x_{{f}} \right) {\it ei}+
\frac{1}{2}\, D^{ \left( 3 \right) } \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{2} +O \left( {{\it ei}}^{3} \right)
 '}}
<<<maple
> ei1:=ei-ff/dff;
>>>
{{dmath ' {\it ei1}\, := \,{\it ei}-{\frac {f \left( x_{{f}} \right) +D \left( f \right)  \left( x_{{f}} \right) {\it ei}+\frac{1}{2}\,  D^{ \left( 2 \right) }  \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{2}+\frac{1}{6}\,  D^{ \left( 3 \right) }   \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{3}+O \left( {{\it ei}}^{4} \right) }{D \left( f \right)  \left( x_{{f}} \right) +  D^{ \left( 2 \right) }  \left( f \right)  \left( x_{{f}} \right) {\it ei} +\frac{1}{2}\, D^{ \left( 3 \right) } \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{2}+O \left( {{\it ei}}^{3} \right) }}
 '}}
<<<maple
> ei2:=simplify(convert(ei1,polynom));
>>>
{{dmath ' {\it ei2}\, := \,\frac{1}{3}\,\frac {3\, D^{ \left( 2 \right) }  \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{2}+2\, D^{ \left( 3 \right) } \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{3}
-6\,f \left( x_{{f}} \right) }{2\,D \left( f \right)  \left( x_{{f}} \right) +2\, D^{ \left( 2 \right) }   \left( f \right)  \left( x_{{f}} \right) {\it ei}+ D^{ \left( 3 \right) } \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{2}
}
 '}}
<<<maple
> ei3:=series(ei2,ei,3);
>>>
{{dmath ' {\it ei3}\, := \,-{\frac {f \left( x_{{f}} \right) }{D \left( f \right)  \left( x_{{f}} \right) }}+{\frac {f \left( x_{{f}} \right)  \left( D^{ \left( 2 \right) } \right)  \left( f \right)  \left( x_{{f}} \right) {\it ei}}{ \left( D \left( f \right)  \left( x_{{f}} \right)  \right) ^{2}}}+  '}}
{{dmath ' \frac{1}{6}\, \frac{ 3\, \left( D^{ \left( 2 \right) } \right)  \left( f \right)  \left( x_{{f}} \right) +3\,{\frac {f \left( x_{{f}} \right)  \left( D^{ \left( 3 \right) } \right)  \left( f \right)  \left( x_{{f}} \right) }{D \left( f \right)  \left( x_{{f}} \right) }}-6\,{\frac {f \left( x_{{f}} \right)  \left(  \left( D^{ \left( 2 \right) } \right)  \left( f \right)  \left( x_{{f}} \right)  \right) ^{2}}{ \left( D \left( f \right)  \left( x_{{f}} \right)  \right) ^{2}}}}
{ \left( D \left( f \right)  \left( x_{{f}} \right)  \right)}{{\it ei}}^{2} +O \left( {{\it ei}}^{3} \right)
 '}}
<<<maple
> subs(f(x[f])=0,ei3);
>>>
{{dmath ' \frac{1}{2}\,{\frac {  D^{ \left( 2 \right) }   \left( f \right)  \left( x_{{f}} \right) {{\it ei}}^{2}}{D \left( f \right)  \left( x_{{f}} \right) }}+O \left( {{\it ei}}^{3} \right)
 '}}
注意すべきは，この収束性には一回の計算時間の差は入っていないことである．Newton法で解析的に微分が求まらない場合，数値的に求めるという手法がとられるが，これにかかる計算時間はばかにできない．二分法を改良した割線法(secant method)がより速い場合がある(NumRecipe9章参照)．

二分法では，収束は遅いが，正負の関数値の間に連続関数では必ず解が存在するという意味で解が保証されている．しかし，Newton法では，収束は速いが，必ずしも素直に解に収束するとは限らない．解を確実に囲い込む，あるいは解に近い値を初期値に選ぶ手法が種々考案されている．解が安定であるかどうかは，問題，解法，初期値に大きく依存する．収束性と安定性のコントロールが数値計算のツボとなる．


!収束判定条件 
どこまで値が解に近づけば計算を打ち切るかを決める条件を収束判定条件と呼ぶ．以下のような条件がある．

||
||{{math '\varepsilon'}}(イプシロン，epsilon)法 || \hspace{100mm}  
||||
||||
||
||{{math '\delta'}}(デルタ，delta)法 || \hspace{100mm}  
||||
||||
||
||占部法 || 数値計算の際の丸め誤差までも含めて判定する条件で，
|||| {{math '\left|f(x_{i+1})\right| > \left|f(x_i)\right|'}} 
||||とする．  
||


!!!{{math '\epsilon, \delta'}}を説明するための図 
<<<maple
> with(plots):with(plottools):
> f2:=x->0.4*(x^2-4*x+1):x1:=0.25:x0:=0.4: p:=plot(f2(z),z=x1-x1/5..x0+x0/5):
> p1:=plot([f2(x1)],z=0.2..0.5): 
> p2:=[disk([x1,f2(x1)],0.005),disk([x0,f2(x0)],0.005)]: 
> l1:=line([x0,f2(x0)],[x0,f2(x1)]): 
> t1 :=textplot([0.45,0.0,`epsilon`],align=above): 
> t2 :=textplot([0.325,0.05,`delta`],align=BELOW):
> display(p,p1,p2,l1,t1,t2);
>>>
||{{attach_view(C2_fsolveplot2d4.png,FSolve)}}||


!2変数の関数の場合 

2変数の関数では，解を求める一般的な手法は無い．この様子は実際に2変数の関数で構成される面の様子をみれば納得されよう．
<<<maple
> restart;
> f:=(x,y)->4*x+2*y-6*x*y; g:=(x,y)->10*x-2*y+1;
>>>
{{dmath ' f\, := \,( {x,y} )\mapsto 4\,x+2\,y-6\,xy  '}}
{{dmath ' g\, := \,( {x,y} )\mapsto 10\,x-2\,y+1  '}}
{{dmath '  '}}
<<<maple
> p1:=plot3d({f(x,y)},x=-2..2,y=-2..2,color=red):
  p2:=plot3d({g(x,y)},x=-2..2,y=-2..2,color=blue):
  p3:=plot3d({0},x=-2..2,y=-2..2,color=gray):
  with(plots):
  display([p1,p2,p3],axes=boxed,orientation=[-150,70]);
>>>
||{{attach_view(C2_fsolveplot3d5.png,FSolve)}}||

解のある程度近くからは，Newton法で効率良く求められる．
<<<maple
> fsolve({f(x,y)=0,g(x,y)=0},{x,y});
>>>
{{dmath ' \left\{ x=- 0.07540291160,y= 0.1229854420 \right\}
 '}}
