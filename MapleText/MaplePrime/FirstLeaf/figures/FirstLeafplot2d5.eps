%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N5ŒŽ31“ú 11Žž17•ª35•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
140 140 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
140.000 0 l
140.000 140.000 l
0 140.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 130 130 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
1.00000 0 0 RG
8.00001 6.05007 119.478 116.449 rc
newpath
67.2395 121.500 m
59.2882 120.968 l
52.4858 119.649 l
45.0904 117.237 l
38.0474 113.859 l
31.5644 109.611 l
26.1251 104.950 l
21.1643 99.4705 l
16.8389 93.1985 l
13.4170 86.4446 l
10.8877 79.1001 l
9.52929 72.4052 l
9.00001 64.7410 l
9.54310 57.0462 l
11.0760 49.7644 l
13.3046 43.3719 l
16.9457 36.1723 l
20.8212 30.5158 l
26.1645 24.5606 l
31.5640 19.9382 l
38.1102 15.6548 l
44.8420 12.4123 l
52.2612 9.95789 l
59.3165 8.57717 l
67.0589 8.05007 l
75.1026 8.56919 l
81.9874 9.89866 l
89.1797 12.2289 l
96.2183 15.5705 l
102.598 19.7007 l
108.189 24.4401 l
113.617 30.4642 l
117.707 36.4651 l
121.175 43.3737 l
123.462 49.9772 l
124.991 57.4484 l
125.478 64.6014 l
124.994 72.0795 l
123.546 79.2684 l
121.024 86.5335 l
117.665 93.1561 l
113.346 99.4302 l
108.256 105.045 l
102.945 109.588 l
96.2168 113.980 l
89.7198 117.103 l
82.4120 119.541 l
75.1657 120.972 l
67.2395 121.500 l
S
cliprestore
newpath
0 0 m
0 130.000 l
130.000 130.000 l
130.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
9.00001 65.0000 m
125.478 65.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
92 83 8 15 rc
Q
cliprestore
newpath
0 0 m
0 130.000 l
130.000 130.000 l
130.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
9.00000 65.0000 m
9.00000 67.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 73 7 13 rc
newpath
16.7900 80.4380 m
8.21000 80.4380 l
8.21000 79.7620 l
16.7900 79.7620 l
h
f
Q
newpath
16.5234 76.2368 m
18.6181 75.2148 l
18.8276 75.2148 l
18.8276 82.4829 l
18.8276 82.9653 18.8477 83.2657 18.8879 83.3842  c
18.9281 83.5027 19.0117 83.5937 19.1386 83.6572  c
19.2656 83.7207 19.5237 83.7566 19.9130 83.7651  c
19.9130 84.0000 l
16.6757 84.0000 l
16.6757 83.7651 l
17.0820 83.7566 17.3444 83.7217 17.4628 83.6604  c
17.5813 83.5990 17.6639 83.5165 17.7104 83.4128  c
17.7570 83.3091 17.7802 82.9991 17.7802 82.4829  c
17.7802 77.8364 l
17.7802 77.2101 17.7591 76.8081 17.7168 76.6303  c
17.6871 76.4949 17.6332 76.3955 17.5549 76.3320  c
17.4766 76.2685 17.3824 76.2368 17.2724 76.2368  c
17.1158 76.2368 16.8979 76.3024 16.6186 76.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
38.0000 65.0000 m
38.0000 67.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
30 73 7 13 rc
newpath
40.7900 80.4380 m
32.2100 80.4380 l
32.2100 79.7620 l
40.7900 79.7620 l
h
f
Q
newpath
39.4697 79.7470 m
39.4697 78.7653 39.6178 77.9200 39.9140 77.2111  c
40.2102 76.5023 40.6038 75.9744 41.0947 75.6274  c
41.4755 75.3523 41.8691 75.2148 42.2753 75.2148  c
42.9355 75.2148 43.5279 75.5512 44.0527 76.2241  c
44.7086 77.0577 45.0366 78.1876 45.0366 79.6137  c
45.0366 80.6124 44.8927 81.4609 44.6049 82.1591  c
44.3172 82.8574 43.9501 83.3641 43.5036 83.6794  c
43.0572 83.9947 42.6266 84.1523 42.2119 84.1523  c
41.3909 84.1523 40.7075 83.6678 40.1616 82.6987  c
39.7003 81.8820 39.4697 80.8981 39.4697 79.7470  c
h
40.7138 79.9057 m
40.7138 81.0906 40.8598 82.0576 41.1518 82.8066  c
41.3930 83.4371 41.7527 83.7524 42.2309 83.7524  c
42.4594 83.7524 42.6964 83.6498 42.9418 83.4445  c
43.1873 83.2393 43.3735 82.8955 43.5004 82.4130  c
43.6951 81.6852 43.7924 80.6590 43.7924 79.3344  c
43.7924 78.3527 43.6909 77.5338 43.4877 76.8779  c
43.3354 76.3912 43.1386 76.0463 42.8974 75.8432  c
42.7239 75.7036 42.5144 75.6337 42.2690 75.6337  c
41.9812 75.6337 41.7252 75.7628 41.5009 76.0210  c
41.1962 76.3722 40.9889 76.9244 40.8789 77.6777  c
40.7688 78.4309 40.7138 79.1736 40.7138 79.9057  c
h
47.6250 82.7685 m
47.8238 82.7685 47.9910 82.8373 48.1264 82.9748  c
48.2618 83.1123 48.3295 83.2784 48.3295 83.4731  c
48.3295 83.6678 48.2608 83.8339 48.1232 83.9714  c
47.9857 84.1089 47.8196 84.1777 47.6250 84.1777  c
47.4303 84.1777 47.2642 84.1089 47.1267 83.9714  c
46.9891 83.8339 46.9204 83.6678 46.9204 83.4731  c
46.9204 83.2742 46.9891 83.1071 47.1267 82.9716  c
47.2642 82.8362 47.4303 82.7685 47.6250 82.7685  c
h
54.6430 75.3925 m
54.1479 76.4716 l
51.5581 76.4716 l
50.9931 77.6269 l
52.1145 77.7919 53.0032 78.2088 53.6591 78.8774  c
54.2220 79.4529 54.5034 80.1300 54.5034 80.9086  c
54.5034 81.3614 54.4113 81.7804 54.2272 82.1655  c
54.0432 82.5506 53.8115 82.8785 53.5322 83.1494  c
53.2529 83.4202 52.9418 83.6381 52.5991 83.8032  c
52.1124 84.0359 51.6131 84.1523 51.1010 84.1523  c
50.5848 84.1523 50.2092 84.0645 49.9743 83.8889  c
49.7395 83.7133 49.6220 83.5196 49.6220 83.3081  c
49.6220 83.1896 49.6707 83.0848 49.7680 82.9939  c
49.8654 82.9029 49.9881 82.8574 50.1362 82.8574  c
50.2462 82.8574 50.3425 82.8743 50.4250 82.9082  c
50.5075 82.9420 50.6482 83.0288 50.8471 83.1684  c
51.1645 83.3885 51.4861 83.4985 51.8120 83.4985  c
52.3071 83.4985 52.7419 83.3112 53.1164 82.9367  c
53.4909 82.5622 53.6782 82.1062 53.6782 81.5688  c
53.6782 81.0483 53.5110 80.5627 53.1767 80.1120  c
52.8424 79.6613 52.3811 79.3133 51.7929 79.0678  c
51.3317 78.8774 50.7032 78.7674 49.9077 78.7377  c
51.5581 75.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 65.0000 m
67.0000 67.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
64.4697 78.7470 m
64.4697 77.7653 64.6178 76.9200 64.9140 76.2111  c
65.2102 75.5023 65.6038 74.9744 66.0947 74.6274  c
66.4755 74.3523 66.8691 74.2148 67.2753 74.2148  c
67.9355 74.2148 68.5279 74.5512 69.0527 75.2241  c
69.7086 76.0577 70.0366 77.1876 70.0366 78.6137  c
70.0366 79.6124 69.8927 80.4609 69.6049 81.1591  c
69.3172 81.8574 68.9501 82.3641 68.5036 82.6794  c
68.0572 82.9947 67.6266 83.1523 67.2119 83.1523  c
66.3909 83.1523 65.7075 82.6678 65.1616 81.6987  c
64.7003 80.8820 64.4697 79.8981 64.4697 78.7470  c
h
65.7138 78.9057 m
65.7138 80.0906 65.8598 81.0576 66.1518 81.8066  c
66.3930 82.4371 66.7527 82.7524 67.2309 82.7524  c
67.4594 82.7524 67.6964 82.6498 67.9418 82.4445  c
68.1873 82.2393 68.3735 81.8955 68.5004 81.4130  c
68.6951 80.6852 68.7924 79.6590 68.7924 78.3344  c
68.7924 77.3527 68.6909 76.5338 68.4877 75.8779  c
68.3354 75.3912 68.1386 75.0463 67.8974 74.8432  c
67.7239 74.7036 67.5144 74.6337 67.2690 74.6337  c
66.9812 74.6337 66.7252 74.7628 66.5009 75.0210  c
66.1962 75.3722 65.9889 75.9244 65.8789 76.6777  c
65.7688 77.4309 65.7138 78.1736 65.7138 78.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
96.0000 65.0000 m
96.0000 67.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
93.4697 79.7470 m
93.4697 78.7653 93.6178 77.9200 93.9140 77.2111  c
94.2102 76.5023 94.6038 75.9744 95.0947 75.6274  c
95.4755 75.3523 95.8691 75.2148 96.2753 75.2148  c
96.9355 75.2148 97.5279 75.5512 98.0527 76.2241  c
98.7086 77.0577 99.0366 78.1876 99.0366 79.6137  c
99.0366 80.6124 98.8927 81.4609 98.6049 82.1591  c
98.3172 82.8574 97.9501 83.3641 97.5036 83.6794  c
97.0572 83.9947 96.6266 84.1523 96.2119 84.1523  c
95.3909 84.1523 94.7075 83.6678 94.1616 82.6987  c
93.7003 81.8820 93.4697 80.8981 93.4697 79.7470  c
h
94.7138 79.9057 m
94.7138 81.0906 94.8598 82.0576 95.1518 82.8066  c
95.3930 83.4371 95.7527 83.7524 96.2309 83.7524  c
96.4594 83.7524 96.6964 83.6498 96.9418 83.4445  c
97.1873 83.2393 97.3735 82.8955 97.5004 82.4130  c
97.6951 81.6852 97.7924 80.6590 97.7924 79.3344  c
97.7924 78.3527 97.6909 77.5338 97.4877 76.8779  c
97.3354 76.3912 97.1386 76.0463 96.8974 75.8432  c
96.7239 75.7036 96.5144 75.6337 96.2690 75.6337  c
95.9812 75.6337 95.7252 75.7628 95.5009 76.0210  c
95.1962 76.3722 94.9889 76.9244 94.8789 77.6777  c
94.7688 78.4309 94.7138 79.1736 94.7138 79.9057  c
h
101.625 82.7685 m
101.823 82.7685 101.991 82.8373 102.126 82.9748  c
102.261 83.1123 102.329 83.2784 102.329 83.4731  c
102.329 83.6678 102.260 83.8339 102.123 83.9714  c
101.985 84.1089 101.819 84.1777 101.625 84.1777  c
101.430 84.1777 101.264 84.1089 101.126 83.9714  c
100.989 83.8339 100.920 83.6678 100.920 83.4731  c
100.920 83.2742 100.989 83.1071 101.126 82.9716  c
101.264 82.8362 101.430 82.7685 101.625 82.7685  c
h
108.643 75.3925 m
108.147 76.4716 l
105.558 76.4716 l
104.993 77.6269 l
106.114 77.7919 107.003 78.2088 107.659 78.8774  c
108.222 79.4529 108.503 80.1300 108.503 80.9086  c
108.503 81.3614 108.411 81.7804 108.227 82.1655  c
108.043 82.5506 107.811 82.8785 107.532 83.1494  c
107.252 83.4202 106.941 83.6381 106.599 83.8032  c
106.112 84.0359 105.613 84.1523 105.101 84.1523  c
104.584 84.1523 104.209 84.0645 103.974 83.8889  c
103.739 83.7133 103.622 83.5196 103.622 83.3081  c
103.622 83.1896 103.670 83.0848 103.768 82.9939  c
103.865 82.9029 103.988 82.8574 104.136 82.8574  c
104.246 82.8574 104.342 82.8743 104.425 82.9082  c
104.507 82.9420 104.648 83.0288 104.847 83.1684  c
105.164 83.3885 105.486 83.4985 105.812 83.4985  c
106.307 83.4985 106.741 83.3112 107.116 82.9367  c
107.491 82.5622 107.678 82.1062 107.678 81.5688  c
107.678 81.0483 107.511 80.5627 107.176 80.1120  c
106.842 79.6613 106.381 79.3133 105.793 79.0678  c
105.331 78.8774 104.703 78.7674 103.907 78.7377  c
105.558 75.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
125.000 65.0000 m
125.000 67.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
128.523 76.2368 m
130.618 75.2148 l
130.827 75.2148 l
130.827 82.4829 l
130.827 82.9653 130.847 83.2657 130.887 83.3842  c
130.928 83.5027 131.011 83.5937 131.138 83.6572  c
131.265 83.7207 131.523 83.7566 131.913 83.7651  c
131.913 84.0000 l
128.675 84.0000 l
128.675 83.7651 l
129.082 83.7566 129.344 83.7217 129.462 83.6604  c
129.581 83.5990 129.663 83.5165 129.710 83.4128  c
129.757 83.3091 129.780 82.9991 129.780 82.4829  c
129.780 77.8364 l
129.780 77.2101 129.759 76.8081 129.716 76.6303  c
129.687 76.4949 129.633 76.3955 129.554 76.3320  c
129.476 76.2685 129.382 76.2368 129.272 76.2368  c
129.115 76.2368 128.897 76.3024 128.618 76.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
15.0000 65.0000 m
15.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
21.0000 65.0000 m
21.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 65.0000 m
26.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
32.0000 65.0000 m
32.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
44.0000 65.0000 m
44.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
50.0000 65.0000 m
50.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
56.0000 65.0000 m
56.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
61.0000 65.0000 m
61.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 65.0000 m
73.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
79.0000 65.0000 m
79.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
85.0000 65.0000 m
85.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
91.0000 65.0000 m
91.0000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
102.000 65.0000 m
102.000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
108.000 65.0000 m
108.000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
114.000 65.0000 m
114.000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
120.000 65.0000 m
120.000 66.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
67.0000 121.500 m
67.0000 8.05007 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
27 29 8 15 rc
Q
cliprestore
newpath
0 0 m
0 130.000 l
130.000 130.000 l
130.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
67.0000 122.000 m
65.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
52 120 7 13 rc
newpath
62.7900 127.438 m
54.2100 127.438 l
54.2100 126.762 l
62.7900 126.762 l
h
f
Q
newpath
62.5234 123.236 m
64.6181 122.214 l
64.8276 122.214 l
64.8276 129.482 l
64.8276 129.965 64.8477 130.265 64.8879 130.384  c
64.9281 130.502 65.0117 130.593 65.1386 130.657  c
65.2656 130.720 65.5237 130.756 65.9130 130.765  c
65.9130 131.000 l
62.6757 131.000 l
62.6757 130.765 l
63.0820 130.756 63.3444 130.721 63.4628 130.660  c
63.5813 130.599 63.6639 130.516 63.7104 130.412  c
63.7570 130.309 63.7802 129.999 63.7802 129.482  c
63.7802 124.836 l
63.7802 124.210 63.7591 123.808 63.7168 123.630  c
63.6871 123.495 63.6332 123.395 63.5549 123.332  c
63.4766 123.268 63.3824 123.236 63.2724 123.236  c
63.1158 123.236 62.8979 123.302 62.6186 123.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 93.0000 m
65.0000 93.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
42 92 7 13 rc
newpath
52.7900 99.4380 m
44.2100 99.4380 l
44.2100 98.7620 l
52.7900 98.7620 l
h
f
Q
newpath
51.4697 98.7470 m
51.4697 97.7653 51.6178 96.9200 51.9140 96.2111  c
52.2102 95.5023 52.6038 94.9744 53.0947 94.6274  c
53.4755 94.3523 53.8691 94.2148 54.2753 94.2148  c
54.9355 94.2148 55.5279 94.5512 56.0527 95.2241  c
56.7086 96.0577 57.0366 97.1876 57.0366 98.6137  c
57.0366 99.6124 56.8927 100.460 56.6049 101.159  c
56.3172 101.857 55.9501 102.364 55.5036 102.679  c
55.0572 102.994 54.6266 103.152 54.2119 103.152  c
53.3909 103.152 52.7075 102.667 52.1616 101.698  c
51.7003 100.882 51.4697 99.8981 51.4697 98.7470  c
h
52.7138 98.9057 m
52.7138 100.090 52.8598 101.057 53.1518 101.806  c
53.3930 102.437 53.7527 102.752 54.2309 102.752  c
54.4594 102.752 54.6964 102.649 54.9418 102.444  c
55.1873 102.239 55.3735 101.895 55.5004 101.413  c
55.6951 100.685 55.7924 99.6590 55.7924 98.3344  c
55.7924 97.3527 55.6909 96.5338 55.4877 95.8779  c
55.3354 95.3912 55.1386 95.0463 54.8974 94.8432  c
54.7239 94.7036 54.5144 94.6337 54.2690 94.6337  c
53.9812 94.6337 53.7252 94.7628 53.5009 95.0210  c
53.1962 95.3722 52.9889 95.9244 52.8789 96.6777  c
52.7688 97.4309 52.7138 98.1736 52.7138 98.9057  c
h
59.6250 101.768 m
59.8238 101.768 59.9910 101.837 60.1264 101.974  c
60.2618 102.112 60.3295 102.278 60.3295 102.473  c
60.3295 102.667 60.2608 102.833 60.1232 102.971  c
59.9857 103.109 59.8196 103.177 59.6250 103.177  c
59.4303 103.177 59.2642 103.109 59.1267 102.971  c
58.9891 102.833 58.9204 102.667 58.9204 102.473  c
58.9204 102.274 58.9891 102.107 59.1267 101.971  c
59.2642 101.836 59.4303 101.768 59.6250 101.768  c
h
66.6430 94.3925 m
66.1479 95.4716 l
63.5581 95.4716 l
62.9931 96.6269 l
64.1145 96.7919 65.0032 97.2088 65.6591 97.8774  c
66.2220 98.4529 66.5034 99.1300 66.5034 99.9086  c
66.5034 100.361 66.4113 100.780 66.2272 101.165  c
66.0432 101.550 65.8115 101.878 65.5322 102.149  c
65.2529 102.420 64.9418 102.638 64.5991 102.803  c
64.1124 103.036 63.6131 103.152 63.1010 103.152  c
62.5848 103.152 62.2092 103.064 61.9743 102.888  c
61.7395 102.713 61.6220 102.519 61.6220 102.308  c
61.6220 102.189 61.6707 102.084 61.7680 101.993  c
61.8654 101.902 61.9881 101.857 62.1362 101.857  c
62.2462 101.857 62.3425 101.874 62.4250 101.908  c
62.5075 101.942 62.6482 102.028 62.8471 102.168  c
63.1645 102.388 63.4861 102.498 63.8120 102.498  c
64.3071 102.498 64.7419 102.311 65.1164 101.936  c
65.4909 101.562 65.6782 101.106 65.6782 100.568  c
65.6782 100.048 65.5110 99.5627 65.1767 99.1120  c
64.8424 98.6613 64.3811 98.3133 63.7929 98.0678  c
63.3317 97.8774 62.7032 97.7674 61.9077 97.7377  c
63.5581 94.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 65.0000 m
65.0000 65.0000 l
S
Q
q
0 J
1 j
newpath
67.0000 36.0000 m
65.0000 36.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
51.4697 41.7470 m
51.4697 40.7653 51.6178 39.9200 51.9140 39.2111  c
52.2102 38.5023 52.6038 37.9744 53.0947 37.6274  c
53.4755 37.3523 53.8691 37.2148 54.2753 37.2148  c
54.9355 37.2148 55.5279 37.5512 56.0527 38.2241  c
56.7086 39.0577 57.0366 40.1876 57.0366 41.6137  c
57.0366 42.6124 56.8927 43.4609 56.6049 44.1591  c
56.3172 44.8574 55.9501 45.3641 55.5036 45.6794  c
55.0572 45.9947 54.6266 46.1523 54.2119 46.1523  c
53.3909 46.1523 52.7075 45.6678 52.1616 44.6987  c
51.7003 43.8820 51.4697 42.8981 51.4697 41.7470  c
h
52.7138 41.9057 m
52.7138 43.0906 52.8598 44.0576 53.1518 44.8066  c
53.3930 45.4371 53.7527 45.7524 54.2309 45.7524  c
54.4594 45.7524 54.6964 45.6498 54.9418 45.4445  c
55.1873 45.2393 55.3735 44.8955 55.5004 44.4130  c
55.6951 43.6852 55.7924 42.6590 55.7924 41.3344  c
55.7924 40.3527 55.6909 39.5338 55.4877 38.8779  c
55.3354 38.3912 55.1386 38.0463 54.8974 37.8432  c
54.7239 37.7036 54.5144 37.6337 54.2690 37.6337  c
53.9812 37.6337 53.7252 37.7628 53.5009 38.0210  c
53.1962 38.3722 52.9889 38.9244 52.8789 39.6777  c
52.7688 40.4309 52.7138 41.1736 52.7138 41.9057  c
h
59.6250 44.7685 m
59.8238 44.7685 59.9910 44.8373 60.1264 44.9748  c
60.2618 45.1123 60.3295 45.2784 60.3295 45.4731  c
60.3295 45.6678 60.2608 45.8339 60.1232 45.9714  c
59.9857 46.1089 59.8196 46.1777 59.6250 46.1777  c
59.4303 46.1777 59.2642 46.1089 59.1267 45.9714  c
58.9891 45.8339 58.9204 45.6678 58.9204 45.4731  c
58.9204 45.2742 58.9891 45.1071 59.1267 44.9716  c
59.2642 44.8362 59.4303 44.7685 59.6250 44.7685  c
h
66.6430 37.3925 m
66.1479 38.4716 l
63.5581 38.4716 l
62.9931 39.6269 l
64.1145 39.7919 65.0032 40.2088 65.6591 40.8774  c
66.2220 41.4529 66.5034 42.1300 66.5034 42.9086  c
66.5034 43.3614 66.4113 43.7804 66.2272 44.1655  c
66.0432 44.5506 65.8115 44.8785 65.5322 45.1494  c
65.2529 45.4202 64.9418 45.6381 64.5991 45.8032  c
64.1124 46.0359 63.6131 46.1523 63.1010 46.1523  c
62.5848 46.1523 62.2092 46.0645 61.9743 45.8889  c
61.7395 45.7133 61.6220 45.5196 61.6220 45.3081  c
61.6220 45.1896 61.6707 45.0848 61.7680 44.9939  c
61.8654 44.9029 61.9881 44.8574 62.1362 44.8574  c
62.2462 44.8574 62.3425 44.8743 62.4250 44.9082  c
62.5075 44.9420 62.6482 45.0288 62.8471 45.1684  c
63.1645 45.3885 63.4861 45.4985 63.8120 45.4985  c
64.3071 45.4985 64.7419 45.3112 65.1164 44.9367  c
65.4909 44.5622 65.6782 44.1062 65.6782 43.5688  c
65.6782 43.0483 65.5110 42.5627 65.1767 42.1120  c
64.8424 41.6613 64.3811 41.3133 63.7929 41.0678  c
63.3317 40.8774 62.7032 40.7674 61.9077 40.7377  c
63.5581 37.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 8.00000 m
65.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
62.5234 10.2368 m
64.6181 9.21484 l
64.8276 9.21484 l
64.8276 16.4829 l
64.8276 16.9653 64.8477 17.2657 64.8879 17.3842  c
64.9281 17.5027 65.0117 17.5937 65.1386 17.6572  c
65.2656 17.7207 65.5237 17.7566 65.9130 17.7651  c
65.9130 18.0000 l
62.6757 18.0000 l
62.6757 17.7651 l
63.0820 17.7566 63.3444 17.7217 63.4628 17.6604  c
63.5813 17.5990 63.6639 17.5165 63.7104 17.4128  c
63.7570 17.3091 63.7802 16.9991 63.7802 16.4829  c
63.7802 11.8364 l
63.7802 11.2101 63.7591 10.8081 63.7168 10.6303  c
63.6871 10.4949 63.6332 10.3955 63.5549 10.3320  c
63.4766 10.2685 63.3824 10.2368 63.2724 10.2368  c
63.1158 10.2368 62.8979 10.3024 62.6186 10.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 116.000 m
66.0000 116.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 110.000 m
66.0000 110.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 104.000 m
66.0000 104.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 99.0000 m
66.0000 99.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 87.0000 m
66.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 82.0000 m
66.0000 82.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 76.0000 m
66.0000 76.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 70.0000 m
66.0000 70.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 59.0000 m
66.0000 59.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 53.0000 m
66.0000 53.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 48.0000 m
66.0000 48.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 42.0000 m
66.0000 42.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 31.0000 m
66.0000 31.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 25.0000 m
66.0000 25.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 19.0000 m
66.0000 19.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 14.0000 m
66.0000 14.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 140 140 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
