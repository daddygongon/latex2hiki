%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 160 575 631
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N6ŒŽ23“ú 18Žž18•ª57•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
208 176 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
208.000 0 l
208.000 176.000 l
0 176.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 198 166 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
0.701961 0.701961 1.00000 RG
14.0000 7.03833 175.459 150.461 rc
newpath
14.0000 157.500 m
14.0000 8.03834 l
188.459 8.03834 l
188.459 157.500 l
14.0000 157.500 l
h
f
newpath
14.0000 157.500 m
14.0000 8.03834 l
188.459 8.03834 l
188.459 157.500 l
14.0000 157.500 l
h
S
cliprestore
newpath
0 0 m
0 166.000 l
198.000 166.000 l
198.000 0 l
h
W
Q
q
1.00000 1.00000 1.00000 RG
14.0000 7.03833 175.459 150.461 rc
newpath
144.844 8.03834 m
188.459 8.03834 l
188.459 157.500 l
144.844 157.500 l
144.844 8.03834 l
h
f
newpath
14.0000 8.03834 m
57.6147 8.03834 l
57.6147 157.500 l
14.0000 157.500 l
14.0000 8.03834 l
h
f
newpath
14.0000 120.134 m
188.459 120.134 l
188.459 157.500 l
14.0000 157.500 l
14.0000 120.134 l
h
f
newpath
14.0000 157.500 m
14.0000 8.03834 l
188.459 8.03834 l
h
f
newpath
14.0000 157.500 m
14.0000 8.03834 l
188.459 8.03834 l
h
S
cliprestore
newpath
0 0 m
0 166.000 l
198.000 166.000 l
198.000 0 l
h
W
Q
q
13.0000 6.03833 177.459 152.461 rc
newpath
144.844 157.500 m
144.844 8.03834 l
S
newpath
57.6147 157.500 m
57.6147 8.03834 l
S
newpath
14.0000 120.134 m
188.459 120.134 l
S
newpath
14.0000 157.500 m
188.459 8.03834 l
S
cliprestore
newpath
0 0 m
0 166.000 l
198.000 166.000 l
198.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
14.0000 120.000 m
188.459 120.000 l
S
Q
q
q
0 J
1 j
newpath
14.0000 120.000 m
14.0000 123.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 130 7 13 rc
newpath
16.7900 137.438 m
8.21000 137.438 l
8.21000 136.762 l
16.7900 136.762 l
h
f
Q
newpath
15.4697 136.747 m
15.4697 135.765 15.6178 134.920 15.9140 134.211  c
16.2102 133.502 16.6038 132.974 17.0947 132.627  c
17.4755 132.352 17.8691 132.214 18.2753 132.214  c
18.9355 132.214 19.5279 132.551 20.0527 133.224  c
20.7086 134.057 21.0366 135.187 21.0366 136.613  c
21.0366 137.612 20.8927 138.460 20.6049 139.159  c
20.3172 139.857 19.9501 140.364 19.5036 140.679  c
19.0572 140.994 18.6266 141.152 18.2119 141.152  c
17.3909 141.152 16.7075 140.667 16.1616 139.698  c
15.7003 138.882 15.4697 137.898 15.4697 136.747  c
h
16.7138 136.905 m
16.7138 138.090 16.8598 139.057 17.1518 139.806  c
17.3930 140.437 17.7527 140.752 18.2309 140.752  c
18.4594 140.752 18.6964 140.649 18.9418 140.444  c
19.1873 140.239 19.3735 139.895 19.5004 139.413  c
19.6951 138.685 19.7924 137.659 19.7924 136.334  c
19.7924 135.352 19.6909 134.533 19.4877 133.877  c
19.3354 133.391 19.1386 133.046 18.8974 132.843  c
18.7239 132.703 18.5144 132.633 18.2690 132.633  c
17.9812 132.633 17.7252 132.762 17.5009 133.021  c
17.1962 133.372 16.9889 133.924 16.8789 134.677  c
16.7688 135.431 16.7138 136.173 16.7138 136.905  c
h
23.6250 139.768 m
23.8238 139.768 23.9910 139.837 24.1264 139.974  c
24.2618 140.112 24.3295 140.278 24.3295 140.473  c
24.3295 140.667 24.2608 140.833 24.1232 140.971  c
23.9857 141.109 23.8196 141.177 23.6250 141.177  c
23.4303 141.177 23.2642 141.109 23.1267 140.971  c
22.9891 140.833 22.9204 140.667 22.9204 140.473  c
22.9204 140.274 22.9891 140.107 23.1267 139.971  c
23.2642 139.836 23.4303 139.768 23.6250 139.768  c
h
30.6430 132.392 m
30.1479 133.471 l
27.5581 133.471 l
26.9931 134.627 l
28.1145 134.792 29.0032 135.208 29.6591 135.877  c
30.2220 136.453 30.5034 137.130 30.5034 137.908  c
30.5034 138.361 30.4113 138.780 30.2272 139.165  c
30.0432 139.550 29.8115 139.878 29.5322 140.149  c
29.2529 140.420 28.9418 140.638 28.5991 140.803  c
28.1124 141.036 27.6131 141.152 27.1010 141.152  c
26.5848 141.152 26.2092 141.064 25.9743 140.888  c
25.7395 140.713 25.6220 140.519 25.6220 140.308  c
25.6220 140.189 25.6707 140.084 25.7680 139.993  c
25.8654 139.902 25.9881 139.857 26.1362 139.857  c
26.2462 139.857 26.3425 139.874 26.4250 139.908  c
26.5075 139.942 26.6482 140.028 26.8471 140.168  c
27.1645 140.388 27.4861 140.498 27.8120 140.498  c
28.3071 140.498 28.7419 140.311 29.1164 139.936  c
29.4909 139.562 29.6782 139.106 29.6782 138.568  c
29.6782 138.048 29.5110 137.562 29.1767 137.112  c
28.8424 136.661 28.3811 136.313 27.7929 136.067  c
27.3317 135.877 26.7032 135.767 25.9077 135.737  c
27.5581 132.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 120.000 m
58.0000 123.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
54.4697 135.747 m
54.4697 134.765 54.6178 133.920 54.9140 133.211  c
55.2102 132.502 55.6038 131.974 56.0947 131.627  c
56.4755 131.352 56.8691 131.214 57.2753 131.214  c
57.9355 131.214 58.5279 131.551 59.0527 132.224  c
59.7086 133.057 60.0366 134.187 60.0366 135.613  c
60.0366 136.612 59.8927 137.460 59.6049 138.159  c
59.3172 138.857 58.9501 139.364 58.5036 139.679  c
58.0572 139.994 57.6266 140.152 57.2119 140.152  c
56.3909 140.152 55.7075 139.667 55.1616 138.698  c
54.7003 137.882 54.4697 136.898 54.4697 135.747  c
h
55.7138 135.905 m
55.7138 137.090 55.8598 138.057 56.1518 138.806  c
56.3930 139.437 56.7527 139.752 57.2309 139.752  c
57.4594 139.752 57.6964 139.649 57.9418 139.444  c
58.1873 139.239 58.3735 138.895 58.5004 138.413  c
58.6951 137.685 58.7924 136.659 58.7924 135.334  c
58.7924 134.352 58.6909 133.533 58.4877 132.877  c
58.3354 132.391 58.1386 132.046 57.8974 131.843  c
57.7239 131.703 57.5144 131.633 57.2690 131.633  c
56.9812 131.633 56.7252 131.762 56.5009 132.021  c
56.1962 132.372 55.9889 132.924 55.8789 133.677  c
55.7688 134.431 55.7138 135.173 55.7138 135.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
101.000 120.000 m
101.000 123.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
98.4697 136.747 m
98.4697 135.765 98.6178 134.920 98.9140 134.211  c
99.2102 133.502 99.6038 132.974 100.094 132.627  c
100.475 132.352 100.869 132.214 101.275 132.214  c
101.935 132.214 102.528 132.551 103.052 133.224  c
103.708 134.057 104.036 135.187 104.036 136.613  c
104.036 137.612 103.892 138.460 103.605 139.159  c
103.317 139.857 102.950 140.364 102.503 140.679  c
102.057 140.994 101.626 141.152 101.211 141.152  c
100.391 141.152 99.7075 140.667 99.1616 139.698  c
98.7003 138.882 98.4697 137.898 98.4697 136.747  c
h
99.7138 136.905 m
99.7138 138.090 99.8598 139.057 100.151 139.806  c
100.393 140.437 100.752 140.752 101.231 140.752  c
101.459 140.752 101.696 140.649 101.941 140.444  c
102.187 140.239 102.373 139.895 102.500 139.413  c
102.695 138.685 102.792 137.659 102.792 136.334  c
102.792 135.352 102.690 134.533 102.487 133.877  c
102.335 133.391 102.138 133.046 101.897 132.843  c
101.724 132.703 101.514 132.633 101.269 132.633  c
100.981 132.633 100.725 132.762 100.501 133.021  c
100.196 133.372 99.9889 133.924 99.8789 134.677  c
99.7688 135.431 99.7138 136.173 99.7138 136.905  c
h
106.625 139.768 m
106.823 139.768 106.991 139.837 107.126 139.974  c
107.261 140.112 107.329 140.278 107.329 140.473  c
107.329 140.667 107.260 140.833 107.123 140.971  c
106.985 141.109 106.819 141.177 106.625 141.177  c
106.430 141.177 106.264 141.109 106.126 140.971  c
105.989 140.833 105.920 140.667 105.920 140.473  c
105.920 140.274 105.989 140.107 106.126 139.971  c
106.264 139.836 106.430 139.768 106.625 139.768  c
h
113.643 132.392 m
113.147 133.471 l
110.558 133.471 l
109.993 134.627 l
111.114 134.792 112.003 135.208 112.659 135.877  c
113.222 136.453 113.503 137.130 113.503 137.908  c
113.503 138.361 113.411 138.780 113.227 139.165  c
113.043 139.550 112.811 139.878 112.532 140.149  c
112.252 140.420 111.941 140.638 111.599 140.803  c
111.112 141.036 110.613 141.152 110.101 141.152  c
109.584 141.152 109.209 141.064 108.974 140.888  c
108.739 140.713 108.622 140.519 108.622 140.308  c
108.622 140.189 108.670 140.084 108.768 139.993  c
108.865 139.902 108.988 139.857 109.136 139.857  c
109.246 139.857 109.342 139.874 109.425 139.908  c
109.507 139.942 109.648 140.028 109.847 140.168  c
110.164 140.388 110.486 140.498 110.812 140.498  c
111.307 140.498 111.741 140.311 112.116 139.936  c
112.491 139.562 112.678 139.106 112.678 138.568  c
112.678 138.048 112.511 137.562 112.176 137.112  c
111.842 136.661 111.381 136.313 110.793 136.067  c
110.331 135.877 109.703 135.767 108.907 135.737  c
110.558 132.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
145.000 120.000 m
145.000 123.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
147.523 133.236 m
149.618 132.214 l
149.827 132.214 l
149.827 139.482 l
149.827 139.965 149.847 140.265 149.887 140.384  c
149.928 140.502 150.011 140.593 150.138 140.657  c
150.265 140.720 150.523 140.756 150.913 140.765  c
150.913 141.000 l
147.675 141.000 l
147.675 140.765 l
148.082 140.756 148.344 140.721 148.462 140.660  c
148.581 140.599 148.663 140.516 148.710 140.412  c
148.757 140.309 148.780 139.999 148.780 139.482  c
148.780 134.836 l
148.780 134.210 148.759 133.808 148.716 133.630  c
148.687 133.495 148.633 133.395 148.554 133.332  c
148.476 133.268 148.382 133.236 148.272 133.236  c
148.115 133.236 147.897 133.302 147.618 133.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
188.000 120.000 m
188.000 123.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
186.523 133.236 m
188.618 132.214 l
188.827 132.214 l
188.827 139.482 l
188.827 139.965 188.847 140.265 188.887 140.384  c
188.928 140.502 189.011 140.593 189.138 140.657  c
189.265 140.720 189.523 140.756 189.913 140.765  c
189.913 141.000 l
186.675 141.000 l
186.675 140.765 l
187.082 140.756 187.344 140.721 187.462 140.660  c
187.581 140.599 187.663 140.516 187.710 140.412  c
187.757 140.309 187.780 139.999 187.780 139.482  c
187.780 134.836 l
187.780 134.210 187.759 133.808 187.716 133.630  c
187.687 133.495 187.633 133.395 187.554 133.332  c
187.476 133.268 187.382 133.236 187.272 133.236  c
187.115 133.236 186.897 133.302 186.618 133.433  c
h
193.625 139.768 m
193.823 139.768 193.991 139.837 194.126 139.974  c
194.261 140.112 194.329 140.278 194.329 140.473  c
194.329 140.667 194.260 140.833 194.123 140.971  c
193.985 141.109 193.819 141.177 193.625 141.177  c
193.430 141.177 193.264 141.109 193.126 140.971  c
192.989 140.833 192.920 140.667 192.920 140.473  c
192.920 140.274 192.989 140.107 193.126 139.971  c
193.264 139.836 193.430 139.768 193.625 139.768  c
h
200.643 132.392 m
200.147 133.471 l
197.558 133.471 l
196.993 134.627 l
198.114 134.792 199.003 135.208 199.659 135.877  c
200.222 136.453 200.503 137.130 200.503 137.908  c
200.503 138.361 200.411 138.780 200.227 139.165  c
200.043 139.550 199.811 139.878 199.532 140.149  c
199.252 140.420 198.941 140.638 198.599 140.803  c
198.112 141.036 197.613 141.152 197.101 141.152  c
196.584 141.152 196.209 141.064 195.974 140.888  c
195.739 140.713 195.622 140.519 195.622 140.308  c
195.622 140.189 195.670 140.084 195.768 139.993  c
195.865 139.902 195.988 139.857 196.136 139.857  c
196.246 139.857 196.342 139.874 196.425 139.908  c
196.507 139.942 196.648 140.028 196.847 140.168  c
197.164 140.388 197.486 140.498 197.812 140.498  c
198.307 140.498 198.741 140.311 199.116 139.936  c
199.491 139.562 199.678 139.106 199.678 138.568  c
199.678 138.048 199.511 137.562 199.176 137.112  c
198.842 136.661 198.381 136.313 197.793 136.067  c
197.331 135.877 196.703 135.767 195.907 135.737  c
197.558 132.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
23.0000 120.000 m
23.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 120.000 m
31.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
40.0000 120.000 m
40.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
49.0000 120.000 m
49.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
66.0000 120.000 m
66.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
75.0000 120.000 m
75.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
84.0000 120.000 m
84.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
93.0000 120.000 m
93.0000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
110.000 120.000 m
110.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
119.000 120.000 m
119.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
127.000 120.000 m
127.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
136.000 120.000 m
136.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
154.000 120.000 m
154.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
162.000 120.000 m
162.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
171.000 120.000 m
171.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
180.000 120.000 m
180.000 122.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
58.0000 157.500 m
58.0000 8.03834 l
S
Q
q
q
0 J
1 j
newpath
58.0000 158.000 m
54.0000 158.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
31 156 7 13 rc
newpath
41.7900 163.438 m
33.2100 163.438 l
33.2100 162.762 l
41.7900 162.762 l
h
f
Q
newpath
40.4697 162.747 m
40.4697 161.765 40.6178 160.920 40.9140 160.211  c
41.2102 159.502 41.6038 158.974 42.0947 158.627  c
42.4755 158.352 42.8691 158.214 43.2753 158.214  c
43.9355 158.214 44.5279 158.551 45.0527 159.224  c
45.7086 160.057 46.0366 161.187 46.0366 162.613  c
46.0366 163.612 45.8927 164.460 45.6049 165.159  c
45.3172 165.857 44.9501 166.364 44.5036 166.679  c
44.0572 166.994 43.6266 167.152 43.2119 167.152  c
42.3909 167.152 41.7075 166.667 41.1616 165.698  c
40.7003 164.882 40.4697 163.898 40.4697 162.747  c
h
41.7138 162.905 m
41.7138 164.090 41.8598 165.057 42.1518 165.806  c
42.3930 166.437 42.7527 166.752 43.2309 166.752  c
43.4594 166.752 43.6964 166.649 43.9418 166.444  c
44.1873 166.239 44.3735 165.895 44.5004 165.413  c
44.6951 164.685 44.7924 163.659 44.7924 162.334  c
44.7924 161.352 44.6909 160.533 44.4877 159.877  c
44.3354 159.391 44.1386 159.046 43.8974 158.843  c
43.7239 158.703 43.5144 158.633 43.2690 158.633  c
42.9812 158.633 42.7252 158.762 42.5009 159.021  c
42.1962 159.372 41.9889 159.924 41.8789 160.677  c
41.7688 161.431 41.7138 162.173 41.7138 162.905  c
h
48.6250 165.768 m
48.8238 165.768 48.9910 165.837 49.1264 165.974  c
49.2618 166.112 49.3295 166.278 49.3295 166.473  c
49.3295 166.667 49.2608 166.833 49.1232 166.971  c
48.9857 167.109 48.8196 167.177 48.6250 167.177  c
48.4303 167.177 48.2642 167.109 48.1267 166.971  c
47.9891 166.833 47.9204 166.667 47.9204 166.473  c
47.9204 166.274 47.9891 166.107 48.1267 165.971  c
48.2642 165.836 48.4303 165.768 48.6250 165.768  c
h
55.6430 158.392 m
55.1479 159.471 l
52.5581 159.471 l
51.9931 160.627 l
53.1145 160.792 54.0032 161.208 54.6591 161.877  c
55.2220 162.453 55.5034 163.130 55.5034 163.908  c
55.5034 164.361 55.4113 164.780 55.2272 165.165  c
55.0432 165.550 54.8115 165.878 54.5322 166.149  c
54.2529 166.420 53.9418 166.638 53.5991 166.803  c
53.1124 167.036 52.6131 167.152 52.1010 167.152  c
51.5848 167.152 51.2092 167.064 50.9743 166.888  c
50.7395 166.713 50.6220 166.519 50.6220 166.308  c
50.6220 166.189 50.6707 166.084 50.7680 165.993  c
50.8654 165.902 50.9881 165.857 51.1362 165.857  c
51.2462 165.857 51.3425 165.874 51.4250 165.908  c
51.5075 165.942 51.6482 166.028 51.8471 166.168  c
52.1645 166.388 52.4861 166.498 52.8120 166.498  c
53.3071 166.498 53.7419 166.311 54.1164 165.936  c
54.4909 165.562 54.6782 165.106 54.6782 164.568  c
54.6782 164.048 54.5110 163.562 54.1767 163.112  c
53.8424 162.661 53.3811 162.313 52.7929 162.067  c
52.3317 161.877 51.7032 161.767 50.9077 161.737  c
52.5581 158.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 120.000 m
54.0000 120.000 l
S
Q
q
0 J
1 j
newpath
58.0000 83.0000 m
54.0000 83.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
40.4697 87.7470 m
40.4697 86.7653 40.6178 85.9200 40.9140 85.2111  c
41.2102 84.5023 41.6038 83.9744 42.0947 83.6274  c
42.4755 83.3523 42.8691 83.2148 43.2753 83.2148  c
43.9355 83.2148 44.5279 83.5512 45.0527 84.2241  c
45.7086 85.0577 46.0366 86.1876 46.0366 87.6137  c
46.0366 88.6124 45.8927 89.4609 45.6049 90.1591  c
45.3172 90.8574 44.9501 91.3641 44.5036 91.6794  c
44.0572 91.9947 43.6266 92.1523 43.2119 92.1523  c
42.3909 92.1523 41.7075 91.6678 41.1616 90.6987  c
40.7003 89.8820 40.4697 88.8981 40.4697 87.7470  c
h
41.7138 87.9057 m
41.7138 89.0906 41.8598 90.0576 42.1518 90.8066  c
42.3930 91.4371 42.7527 91.7524 43.2309 91.7524  c
43.4594 91.7524 43.6964 91.6498 43.9418 91.4445  c
44.1873 91.2393 44.3735 90.8955 44.5004 90.4130  c
44.6951 89.6852 44.7924 88.6590 44.7924 87.3344  c
44.7924 86.3527 44.6909 85.5338 44.4877 84.8779  c
44.3354 84.3912 44.1386 84.0463 43.8974 83.8432  c
43.7239 83.7036 43.5144 83.6337 43.2690 83.6337  c
42.9812 83.6337 42.7252 83.7628 42.5009 84.0210  c
42.1962 84.3722 41.9889 84.9244 41.8789 85.6777  c
41.7688 86.4309 41.7138 87.1736 41.7138 87.9057  c
h
48.6250 90.7685 m
48.8238 90.7685 48.9910 90.8373 49.1264 90.9748  c
49.2618 91.1123 49.3295 91.2784 49.3295 91.4731  c
49.3295 91.6678 49.2608 91.8339 49.1232 91.9714  c
48.9857 92.1089 48.8196 92.1777 48.6250 92.1777  c
48.4303 92.1777 48.2642 92.1089 48.1267 91.9714  c
47.9891 91.8339 47.9204 91.6678 47.9204 91.4731  c
47.9204 91.2742 47.9891 91.1071 48.1267 90.9716  c
48.2642 90.8362 48.4303 90.7685 48.6250 90.7685  c
h
55.6430 83.3925 m
55.1479 84.4716 l
52.5581 84.4716 l
51.9931 85.6269 l
53.1145 85.7919 54.0032 86.2088 54.6591 86.8774  c
55.2220 87.4529 55.5034 88.1300 55.5034 88.9086  c
55.5034 89.3614 55.4113 89.7804 55.2272 90.1655  c
55.0432 90.5506 54.8115 90.8785 54.5322 91.1494  c
54.2529 91.4202 53.9418 91.6381 53.5991 91.8032  c
53.1124 92.0359 52.6131 92.1523 52.1010 92.1523  c
51.5848 92.1523 51.2092 92.0645 50.9743 91.8889  c
50.7395 91.7133 50.6220 91.5196 50.6220 91.3081  c
50.6220 91.1896 50.6707 91.0848 50.7680 90.9939  c
50.8654 90.9029 50.9881 90.8574 51.1362 90.8574  c
51.2462 90.8574 51.3425 90.8743 51.4250 90.9082  c
51.5075 90.9420 51.6482 91.0288 51.8471 91.1684  c
52.1645 91.3885 52.4861 91.4985 52.8120 91.4985  c
53.3071 91.4985 53.7419 91.3112 54.1164 90.9367  c
54.4909 90.5622 54.6782 90.1062 54.6782 89.5688  c
54.6782 89.0483 54.5110 88.5627 54.1767 88.1120  c
53.8424 87.6613 53.3811 87.3133 52.7929 87.0678  c
52.3317 86.8774 51.7032 86.7674 50.9077 86.7377  c
52.5581 83.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 45.0000 m
54.0000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
51.5234 47.2368 m
53.6181 46.2148 l
53.8276 46.2148 l
53.8276 53.4829 l
53.8276 53.9653 53.8477 54.2657 53.8879 54.3842  c
53.9281 54.5027 54.0117 54.5937 54.1386 54.6572  c
54.2656 54.7207 54.5237 54.7566 54.9130 54.7651  c
54.9130 55.0000 l
51.6757 55.0000 l
51.6757 54.7651 l
52.0820 54.7566 52.3444 54.7217 52.4628 54.6604  c
52.5813 54.5990 52.6639 54.5165 52.7104 54.4128  c
52.7570 54.3091 52.7802 53.9991 52.7802 53.4829  c
52.7802 48.8364 l
52.7802 48.2101 52.7591 47.8081 52.7168 47.6303  c
52.6871 47.4949 52.6332 47.3955 52.5549 47.3320  c
52.4766 47.2685 52.3824 47.2368 52.2724 47.2368  c
52.1158 47.2368 51.8979 47.3024 51.6186 47.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 8.00000 m
54.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
41.5234 10.2368 m
43.6181 9.21484 l
43.8276 9.21484 l
43.8276 16.4829 l
43.8276 16.9653 43.8477 17.2657 43.8879 17.3842  c
43.9281 17.5027 44.0117 17.5937 44.1386 17.6572  c
44.2656 17.7207 44.5237 17.7566 44.9130 17.7651  c
44.9130 18.0000 l
41.6757 18.0000 l
41.6757 17.7651 l
42.0820 17.7566 42.3444 17.7217 42.4628 17.6604  c
42.5813 17.5990 42.6639 17.5165 42.7104 17.4128  c
42.7570 17.3091 42.7802 16.9991 42.7802 16.4829  c
42.7802 11.8364 l
42.7802 11.2101 42.7591 10.8081 42.7168 10.6303  c
42.6871 10.4949 42.6332 10.3955 42.5549 10.3320  c
42.4766 10.2685 42.3824 10.2368 42.2724 10.2368  c
42.1158 10.2368 41.8979 10.3024 41.6186 10.4335  c
h
48.6250 16.7685 m
48.8238 16.7685 48.9910 16.8373 49.1264 16.9748  c
49.2618 17.1123 49.3295 17.2784 49.3295 17.4731  c
49.3295 17.6678 49.2608 17.8339 49.1232 17.9714  c
48.9857 18.1089 48.8196 18.1777 48.6250 18.1777  c
48.4303 18.1777 48.2642 18.1089 48.1267 17.9714  c
47.9891 17.8339 47.9204 17.6678 47.9204 17.4731  c
47.9204 17.2742 47.9891 17.1071 48.1267 16.9716  c
48.2642 16.8362 48.4303 16.7685 48.6250 16.7685  c
h
55.6430 9.39257 m
55.1479 10.4716 l
52.5581 10.4716 l
51.9931 11.6269 l
53.1145 11.7919 54.0032 12.2088 54.6591 12.8774  c
55.2220 13.4529 55.5034 14.1300 55.5034 14.9086  c
55.5034 15.3614 55.4113 15.7804 55.2272 16.1655  c
55.0432 16.5506 54.8115 16.8785 54.5322 17.1494  c
54.2529 17.4202 53.9418 17.6381 53.5991 17.8032  c
53.1124 18.0359 52.6131 18.1523 52.1010 18.1523  c
51.5848 18.1523 51.2092 18.0645 50.9743 17.8889  c
50.7395 17.7133 50.6220 17.5196 50.6220 17.3081  c
50.6220 17.1896 50.6707 17.0848 50.7680 16.9939  c
50.8654 16.9029 50.9881 16.8574 51.1362 16.8574  c
51.2462 16.8574 51.3425 16.8743 51.4250 16.9082  c
51.5075 16.9420 51.6482 17.0288 51.8471 17.1684  c
52.1645 17.3885 52.4861 17.4985 52.8120 17.4985  c
53.3071 17.4985 53.7419 17.3112 54.1164 16.9367  c
54.4909 16.5622 54.6782 16.1062 54.6782 15.5688  c
54.6782 15.0483 54.5110 14.5627 54.1767 14.1120  c
53.8424 13.6613 53.3811 13.3133 52.7929 13.0678  c
52.3317 12.8774 51.7032 12.7674 50.9077 12.7377  c
52.5581 9.39257 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 150.000 m
56.0000 150.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 143.000 m
56.0000 143.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 135.000 m
56.0000 135.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 128.000 m
56.0000 128.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 113.000 m
56.0000 113.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 105.000 m
56.0000 105.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 98.0000 m
56.0000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 90.0000 m
56.0000 90.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 75.0000 m
56.0000 75.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 68.0000 m
56.0000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 60.0000 m
56.0000 60.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 53.0000 m
56.0000 53.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 38.0000 m
56.0000 38.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 30.0000 m
56.0000 30.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 23.0000 m
56.0000 23.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 16.0000 m
56.0000 16.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 208 176 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
