線形代数の計算にはあらかじめ関数パッケージ(LinearAlgebra)を呼び出しておく．
> with(LinearAlgebra):
行列式(Determinant)
> A0 := Matrix([[x,y],[z,u]]); Determinant(A0);
A0 := Matrix(2, 2, {(1, 1) = x, (1, 2) = y, (2, 1) = z, (2, 2) = u})
                                  x u - y z
逆行列(MatrixInverse)
> A2:=MatrixInverse(A0); simplify(A0.A2);
A2 := Matrix(2, 2, {(1, 1) = u/(x*u-y*z), (1, 2) = -y/(x*u-y*z), (2, 1) =
-z/(x*u-y*z), (2, 2) = x/(x*u-y*z)})
Matrix(2, 2, {(1, 1) = 1, (1, 2) = 0, (2, 1) = 0, (2, 2) = 1})
その他の演算
随伴(Adjoint)，対角和(Trace)，ジョルダン標準形(JordanForm)などもコマンドだけで求まる．詳しくはヘルプ参照．
課題
1. 前節の課題２の連立方程式の係数行列の行列式を求めよ．
2. 前節の課題２の連立方程式の係数行列の逆行列を求めよ．またベクトルbに作用して解を求めよ．
解答例
1.
> with(LinearAlgebra): eqs:={x+y-z=2,2*x-3*y+z=4,4*x-y+3*z=1};
> A,b:=GenerateMatrix(eqs,{x,y,z}); Determinant(A);
eqs := {x+y-z = 2, 2*x-3*y+z = 4, 4*x-y+3*z = 1}
A, b := Matrix(3, 3, {(1, 1) = 1, (1, 2) = 1, (1, 3) = -1, (2, 1) = 2, (2, 2) =
-3, (2, 3) = 1, (3, 1) = 4, (3, 2) = -1, (3, 3) = 3}), Vector(3, {(1) = 2, (2) =
4, (3) = 1})
                                     -20
2.
> MatrixInverse(A); simplify(MatrixInverse(A).b);
Matrix(3, 3, {(1, 1) = 2/5, (1, 2) = 1/10, (1, 3) = 1/10, (2, 1) = 1/10, (2, 2)
= -7/20, (2, 3) = 3/20, (3, 1) = -1/2, (3, 2) = -1/4, (3, 3) = 1/4})
Vector(3, {(1) = 13/10, (2) = -21/20, (3) = -7/4})
固有値(EigenVectors)
解説
線形代数の計算にはあらかじめ関数パッケージ(LinearAlgebra)を呼び出しておく．
> with(LinearAlgebra):
固有値(EigenVectors)
固有値(Eigenvalues)と固有ベクトルを共に求めるにはEigenvectorsを使う．下の例では，固有値と固有ベクトルを変数l,vに代入している．
> A0 := Matrix(2, 2, [[1,2], [2,1]]); l,v:=Eigenvectors(A0);
A0 := Matrix(2, 2, {(1, 1) = 1, (1, 2) = 2, (2, 1) = 2, (2, 2) = 1})
l, v := Vector(2, {(1) = -1, (2) = 3}), Matrix(2, 2, {(1, 1) = -1, (1, 2) = 1,
(2, 1) = 1, (2, 2) = 1})
固有ベクトルの取り出し(Column)
行列の列を要素とするベクトル生成Columnを使って，一番目の固有値に対応する固有ベクトルを取り出す．
> Column(v,1);
Vector(2, {(1) = -1, (2) = 1})
これを使って，固有値(l)と固有ベクトル(v)の関係
A0.v=l.v
が確認できる．
> A0.Column(v,1); l[1]*Column(v,1);
Vector(2, {(1) = 1, (2) = -1})
Vector(2, {(1) = 1, (2) = -1})
固有値ベクトルの規格化(Normalize)
> ?Normalize;
固有値ベクトルを規格化するときには，以下のコマンドを使う．
> Normalize(Column(v,1),Euclidean);
Vector(2, {(1) = -(1/2)*sqrt(2), (2) = (1/2)*sqrt(2)})
対角化
固有値ベクトルで作るベクトルを用いて，次のとおり行列の対角化ができる．
> Transpose(v).A0.v;
Matrix(2, 2, {(1, 1) = -2, (1, 2) = 0, (2, 1) = 0, (2, 2) = 6})
その他の演算
随伴(Adjoint)，対角和(Trace)，ジョルダン標準形(JordanForm)などもコマンドだけで求まる．詳しくはヘルプ参照．
課題
1. 行列A = (Matrix(3, 3, {(1, 1) = 1, (1, 2) = -2, (1, 3) = 1, (2, 1) = -1, (2, 2)
= 2, (2, 3) = 1, (3, 1) = 1, (3, 2) = 2, (3, 3) =
1}))の固有値を固有方程式abs(A-`&lambda;E`) =
0を解いて求めよ．EigenVectorsを用いて固有値と固有ベクトルを求めよ．固有値，固有ベクトルの関係
A.v = `&lambda;v`
を確認せよ．さらに，固有ベクトルをノルム1に規格化せよ．
2. 行列A = (Matrix(3, 3, {(1, 1) = 2, (1, 2) = 0, (1, 3) = 1, (2, 1) = 0, (2, 2) =
3, (2, 3) = 0, (3, 1) = 1, (3, 2) = 0, (3, 3) = 2}))を対角化する変換行列Pを求め，対角化せよ．
解答例
1.
> A:=Matrix([[1,-2,1],[-1,2,1],[1,2,1]]); E:=Matrix(3,3,shape=identity):
> eq:=Determinant(A-x*E); solve(eq,x);
A := Matrix(3, 3, {(1, 1) = 1, (1, 2) = -2, (1, 3) = 1, (2, 1) = -1, (2, 2) = 2,
(2, 3) = 1, (3, 1) = 1, (3, 2) = 2, (3, 3) = 1})
                                   2    3    
                                4 x  - x  - 8
                                  (1/2)       (1/2)
                          2, 1 + 5     , 1 - 5     
> l,v:=Eigenvectors(A); v1:=Column(v,3); evalf(A.v1); evalf(l[3].v1);
> Normalize(v1,Euclidean); evalf(Normalize(v1,Euclidean));
l, v := Vector(3, {(1) = 1+sqrt(5), (2) = 1-sqrt(5), (3) = 2}), Matrix(3, 3,
{(1, 1) = (-3+sqrt(5))*sqrt(5)/(-5+3*sqrt(5)), (1, 2) =
-(-3-sqrt(5))*sqrt(5)/(-5-3*sqrt(5)), (1, 3) = 1, (2, 1) =
-(-5+sqrt(5))/(-5+3*sqrt(5)), (2, 2) = -(-5-sqrt(5))/(-5-3*sqrt(5)), (2, 3) = 0,
(3, 1) = 1, (3, 2) = 1, (3, 3) = 1})
v1 := Vector(3, {(1) = 1, (2) = 0, (3) = 1})
Vector(3, {(1) = 2., (2) = 0., (3) = 2.})
Vector(3, {(1) = 2., (2) = 0., (3) = 2.})
Vector(3, {(1) = (1/2)*sqrt(2), (2) = 0, (3) = (1/2)*sqrt(2)})
Vector(3, {(1) = .7071067810, (2) = 0., (3) = .7071067810})
2.
> A:=Matrix([[2,0,1],[0,3,0],[1,0,2]]); l,v:=Eigenvectors(A);
> MatrixInverse(v).A.v;
A := Matrix(3, 3, {(1, 1) = 2, (1, 2) = 0, (1, 3) = 1, (2, 1) = 0, (2, 2) = 3,
(2, 3) = 0, (3, 1) = 1, (3, 2) = 0, (3, 3) = 2})
l, v := Vector(3, {(1) = 3, (2) = 3, (3) = 1}), Matrix(3, 3, {(1, 1) = 1, (1, 2)
= 0, (1, 3) = -1, (2, 1) = 0, (2, 2) = 1, (2, 3) = 0, (3, 1) = 1, (3, 2) = 0,
(3, 3) = 1})
Matrix(3, 3, {(1, 1) = 3, (1, 2) = 0, (1, 3) = 0, (2, 1) = 0, (2, 2) = 3, (2, 3)
= 0, (3, 1) = 0, (3, 2) = 0, (3, 3) = 1})
