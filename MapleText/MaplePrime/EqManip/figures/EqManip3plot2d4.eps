%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 214 575 577
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N7ŒŽ28“ú 14Žž14•ª30•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
290 189 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
290.000 0 l
290.000 189.000 l
0 189.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 280 179 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
33.0000 6.04195 244.992 138.958 rc
1.00000 0 0 RG
newpath
34.0000 8.04196 m
35.2723 9.56568 l
36.3793 10.8784 l
37.6242 12.3405 l
38.8775 13.7972 l
40.1247 15.2321 l
41.2811 16.5492 l
42.4784 17.8999 l
43.7167 19.2827 l
44.9511 20.6471 l
46.2207 22.0361 l
47.3391 23.2475 l
48.5980 24.5979 l
49.8622 25.9399 l
51.0804 27.2198 l
52.1867 28.3711 l
53.5021 29.7264 l
54.6165 30.8630 l
55.9128 32.1721 l
57.0602 33.3192 l
58.3191 34.5654 l
59.5178 35.7400 l
60.7686 36.9532 l
61.9173 38.0564 l
63.1562 39.2346 l
64.4431 40.4457 l
65.5634 41.4896 l
66.7733 42.6062 l
68.0232 43.7480 l
69.2461 44.8538 l
70.4292 45.9131 l
71.7429 47.0772 l
72.9233 48.1125 l
74.1837 49.2068 l
75.3258 50.1886 l
76.5743 51.2514 l
77.7491 52.2415 l
78.9772 53.2662 l
80.1778 54.2581 l
81.4347 55.2860 l
82.6452 56.2659 l
83.8832 57.2580 l
85.1110 58.2319 l
86.2391 59.1181 l
87.5321 60.1238 l
88.6886 61.0143 l
89.9216 61.9544 l
91.1018 62.8452 l
92.4122 63.8244 l
93.5470 64.6637 l
94.8349 65.6069 l
96.0087 66.4579 l
97.2927 67.3794 l
98.4006 68.1667 l
99.6623 69.0547 l
100.881 69.9037 l
102.099 70.7438 l
103.312 71.5724 l
104.478 72.3607 l
105.738 73.2045 l
106.939 74.0006 l
108.203 74.8301 l
109.348 75.5736 l
110.612 76.3873 l
111.824 77.1589 l
113.032 77.9209 l
114.294 78.7090 l
115.457 79.4277 l
116.647 80.1567 l
117.962 80.9535 l
119.152 81.6677 l
120.369 82.3910 l
121.607 83.1193 l
122.745 83.7823 l
123.958 84.4825 l
125.161 85.1706 l
126.449 85.8993 l
127.585 86.5361 l
128.896 87.2637 l
130.079 87.9139 l
131.249 88.5511 l
132.508 89.2298 l
133.772 89.9045 l
134.922 90.5125 l
136.143 91.1521 l
137.335 91.7705 l
138.626 92.4343 l
139.744 93.0033 l
141.028 93.6508 l
142.235 94.2536 l
143.430 94.8450 l
144.626 95.4315 l
145.846 96.0241 l
147.139 96.6463 l
148.325 97.2115 l
149.495 97.7644 l
150.746 98.3501 l
151.995 98.9291 l
153.115 99.4442 l
154.443 100.048 l
155.553 100.550 l
156.852 101.131 l
158.092 101.681 l
159.199 102.168 l
160.444 102.710 l
161.697 103.252 l
162.945 103.786 l
164.101 104.277 l
165.298 104.782 l
166.537 105.299 l
167.771 105.810 l
169.041 106.331 l
170.159 106.787 l
171.418 107.296 l
172.682 107.803 l
173.900 108.287 l
175.007 108.724 l
176.322 109.239 l
177.437 109.673 l
178.733 110.173 l
179.880 110.612 l
181.139 111.091 l
182.338 111.544 l
183.589 112.013 l
184.737 112.441 l
185.976 112.899 l
187.263 113.372 l
188.383 113.781 l
189.593 114.219 l
190.843 114.670 l
192.066 115.108 l
193.249 115.530 l
194.563 115.995 l
195.743 116.410 l
197.004 116.852 l
198.146 117.249 l
199.394 117.682 l
200.569 118.087 l
201.797 118.509 l
202.998 118.919 l
204.255 119.346 l
205.465 119.756 l
206.703 120.174 l
207.931 120.586 l
209.059 120.964 l
210.352 121.395 l
211.509 121.780 l
212.742 122.189 l
213.922 122.579 l
215.232 123.011 l
216.367 123.385 l
217.655 123.807 l
218.829 124.192 l
220.113 124.612 l
221.221 124.974 l
223.701 125.783 l
231.024 128.168 l
232.168 128.541 l
233.433 128.954 l
234.644 129.350 l
235.852 129.745 l
237.114 130.159 l
238.277 130.542 l
239.468 130.934 l
240.782 131.368 l
241.972 131.763 l
243.189 132.167 l
244.427 132.580 l
245.565 132.961 l
246.778 133.369 l
247.982 133.775 l
249.269 134.212 l
250.405 134.599 l
251.716 135.048 l
252.899 135.456 l
254.070 135.861 l
255.329 136.299 l
256.592 136.742 l
257.742 137.148 l
258.963 137.581 l
260.155 138.007 l
261.447 138.472 l
262.565 138.878 l
263.848 139.347 l
265.055 139.791 l
266.250 140.235 l
267.446 140.683 l
268.666 141.143 l
269.960 141.636 l
271.145 142.092 l
272.316 142.546 l
273.567 143.036 l
274.815 143.529 l
275.992 144.000 l
S
cliprestore
newpath
0 0 m
0 179.000 l
280.000 179.000 l
280.000 0 l
h
W
Q
q
33.0000 6.04195 244.992 138.958 rc
0.196078 0.803922 0.196078 RG
newpath
34.0000 8.04196 m
35.2723 9.56568 l
36.3793 10.8784 l
37.6242 12.3405 l
38.8775 13.7972 l
40.1247 15.2321 l
41.2811 16.5492 l
42.4784 17.8999 l
43.7167 19.2827 l
44.9511 20.6471 l
46.2207 22.0361 l
47.3391 23.2475 l
48.5980 24.5979 l
49.8622 25.9399 l
51.0804 27.2198 l
52.1867 28.3711 l
53.5021 29.7264 l
54.6165 30.8630 l
55.9128 32.1721 l
57.0602 33.3192 l
58.3191 34.5654 l
59.5178 35.7400 l
60.7686 36.9532 l
61.9173 38.0563 l
63.1562 39.2346 l
64.4431 40.4457 l
65.5634 41.4895 l
66.7733 42.6061 l
68.0232 43.7479 l
69.2461 44.8537 l
70.4292 45.9130 l
71.7429 47.0770 l
72.9233 48.1123 l
74.1837 49.2065 l
75.3258 50.1883 l
76.5743 51.2511 l
77.7491 52.2411 l
78.9772 53.2657 l
80.1778 54.2575 l
81.4347 55.2853 l
82.6452 56.2651 l
83.8832 57.2570 l
85.1110 58.2308 l
86.2391 59.1169 l
87.5321 60.1224 l
88.6886 61.0126 l
89.9216 61.9525 l
91.1018 62.8431 l
92.4122 63.8220 l
93.5470 64.6610 l
94.8349 65.6039 l
96.0087 66.4545 l
97.2927 67.3756 l
98.4006 68.1624 l
99.6623 69.0499 l
100.881 69.8984 l
102.099 70.7378 l
103.312 71.5658 l
104.478 72.3534 l
105.738 73.1964 l
106.939 73.9917 l
108.203 74.8202 l
109.348 75.5628 l
110.612 76.3754 l
111.824 77.1457 l
113.032 77.9066 l
114.294 78.6932 l
115.457 79.4105 l
116.647 80.1380 l
117.962 80.9330 l
119.152 81.6454 l
120.369 82.3667 l
121.607 83.0929 l
122.745 83.7539 l
123.958 84.4516 l
125.161 85.1372 l
126.449 85.8630 l
127.585 86.4972 l
128.896 87.2215 l
130.079 87.8684 l
131.249 88.5023 l
132.508 89.1771 l
133.772 89.8476 l
134.922 90.4517 l
136.143 91.0869 l
137.335 91.7006 l
138.626 92.3592 l
139.744 92.9233 l
141.028 93.5649 l
142.235 94.1618 l
143.430 94.7471 l
144.626 95.3271 l
145.846 95.9128 l
147.139 96.5273 l
148.325 97.0849 l
149.495 97.6300 l
150.746 98.2069 l
151.995 98.7767 l
153.115 99.2831 l
154.443 99.8769 l
155.553 100.368 l
156.852 100.938 l
158.092 101.476 l
159.199 101.952 l
160.444 102.482 l
161.697 103.009 l
162.945 103.529 l
164.101 104.007 l
165.298 104.496 l
166.537 104.997 l
167.771 105.492 l
169.041 105.995 l
170.159 106.434 l
171.418 106.923 l
172.682 107.410 l
173.900 107.874 l
175.007 108.291 l
176.322 108.782 l
177.437 109.194 l
178.733 109.668 l
179.880 110.084 l
181.139 110.535 l
182.338 110.961 l
183.589 111.401 l
184.737 111.800 l
185.976 112.227 l
187.263 112.666 l
188.383 113.044 l
189.593 113.449 l
190.843 113.863 l
192.066 114.264 l
193.249 114.647 l
194.563 115.069 l
195.743 115.444 l
197.004 115.841 l
198.146 116.197 l
199.394 116.582 l
200.569 116.941 l
201.797 117.312 l
202.998 117.671 l
204.255 118.044 l
205.465 118.399 l
206.703 118.758 l
207.931 119.111 l
209.059 119.432 l
210.352 119.797 l
211.509 120.119 l
212.742 120.460 l
213.922 120.783 l
215.232 121.137 l
216.367 121.441 l
217.655 121.783 l
218.829 122.091 l
220.113 122.425 l
221.221 122.710 l
222.482 123.032 l
223.701 123.339 l
224.919 123.643 l
226.132 123.943 l
227.298 124.229 l
228.558 124.534 l
229.760 124.822 l
231.024 125.123 l
232.168 125.392 l
233.433 125.686 l
234.644 125.965 l
235.852 126.241 l
237.114 126.526 l
238.277 126.786 l
239.468 127.050 l
240.782 127.338 l
241.972 127.596 l
243.189 127.857 l
244.427 128.121 l
245.565 128.360 l
246.778 128.613 l
247.982 128.861 l
249.269 129.124 l
250.405 129.354 l
251.716 129.617 l
252.899 129.851 l
254.070 130.081 l
255.329 130.325 l
256.592 130.568 l
257.742 130.787 l
258.963 131.017 l
260.155 131.240 l
261.447 131.478 l
262.565 131.683 l
263.848 131.915 l
265.055 132.132 l
266.250 132.344 l
267.446 132.554 l
268.666 132.766 l
269.960 132.989 l
271.145 133.191 l
272.316 133.388 l
273.567 133.597 l
274.815 133.804 l
275.992 133.997 l
S
cliprestore
newpath
0 0 m
0 179.000 l
280.000 179.000 l
280.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
34.0000 147.000 m
275.992 147.000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
147 164 14 15 rc
newpath
153.278 170.255 m
153.486 170.475 153.642 170.695 153.748 170.915  c
153.824 171.067 153.949 171.467 154.123 172.115  c
154.681 171.277 l
154.829 171.074 155.009 170.880 155.221 170.696  c
155.432 170.512 155.619 170.386 155.779 170.318  c
155.881 170.276 155.993 170.255 156.116 170.255  c
156.298 170.255 156.443 170.304 156.551 170.401  c
156.658 170.498 156.712 170.617 156.712 170.756  c
156.712 170.917 156.681 171.027 156.617 171.086  c
156.499 171.192 156.363 171.245 156.211 171.245  c
156.122 171.245 156.027 171.226 155.925 171.188  c
155.726 171.120 155.593 171.086 155.525 171.086  c
155.424 171.086 155.303 171.146 155.164 171.264  c
154.901 171.484 154.588 171.910 154.224 172.540  c
154.745 174.724 l
154.825 175.058 154.893 175.258 154.948 175.324  c
155.003 175.389 155.058 175.422 155.113 175.422  c
155.202 175.422 155.305 175.373 155.424 175.276  c
155.657 175.081 155.856 174.827 156.021 174.514  c
156.243 174.628 l
155.976 175.128 155.638 175.543 155.227 175.873  c
154.994 176.059 154.798 176.152 154.637 176.152  c
154.400 176.152 154.211 176.019 154.072 175.752  c
153.983 175.587 153.799 174.876 153.520 173.619  c
152.859 174.766 152.330 175.504 151.933 175.835  c
151.675 176.046 151.425 176.152 151.184 176.152  c
151.014 176.152 150.860 176.091 150.720 175.968  c
150.619 175.875 150.568 175.750 150.568 175.593  c
150.568 175.454 150.614 175.337 150.708 175.244  c
150.801 175.151 150.915 175.105 151.050 175.105  c
151.186 175.105 151.330 175.172 151.482 175.308  c
151.592 175.405 151.677 175.454 151.736 175.454  c
151.787 175.454 151.852 175.420 151.933 175.352  c
152.132 175.191 152.402 174.844 152.745 174.311  c
153.088 173.778 153.312 173.393 153.418 173.156  c
153.156 172.127 153.014 171.584 152.993 171.524  c
152.895 171.249 152.768 171.055 152.612 170.940  c
152.455 170.826 152.225 170.769 151.920 170.769  c
151.823 170.769 151.710 170.773 151.584 170.782  c
151.584 170.553 l
h
f
Q
cliprestore
newpath
0 0 m
0 179.000 l
280.000 179.000 l
280.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
34.0000 147.000 m
34.0000 151.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
36.4697 164.747 m
36.4697 163.765 36.6178 162.920 36.9140 162.211  c
37.2102 161.502 37.6038 160.974 38.0947 160.627  c
38.4755 160.352 38.8691 160.214 39.2753 160.214  c
39.9355 160.214 40.5279 160.551 41.0527 161.224  c
41.7086 162.057 42.0366 163.187 42.0366 164.613  c
42.0366 165.612 41.8927 166.460 41.6049 167.159  c
41.3172 167.857 40.9501 168.364 40.5036 168.679  c
40.0572 168.994 39.6266 169.152 39.2119 169.152  c
38.3909 169.152 37.7075 168.667 37.1616 167.698  c
36.7003 166.882 36.4697 165.898 36.4697 164.747  c
h
37.7138 164.905 m
37.7138 166.090 37.8598 167.057 38.1518 167.806  c
38.3930 168.437 38.7527 168.752 39.2309 168.752  c
39.4594 168.752 39.6964 168.649 39.9418 168.444  c
40.1873 168.239 40.3735 167.895 40.5004 167.413  c
40.6951 166.685 40.7924 165.659 40.7924 164.334  c
40.7924 163.352 40.6909 162.533 40.4877 161.877  c
40.3354 161.391 40.1386 161.046 39.8974 160.843  c
39.7239 160.703 39.5144 160.633 39.2690 160.633  c
38.9812 160.633 38.7252 160.762 38.5009 161.021  c
38.1962 161.372 37.9889 161.924 37.8789 162.677  c
37.7688 163.431 37.7138 164.173 37.7138 164.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
94.0000 147.000 m
94.0000 151.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
91.4697 164.747 m
91.4697 163.765 91.6178 162.920 91.9140 162.211  c
92.2102 161.502 92.6038 160.974 93.0947 160.627  c
93.4755 160.352 93.8691 160.214 94.2753 160.214  c
94.9355 160.214 95.5279 160.551 96.0527 161.224  c
96.7086 162.057 97.0366 163.187 97.0366 164.613  c
97.0366 165.612 96.8927 166.460 96.6049 167.159  c
96.3172 167.857 95.9501 168.364 95.5036 168.679  c
95.0572 168.994 94.6266 169.152 94.2119 169.152  c
93.3909 169.152 92.7075 168.667 92.1616 167.698  c
91.7003 166.882 91.4697 165.898 91.4697 164.747  c
h
92.7138 164.905 m
92.7138 166.090 92.8598 167.057 93.1518 167.806  c
93.3930 168.437 93.7527 168.752 94.2309 168.752  c
94.4594 168.752 94.6964 168.649 94.9418 168.444  c
95.1873 168.239 95.3735 167.895 95.5004 167.413  c
95.6951 166.685 95.7924 165.659 95.7924 164.334  c
95.7924 163.352 95.6909 162.533 95.4877 161.877  c
95.3354 161.391 95.1386 161.046 94.8974 160.843  c
94.7239 160.703 94.5144 160.633 94.2690 160.633  c
93.9812 160.633 93.7252 160.762 93.5009 161.021  c
93.1962 161.372 92.9889 161.924 92.8789 162.677  c
92.7688 163.431 92.7138 164.173 92.7138 164.905  c
h
99.6250 167.768 m
99.8238 167.768 99.9910 167.837 100.126 167.974  c
100.261 168.112 100.329 168.278 100.329 168.473  c
100.329 168.667 100.260 168.833 100.123 168.971  c
99.9857 169.109 99.8196 169.177 99.6250 169.177  c
99.4303 169.177 99.2642 169.109 99.1267 168.971  c
98.9891 168.833 98.9204 168.667 98.9204 168.473  c
98.9204 168.274 98.9891 168.107 99.1267 167.971  c
99.2642 167.836 99.4303 167.768 99.6250 167.768  c
h
106.643 160.392 m
106.147 161.471 l
103.558 161.471 l
102.993 162.627 l
104.114 162.792 105.003 163.208 105.659 163.877  c
106.222 164.453 106.503 165.130 106.503 165.908  c
106.503 166.361 106.411 166.780 106.227 167.165  c
106.043 167.550 105.811 167.878 105.532 168.149  c
105.252 168.420 104.941 168.638 104.599 168.803  c
104.112 169.036 103.613 169.152 103.101 169.152  c
102.584 169.152 102.209 169.064 101.974 168.888  c
101.739 168.713 101.622 168.519 101.622 168.308  c
101.622 168.189 101.670 168.084 101.768 167.993  c
101.865 167.902 101.988 167.857 102.136 167.857  c
102.246 167.857 102.342 167.874 102.425 167.908  c
102.507 167.942 102.648 168.028 102.847 168.168  c
103.164 168.388 103.486 168.498 103.812 168.498  c
104.307 168.498 104.741 168.311 105.116 167.936  c
105.491 167.562 105.678 167.106 105.678 166.568  c
105.678 166.048 105.511 165.562 105.176 165.112  c
104.842 164.661 104.381 164.313 103.793 164.067  c
103.331 163.877 102.703 163.767 101.907 163.737  c
103.558 160.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
155.000 147.000 m
155.000 151.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
157.523 161.236 m
159.618 160.214 l
159.827 160.214 l
159.827 167.482 l
159.827 167.965 159.847 168.265 159.887 168.384  c
159.928 168.502 160.011 168.593 160.138 168.657  c
160.265 168.720 160.523 168.756 160.913 168.765  c
160.913 169.000 l
157.675 169.000 l
157.675 168.765 l
158.082 168.756 158.344 168.721 158.462 168.660  c
158.581 168.599 158.663 168.516 158.710 168.412  c
158.757 168.309 158.780 167.999 158.780 167.482  c
158.780 162.836 l
158.780 162.210 158.759 161.808 158.716 161.630  c
158.687 161.495 158.633 161.395 158.554 161.332  c
158.476 161.268 158.382 161.236 158.272 161.236  c
158.115 161.236 157.897 161.302 157.618 161.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
215.000 147.000 m
215.000 151.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
213.523 161.236 m
215.618 160.214 l
215.827 160.214 l
215.827 167.482 l
215.827 167.965 215.847 168.265 215.887 168.384  c
215.928 168.502 216.011 168.593 216.138 168.657  c
216.265 168.720 216.523 168.756 216.913 168.765  c
216.913 169.000 l
213.675 169.000 l
213.675 168.765 l
214.082 168.756 214.344 168.721 214.462 168.660  c
214.581 168.599 214.663 168.516 214.710 168.412  c
214.757 168.309 214.780 167.999 214.780 167.482  c
214.780 162.836 l
214.780 162.210 214.759 161.808 214.716 161.630  c
214.687 161.495 214.633 161.395 214.554 161.332  c
214.476 161.268 214.382 161.236 214.272 161.236  c
214.115 161.236 213.897 161.302 213.618 161.433  c
h
220.625 167.768 m
220.823 167.768 220.991 167.837 221.126 167.974  c
221.261 168.112 221.329 168.278 221.329 168.473  c
221.329 168.667 221.260 168.833 221.123 168.971  c
220.985 169.109 220.819 169.177 220.625 169.177  c
220.430 169.177 220.264 169.109 220.126 168.971  c
219.989 168.833 219.920 168.667 219.920 168.473  c
219.920 168.274 219.989 168.107 220.126 167.971  c
220.264 167.836 220.430 167.768 220.625 167.768  c
h
227.643 160.392 m
227.147 161.471 l
224.558 161.471 l
223.993 162.627 l
225.114 162.792 226.003 163.208 226.659 163.877  c
227.222 164.453 227.503 165.130 227.503 165.908  c
227.503 166.361 227.411 166.780 227.227 167.165  c
227.043 167.550 226.811 167.878 226.532 168.149  c
226.252 168.420 225.941 168.638 225.599 168.803  c
225.112 169.036 224.613 169.152 224.101 169.152  c
223.584 169.152 223.209 169.064 222.974 168.888  c
222.739 168.713 222.622 168.519 222.622 168.308  c
222.622 168.189 222.670 168.084 222.768 167.993  c
222.865 167.902 222.988 167.857 223.136 167.857  c
223.246 167.857 223.342 167.874 223.425 167.908  c
223.507 167.942 223.648 168.028 223.847 168.168  c
224.164 168.388 224.486 168.498 224.812 168.498  c
225.307 168.498 225.741 168.311 226.116 167.936  c
226.491 167.562 226.678 167.106 226.678 166.568  c
226.678 166.048 226.511 165.562 226.176 165.112  c
225.842 164.661 225.381 164.313 224.793 164.067  c
224.331 163.877 223.703 163.767 222.907 163.737  c
224.558 160.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
276.000 147.000 m
276.000 151.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
282.960 167.343 m
282.357 169.000 l
277.279 169.000 l
277.279 168.765 l
278.773 167.402 279.824 166.289 280.434 165.426  c
281.043 164.563 281.348 163.773 281.348 163.058  c
281.348 162.512 281.181 162.064 280.846 161.712  c
280.512 161.361 280.112 161.186 279.647 161.186  c
279.223 161.186 278.844 161.309 278.507 161.557  c
278.171 161.804 277.922 162.167 277.761 162.646  c
277.526 162.646 l
277.632 161.863 277.904 161.262 278.342 160.843  c
278.780 160.424 279.327 160.214 279.983 160.214  c
280.681 160.214 281.264 160.439 281.732 160.887  c
282.199 161.336 282.433 161.865 282.433 162.474  c
282.433 162.910 282.332 163.346 282.128 163.782  c
281.815 164.467 281.307 165.193 280.605 165.959  c
279.551 167.110 278.893 167.804 278.631 168.041  c
280.878 168.041 l
281.335 168.041 281.656 168.024 281.840 167.990  c
282.024 167.956 282.190 167.888 282.338 167.784  c
282.486 167.680 282.615 167.533 282.725 167.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
46.0000 147.000 m
46.0000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
58.0000 147.000 m
58.0000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
70.0000 147.000 m
70.0000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
82.0000 147.000 m
82.0000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
107.000 147.000 m
107.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
119.000 147.000 m
119.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
131.000 147.000 m
131.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
143.000 147.000 m
143.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
167.000 147.000 m
167.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
179.000 147.000 m
179.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
191.000 147.000 m
191.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
203.000 147.000 m
203.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
228.000 147.000 m
228.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
240.000 147.000 m
240.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
252.000 147.000 m
252.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
264.000 147.000 m
264.000 149.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
34.0000 147.000 m
34.0000 8.04196 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 69 8 15 rc
Q
cliprestore
newpath
0 0 m
0 179.000 l
280.000 179.000 l
280.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
34.0000 139.000 m
30.0000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
16.4697 144.747 m
16.4697 143.765 16.6178 142.920 16.9140 142.211  c
17.2102 141.502 17.6038 140.974 18.0947 140.627  c
18.4755 140.352 18.8691 140.214 19.2753 140.214  c
19.9355 140.214 20.5279 140.551 21.0527 141.224  c
21.7086 142.057 22.0366 143.187 22.0366 144.613  c
22.0366 145.612 21.8927 146.460 21.6049 147.159  c
21.3172 147.857 20.9501 148.364 20.5036 148.679  c
20.0572 148.994 19.6266 149.152 19.2119 149.152  c
18.3909 149.152 17.7075 148.667 17.1616 147.698  c
16.7003 146.882 16.4697 145.898 16.4697 144.747  c
h
17.7138 144.905 m
17.7138 146.090 17.8598 147.057 18.1518 147.806  c
18.3930 148.437 18.7527 148.752 19.2309 148.752  c
19.4594 148.752 19.6964 148.649 19.9418 148.444  c
20.1873 148.239 20.3735 147.895 20.5004 147.413  c
20.6951 146.685 20.7924 145.659 20.7924 144.334  c
20.7924 143.352 20.6909 142.533 20.4877 141.877  c
20.3354 141.391 20.1386 141.046 19.8974 140.843  c
19.7239 140.703 19.5144 140.633 19.2690 140.633  c
18.9812 140.633 18.7252 140.762 18.5009 141.021  c
18.1962 141.372 17.9889 141.924 17.8789 142.677  c
17.7688 143.431 17.7138 144.173 17.7138 144.905  c
h
24.6250 147.768 m
24.8238 147.768 24.9910 147.837 25.1264 147.974  c
25.2618 148.112 25.3295 148.278 25.3295 148.473  c
25.3295 148.667 25.2608 148.833 25.1232 148.971  c
24.9857 149.109 24.8196 149.177 24.6250 149.177  c
24.4303 149.177 24.2642 149.109 24.1267 148.971  c
23.9891 148.833 23.9204 148.667 23.9204 148.473  c
23.9204 148.274 23.9891 148.107 24.1267 147.971  c
24.2642 147.836 24.4303 147.768 24.6250 147.768  c
h
27.5234 141.236 m
29.6181 140.214 l
29.8276 140.214 l
29.8276 147.482 l
29.8276 147.965 29.8477 148.265 29.8879 148.384  c
29.9281 148.502 30.0117 148.593 30.1386 148.657  c
30.2656 148.720 30.5237 148.756 30.9130 148.765  c
30.9130 149.000 l
27.6757 149.000 l
27.6757 148.765 l
28.0820 148.756 28.3444 148.721 28.4628 148.660  c
28.5813 148.599 28.6639 148.516 28.7104 148.412  c
28.7570 148.309 28.7802 147.999 28.7802 147.482  c
28.7802 142.836 l
28.7802 142.210 28.7591 141.808 28.7168 141.630  c
28.6871 141.495 28.6332 141.395 28.5549 141.332  c
28.4766 141.268 28.3824 141.236 28.2724 141.236  c
28.1158 141.236 27.8979 141.302 27.6186 141.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 125.000 m
30.0000 125.000 l
S
Q
q
0 J
1 j
newpath
34.0000 110.000 m
30.0000 110.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
16.4697 115.747 m
16.4697 114.765 16.6178 113.920 16.9140 113.211  c
17.2102 112.502 17.6038 111.974 18.0947 111.627  c
18.4755 111.352 18.8691 111.214 19.2753 111.214  c
19.9355 111.214 20.5279 111.551 21.0527 112.224  c
21.7086 113.057 22.0366 114.187 22.0366 115.613  c
22.0366 116.612 21.8927 117.460 21.6049 118.159  c
21.3172 118.857 20.9501 119.364 20.5036 119.679  c
20.0572 119.994 19.6266 120.152 19.2119 120.152  c
18.3909 120.152 17.7075 119.667 17.1616 118.698  c
16.7003 117.882 16.4697 116.898 16.4697 115.747  c
h
17.7138 115.905 m
17.7138 117.090 17.8598 118.057 18.1518 118.806  c
18.3930 119.437 18.7527 119.752 19.2309 119.752  c
19.4594 119.752 19.6964 119.649 19.9418 119.444  c
20.1873 119.239 20.3735 118.895 20.5004 118.413  c
20.6951 117.685 20.7924 116.659 20.7924 115.334  c
20.7924 114.352 20.6909 113.533 20.4877 112.877  c
20.3354 112.391 20.1386 112.046 19.8974 111.843  c
19.7239 111.703 19.5144 111.633 19.2690 111.633  c
18.9812 111.633 18.7252 111.762 18.5009 112.021  c
18.1962 112.372 17.9889 112.924 17.8789 113.677  c
17.7688 114.431 17.7138 115.173 17.7138 115.905  c
h
24.6250 118.768 m
24.8238 118.768 24.9910 118.837 25.1264 118.974  c
25.2618 119.112 25.3295 119.278 25.3295 119.473  c
25.3295 119.667 25.2608 119.833 25.1232 119.971  c
24.9857 120.109 24.8196 120.177 24.6250 120.177  c
24.4303 120.177 24.2642 120.109 24.1267 119.971  c
23.9891 119.833 23.9204 119.667 23.9204 119.473  c
23.9204 119.274 23.9891 119.107 24.1267 118.971  c
24.2642 118.836 24.4303 118.768 24.6250 118.768  c
h
26.6601 113.030 m
26.9056 112.450 27.2155 112.003 27.5900 111.687  c
27.9646 111.372 28.4311 111.214 28.9897 111.214  c
29.6795 111.214 30.2085 111.439 30.5766 111.887  c
30.8559 112.222 30.9956 112.579 30.9956 112.960  c
30.9956 113.586 30.6020 114.234 29.8149 114.902  c
30.3439 115.110 30.7438 115.406 31.0146 115.791  c
31.2854 116.176 31.4209 116.629 31.4209 117.149  c
31.4209 117.894 31.1839 118.540 30.7099 119.085  c
30.0921 119.796 29.1971 120.152 28.0249 120.152  c
27.4451 120.152 27.0505 120.080 26.8410 119.936  c
26.6315 119.792 26.5268 119.638 26.5268 119.473  c
26.5268 119.350 26.5765 119.242 26.6760 119.149  c
26.7754 119.056 26.8950 119.009 27.0346 119.009  c
27.1404 119.009 27.2483 119.026 27.3584 119.060  c
27.4303 119.081 27.5932 119.158 27.8471 119.292  c
28.1010 119.425 28.2766 119.504 28.3740 119.530  c
28.5306 119.576 28.6977 119.600 28.8754 119.600  c
29.3071 119.600 29.6827 119.432 30.0022 119.098  c
30.3217 118.764 30.4814 118.368 30.4814 117.911  c
30.4814 117.577 30.4073 117.251 30.2592 116.934  c
30.1492 116.697 30.0286 116.517 29.8974 116.394  c
29.7154 116.225 29.4658 116.071 29.1484 115.934  c
28.8310 115.796 28.5073 115.728 28.1772 115.728  c
27.9741 115.728 l
27.9741 115.537 l
28.3084 115.495 28.6438 115.374 28.9802 115.175  c
29.3166 114.976 29.5610 114.737 29.7133 114.458  c
29.8657 114.179 29.9418 113.872 29.9418 113.538  c
29.9418 113.102 29.8054 112.749 29.5324 112.481  c
29.2595 112.212 28.9199 112.078 28.5136 112.078  c
27.8577 112.078 27.3097 112.429 26.8696 113.131  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 95.0000 m
30.0000 95.0000 l
S
Q
q
0 J
1 j
newpath
34.0000 81.0000 m
30.0000 81.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
16.4697 85.7470 m
16.4697 84.7653 16.6178 83.9200 16.9140 83.2111  c
17.2102 82.5023 17.6038 81.9744 18.0947 81.6274  c
18.4755 81.3523 18.8691 81.2148 19.2753 81.2148  c
19.9355 81.2148 20.5279 81.5512 21.0527 82.2241  c
21.7086 83.0577 22.0366 84.1876 22.0366 85.6137  c
22.0366 86.6124 21.8927 87.4609 21.6049 88.1591  c
21.3172 88.8574 20.9501 89.3641 20.5036 89.6794  c
20.0572 89.9947 19.6266 90.1523 19.2119 90.1523  c
18.3909 90.1523 17.7075 89.6678 17.1616 88.6987  c
16.7003 87.8820 16.4697 86.8981 16.4697 85.7470  c
h
17.7138 85.9057 m
17.7138 87.0906 17.8598 88.0576 18.1518 88.8066  c
18.3930 89.4371 18.7527 89.7524 19.2309 89.7524  c
19.4594 89.7524 19.6964 89.6498 19.9418 89.4445  c
20.1873 89.2393 20.3735 88.8955 20.5004 88.4130  c
20.6951 87.6852 20.7924 86.6590 20.7924 85.3344  c
20.7924 84.3527 20.6909 83.5338 20.4877 82.8779  c
20.3354 82.3912 20.1386 82.0463 19.8974 81.8432  c
19.7239 81.7036 19.5144 81.6337 19.2690 81.6337  c
18.9812 81.6337 18.7252 81.7628 18.5009 82.0210  c
18.1962 82.3722 17.9889 82.9244 17.8789 83.6777  c
17.7688 84.4309 17.7138 85.1736 17.7138 85.9057  c
h
24.6250 88.7685 m
24.8238 88.7685 24.9910 88.8373 25.1264 88.9748  c
25.2618 89.1123 25.3295 89.2784 25.3295 89.4731  c
25.3295 89.6678 25.2608 89.8339 25.1232 89.9714  c
24.9857 90.1089 24.8196 90.1777 24.6250 90.1777  c
24.4303 90.1777 24.2642 90.1089 24.1267 89.9714  c
23.9891 89.8339 23.9204 89.6678 23.9204 89.4731  c
23.9204 89.2742 23.9891 89.1071 24.1267 88.9716  c
24.2642 88.8362 24.4303 88.7685 24.6250 88.7685  c
h
31.6430 81.3925 m
31.1479 82.4716 l
28.5581 82.4716 l
27.9931 83.6269 l
29.1145 83.7919 30.0032 84.2088 30.6591 84.8774  c
31.2220 85.4529 31.5034 86.1300 31.5034 86.9086  c
31.5034 87.3614 31.4113 87.7804 31.2272 88.1655  c
31.0432 88.5506 30.8115 88.8785 30.5322 89.1494  c
30.2529 89.4202 29.9418 89.6381 29.5991 89.8032  c
29.1124 90.0359 28.6131 90.1523 28.1010 90.1523  c
27.5848 90.1523 27.2092 90.0645 26.9743 89.8889  c
26.7395 89.7133 26.6220 89.5196 26.6220 89.3081  c
26.6220 89.1896 26.6707 89.0848 26.7680 88.9939  c
26.8654 88.9029 26.9881 88.8574 27.1362 88.8574  c
27.2462 88.8574 27.3425 88.8743 27.4250 88.9082  c
27.5075 88.9420 27.6482 89.0288 27.8471 89.1684  c
28.1645 89.3885 28.4861 89.4985 28.8120 89.4985  c
29.3071 89.4985 29.7419 89.3112 30.1164 88.9367  c
30.4909 88.5622 30.6782 88.1062 30.6782 87.5688  c
30.6782 87.0483 30.5110 86.5627 30.1767 86.1120  c
29.8424 85.6613 29.3811 85.3133 28.7929 85.0678  c
28.3317 84.8774 27.7032 84.7674 26.9077 84.7377  c
28.5581 81.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 66.0000 m
30.0000 66.0000 l
S
Q
q
0 J
1 j
newpath
34.0000 52.0000 m
30.0000 52.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
16.4697 56.7470 m
16.4697 55.7653 16.6178 54.9200 16.9140 54.2111  c
17.2102 53.5023 17.6038 52.9744 18.0947 52.6274  c
18.4755 52.3523 18.8691 52.2148 19.2753 52.2148  c
19.9355 52.2148 20.5279 52.5512 21.0527 53.2241  c
21.7086 54.0577 22.0366 55.1876 22.0366 56.6137  c
22.0366 57.6124 21.8927 58.4609 21.6049 59.1591  c
21.3172 59.8574 20.9501 60.3641 20.5036 60.6794  c
20.0572 60.9947 19.6266 61.1523 19.2119 61.1523  c
18.3909 61.1523 17.7075 60.6678 17.1616 59.6987  c
16.7003 58.8820 16.4697 57.8981 16.4697 56.7470  c
h
17.7138 56.9057 m
17.7138 58.0906 17.8598 59.0576 18.1518 59.8066  c
18.3930 60.4371 18.7527 60.7524 19.2309 60.7524  c
19.4594 60.7524 19.6964 60.6498 19.9418 60.4445  c
20.1873 60.2393 20.3735 59.8955 20.5004 59.4130  c
20.6951 58.6852 20.7924 57.6590 20.7924 56.3344  c
20.7924 55.3527 20.6909 54.5338 20.4877 53.8779  c
20.3354 53.3912 20.1386 53.0463 19.8974 52.8432  c
19.7239 52.7036 19.5144 52.6337 19.2690 52.6337  c
18.9812 52.6337 18.7252 52.7628 18.5009 53.0210  c
18.1962 53.3722 17.9889 53.9244 17.8789 54.6777  c
17.7688 55.4309 17.7138 56.1736 17.7138 56.9057  c
h
24.6250 59.7685 m
24.8238 59.7685 24.9910 59.8373 25.1264 59.9748  c
25.2618 60.1123 25.3295 60.2784 25.3295 60.4731  c
25.3295 60.6678 25.2608 60.8339 25.1232 60.9714  c
24.9857 61.1089 24.8196 61.1777 24.6250 61.1777  c
24.4303 61.1777 24.2642 61.1089 24.1267 60.9714  c
23.9891 60.8339 23.9204 60.6678 23.9204 60.4731  c
23.9204 60.2742 23.9891 60.1071 24.1267 59.9716  c
24.2642 59.8362 24.4303 59.7685 24.6250 59.7685  c
h
27.3076 52.3925 m
31.9223 52.3925 l
31.9223 52.6337 l
29.0532 61.1777 l
28.3422 61.1777 l
30.9130 53.4272 l
28.5454 53.4272 l
28.0672 53.4272 27.7265 53.4843 27.5234 53.5986  c
27.1679 53.7932 26.8823 54.0937 26.6665 54.5000  c
26.4824 54.4301 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 37.0000 m
30.0000 37.0000 l
S
Q
q
0 J
1 j
newpath
34.0000 23.0000 m
30.0000 23.0000 l
S
Q
q
0 J
1 j
newpath
34.0000 8.00000 m
30.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
17.5234 10.2368 m
19.6181 9.21484 l
19.8276 9.21484 l
19.8276 16.4829 l
19.8276 16.9653 19.8477 17.2657 19.8879 17.3842  c
19.9281 17.5027 20.0117 17.5937 20.1386 17.6572  c
20.2656 17.7207 20.5237 17.7566 20.9130 17.7651  c
20.9130 18.0000 l
17.6757 18.0000 l
17.6757 17.7651 l
18.0820 17.7566 18.3444 17.7217 18.4628 17.6604  c
18.5813 17.5990 18.6639 17.5165 18.7104 17.4128  c
18.7570 17.3091 18.7802 16.9991 18.7802 16.4829  c
18.7802 11.8364 l
18.7802 11.2101 18.7591 10.8081 18.7168 10.6303  c
18.6871 10.4949 18.6332 10.3955 18.5549 10.3320  c
18.4766 10.2685 18.3824 10.2368 18.2724 10.2368  c
18.1158 10.2368 17.8979 10.3024 17.6186 10.4335  c
h
24.6250 16.7685 m
24.8238 16.7685 24.9910 16.8373 25.1264 16.9748  c
25.2618 17.1123 25.3295 17.2784 25.3295 17.4731  c
25.3295 17.6678 25.2608 17.8339 25.1232 17.9714  c
24.9857 18.1089 24.8196 18.1777 24.6250 18.1777  c
24.4303 18.1777 24.2642 18.1089 24.1267 17.9714  c
23.9891 17.8339 23.9204 17.6678 23.9204 17.4731  c
23.9204 17.2742 23.9891 17.1071 24.1267 16.9716  c
24.2642 16.8362 24.4303 16.7685 24.6250 16.7685  c
h
26.4697 13.7470 m
26.4697 12.7653 26.6178 11.9200 26.9140 11.2111  c
27.2102 10.5023 27.6038 9.97444 28.0947 9.62744  c
28.4755 9.35237 28.8691 9.21484 29.2753 9.21484  c
29.9355 9.21484 30.5279 9.55127 31.0527 10.2241  c
31.7086 11.0577 32.0366 12.1876 32.0366 13.6137  c
32.0366 14.6124 31.8927 15.4609 31.6049 16.1591  c
31.3172 16.8574 30.9501 17.3641 30.5036 17.6794  c
30.0572 17.9947 29.6266 18.1523 29.2119 18.1523  c
28.3909 18.1523 27.7075 17.6678 27.1616 16.6987  c
26.7003 15.8820 26.4697 14.8981 26.4697 13.7470  c
h
27.7138 13.9057 m
27.7138 15.0906 27.8598 16.0576 28.1518 16.8066  c
28.3930 17.4371 28.7527 17.7524 29.2309 17.7524  c
29.4594 17.7524 29.6964 17.6498 29.9418 17.4445  c
30.1873 17.2393 30.3735 16.8955 30.5004 16.4130  c
30.6951 15.6852 30.7924 14.6590 30.7924 13.3344  c
30.7924 12.3527 30.6909 11.5338 30.4877 10.8779  c
30.3354 10.3912 30.1386 10.0463 29.8974 9.84326  c
29.7239 9.70361 29.5144 9.63378 29.2690 9.63378  c
28.9812 9.63378 28.7252 9.76285 28.5009 10.0210  c
28.1962 10.3722 27.9889 10.9244 27.8789 11.6777  c
27.7688 12.4309 27.7138 13.1736 27.7138 13.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 132.000 m
32.0000 132.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 117.000 m
32.0000 117.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 103.000 m
32.0000 103.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 88.0000 m
32.0000 88.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 74.0000 m
32.0000 74.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 59.0000 m
32.0000 59.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 44.0000 m
32.0000 44.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 30.0000 m
32.0000 30.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 15.0000 m
32.0000 15.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 290 189 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
