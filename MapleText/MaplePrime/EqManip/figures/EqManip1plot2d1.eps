%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 103 575 688
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N7ŒŽ25“ú 18Žž49•ª31•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
154 162 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
154.000 0 l
154.000 162.000 l
0 162.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 144 152 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
30.0000 -1.00000 111.481 145.497 rc
1.00000 0 0 RG
newpath
31.0000 52.3000 m
31.5703 54.4449 l
32.0666 56.2905 l
32.6247 58.3429 l
33.1865 60.3842 l
33.7456 62.3913 l
34.2640 64.2302 l
34.8007 66.1120 l
35.3559 68.0344 l
35.9092 69.9266 l
36.4784 71.8479 l
36.9797 73.5192 l
37.5441 75.3769 l
38.1108 77.2172 l
38.6569 78.9668 l
39.1528 80.5354 l
39.7425 82.3754 l
40.2421 83.9128 l
40.8232 85.6765 l
41.3375 87.2156 l
41.9019 88.8803 l
42.4393 90.4423 l
43.0000 92.0480 l
43.5149 93.5007 l
44.0703 95.0443 l
44.6472 96.6221 l
45.1494 97.9743 l
45.6918 99.4125 l
46.2521 100.874 l
46.8003 102.280 l
47.3307 103.618 l
47.9196 105.077 l
48.4488 106.366 l
49.0138 107.717 l
49.5257 108.920 l
50.0854 110.212 l
50.6121 111.404 l
51.1626 112.628 l
51.7008 113.801 l
52.2643 115.005 l
52.8070 116.141 l
53.3619 117.279 l
53.9123 118.384 l
54.4180 119.378 l
54.9977 120.492 l
55.5161 121.467 l
56.0689 122.483 l
56.5979 123.432 l
57.1854 124.461 l
57.6940 125.330 l
58.2714 126.292 l
58.7976 127.146 l
59.3732 128.055 l
59.8698 128.819 l
60.4354 129.665 l
60.9818 130.458 l
61.5278 131.227 l
62.0718 131.971 l
62.5944 132.663 l
63.1593 133.387 l
63.6977 134.054 l
64.2644 134.731 l
64.7774 135.323 l
65.3443 135.952 l
65.8873 136.532 l
66.4290 137.087 l
66.9949 137.642 l
67.5160 138.131 l
68.0497 138.609 l
68.6390 139.112 l
69.1725 139.544 l
69.7182 139.962 l
70.2731 140.363 l
70.7832 140.711 l
71.3269 141.059 l
71.8665 141.381 l
72.4436 141.701 l
72.9530 141.962 l
73.5407 142.237 l
74.0710 142.462 l
74.5957 142.663 l
75.1600 142.855 l
75.7265 143.022 l
76.2420 143.153 l
76.7894 143.269 l
77.3236 143.359 l
77.9027 143.432 l
78.4037 143.474 l
78.9792 143.497 l
79.5202 143.496 l
80.0560 143.472 l
80.5922 143.425 l
81.1391 143.354 l
81.7188 143.253 l
82.2504 143.138 l
82.7750 143.002 l
83.3359 142.833 l
83.8956 142.640 l
84.3979 142.445 l
84.9929 142.189 l
85.4908 141.954 l
86.0732 141.654 l
86.6290 141.343 l
87.1253 141.044 l
87.6834 140.685 l
88.2451 140.300 l
88.8043 139.891 l
89.3227 139.491 l
89.8594 139.054 l
90.4145 138.578 l
90.9679 138.080 l
91.5370 137.542 l
92.0384 137.047 l
92.6027 136.467 l
93.1694 135.859 l
93.7155 135.249 l
94.2115 134.675 l
94.8012 133.968 l
95.3007 133.347 l
95.8818 132.600 l
96.3962 131.917 l
96.9606 131.144 l
97.4979 130.384 l
98.0587 129.568 l
98.5736 128.796 l
99.1290 127.940 l
99.7059 127.025 l
100.208 126.208 l
100.750 125.303 l
101.310 124.344 l
101.859 123.382 l
102.389 122.428 l
102.978 121.344 l
103.507 120.346 l
104.072 119.256 l
104.584 118.248 l
105.144 117.121 l
105.670 116.039 l
106.221 114.884 l
106.759 113.732 l
107.323 112.502 l
107.865 111.293 l
108.420 110.034 l
108.971 108.760 l
109.476 107.570 l
110.056 106.180 l
110.574 104.915 l
111.127 103.543 l
111.656 102.207 l
112.244 100.698 l
112.752 99.3699 l
113.330 97.8375 l
113.856 96.4180 l
114.431 94.8404 l
114.928 93.4584 l
115.494 91.8608 l
116.040 90.2938 l
116.586 88.7045 l
117.130 87.0977 l
117.653 85.5322 l
118.218 83.8157 l
118.756 82.1565 l
119.323 80.3857 l
119.836 78.7610 l
120.403 76.9413 l
120.946 75.1748 l
121.487 73.3895 l
122.053 71.5001 l
122.574 69.7378 l
123.108 67.9108 l
123.697 65.8676 l
124.231 63.9941 l
124.776 62.0551 l
125.331 60.0592 l
125.841 58.2032 l
126.385 56.2023 l
126.925 54.1938 l
127.502 52.0199 l
128.011 50.0799 l
128.599 47.8162 l
129.129 45.7502 l
129.654 43.6842 l
130.218 41.4385 l
130.785 39.1586 l
131.300 37.0623 l
131.848 34.8134 l
132.382 32.5959 l
132.961 30.1669 l
133.462 28.0439 l
134.038 25.5812 l
134.579 23.2425 l
135.114 20.9037 l
135.650 18.5406 l
136.197 16.1070 l
136.777 13.5019 l
137.309 11.0901 l
137.833 8.68757 l
138.394 6.09544 l
138.954 3.48432 l
139.481 1.00000 l
S
cliprestore
newpath
0 0 m
0 152.000 l
144.000 152.000 l
144.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
31.0000 92.0000 m
139.481 92.0000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
78 110 14 15 rc
newpath
84.2788 116.255 m
84.4861 116.475 84.6427 116.695 84.7485 116.915  c
84.8247 117.067 84.9495 117.467 85.1230 118.115  c
85.6816 117.277 l
85.8297 117.074 86.0096 116.880 86.2211 116.696  c
86.4327 116.512 86.6189 116.386 86.7797 116.318  c
86.8813 116.276 86.9934 116.255 87.1162 116.255  c
87.2981 116.255 87.4431 116.304 87.5510 116.401  c
87.6589 116.498 87.7128 116.617 87.7128 116.756  c
87.7128 116.917 87.6811 117.027 87.6176 117.086  c
87.4991 117.192 87.3637 117.245 87.2114 117.245  c
87.1225 117.245 87.0273 117.226 86.9257 117.188  c
86.7268 117.120 86.5935 117.086 86.5258 117.086  c
86.4243 117.086 86.3037 117.146 86.1640 117.264  c
85.9016 117.484 85.5885 117.910 85.2246 118.540  c
85.7451 120.724 l
85.8255 121.058 85.8932 121.258 85.9482 121.324  c
86.0032 121.389 86.0582 121.422 86.1132 121.422  c
86.2021 121.422 86.3058 121.373 86.4243 121.276  c
86.6570 121.081 86.8559 120.827 87.0210 120.514  c
87.2431 120.628 l
86.9765 121.128 86.6380 121.543 86.2275 121.873  c
85.9947 122.059 85.7980 122.152 85.6372 122.152  c
85.4002 122.152 85.2119 122.019 85.0722 121.752  c
84.9834 121.587 84.7993 120.876 84.5200 119.619  c
83.8598 120.766 83.3308 121.504 82.9331 121.835  c
82.6749 122.046 82.4252 122.152 82.1840 122.152  c
82.0148 122.152 81.8603 122.091 81.7207 121.968  c
81.6191 121.875 81.5683 121.750 81.5683 121.593  c
81.5683 121.454 81.6149 121.337 81.7080 121.244  c
81.8011 121.151 81.9153 121.105 82.0507 121.105  c
82.1862 121.105 82.3300 121.172 82.4824 121.308  c
82.5924 121.405 82.6770 121.454 82.7363 121.454  c
82.7871 121.454 82.8527 121.420 82.9331 121.352  c
83.1320 121.191 83.4028 120.844 83.7456 120.311  c
84.0883 119.778 84.3126 119.393 84.4184 119.156  c
84.1560 118.127 84.0143 117.584 83.9931 117.524  c
83.8958 117.249 83.7688 117.055 83.6123 116.940  c
83.4557 116.826 83.2251 116.769 82.9204 116.769  c
82.8230 116.769 82.7109 116.773 82.5839 116.782  c
82.5839 116.553 l
h
f
Q
cliprestore
newpath
0 0 m
0 152.000 l
144.000 152.000 l
144.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
31.0000 92.0000 m
31.0000 95.0000 l
S
Q
q
0 J
1 j
newpath
43.0000 92.0000 m
43.0000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
46.5234 105.236 m
48.6181 104.214 l
48.8276 104.214 l
48.8276 111.482 l
48.8276 111.965 48.8477 112.265 48.8879 112.384  c
48.9281 112.502 49.0117 112.593 49.1386 112.657  c
49.2656 112.720 49.5237 112.756 49.9130 112.765  c
49.9130 113.000 l
46.6757 113.000 l
46.6757 112.765 l
47.0820 112.756 47.3444 112.721 47.4628 112.660  c
47.5813 112.599 47.6639 112.516 47.7104 112.412  c
47.7570 112.309 47.7802 111.999 47.7802 111.482  c
47.7802 106.836 l
47.7802 106.210 47.7591 105.808 47.7168 105.630  c
47.6871 105.495 47.6332 105.395 47.5549 105.332  c
47.4766 105.268 47.3824 105.236 47.2724 105.236  c
47.1158 105.236 46.8979 105.302 46.6186 105.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
55.0000 92.0000 m
55.0000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
62.9604 111.343 m
62.3574 113.000 l
57.2793 113.000 l
57.2793 112.765 l
58.7731 111.402 59.8247 110.289 60.4340 109.426  c
61.0434 108.563 61.3481 107.773 61.3481 107.058  c
61.3481 106.512 61.1809 106.064 60.8466 105.712  c
60.5123 105.361 60.1124 105.186 59.6469 105.186  c
59.2238 105.186 58.8439 105.309 58.5075 105.557  c
58.1711 105.804 57.9225 106.167 57.7617 106.646  c
57.5268 106.646 l
57.6326 105.863 57.9045 105.262 58.3425 104.843  c
58.7805 104.424 59.3274 104.214 59.9834 104.214  c
60.6816 104.214 61.2645 104.439 61.7321 104.887  c
62.1997 105.336 62.4335 105.865 62.4335 106.474  c
62.4335 106.910 62.3320 107.346 62.1289 107.782  c
61.8157 108.467 61.3079 109.193 60.6054 109.959  c
59.5517 111.110 58.8937 111.804 58.6313 112.041  c
60.8784 112.041 l
61.3354 112.041 61.6560 112.024 61.8400 111.990  c
62.0241 111.956 62.1902 111.888 62.3383 111.784  c
62.4864 111.680 62.6155 111.533 62.7255 111.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
67.0000 92.0000 m
67.0000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
69.6601 106.030 m
69.9056 105.450 70.2155 105.003 70.5900 104.687  c
70.9646 104.372 71.4311 104.214 71.9897 104.214  c
72.6795 104.214 73.2085 104.439 73.5766 104.887  c
73.8559 105.222 73.9956 105.579 73.9956 105.960  c
73.9956 106.586 73.6020 107.234 72.8149 107.902  c
73.3439 108.110 73.7438 108.406 74.0146 108.791  c
74.2854 109.176 74.4209 109.629 74.4209 110.149  c
74.4209 110.894 74.1839 111.540 73.7099 112.085  c
73.0921 112.796 72.1971 113.152 71.0249 113.152  c
70.4451 113.152 70.0505 113.080 69.8410 112.936  c
69.6315 112.792 69.5268 112.638 69.5268 112.473  c
69.5268 112.350 69.5765 112.242 69.6760 112.149  c
69.7754 112.056 69.8950 112.009 70.0346 112.009  c
70.1404 112.009 70.2483 112.026 70.3584 112.060  c
70.4303 112.081 70.5932 112.158 70.8471 112.292  c
71.1010 112.425 71.2766 112.504 71.3740 112.530  c
71.5306 112.576 71.6977 112.600 71.8754 112.600  c
72.3071 112.600 72.6827 112.432 73.0022 112.098  c
73.3217 111.764 73.4814 111.368 73.4814 110.911  c
73.4814 110.577 73.4073 110.251 73.2592 109.934  c
73.1492 109.697 73.0286 109.517 72.8974 109.394  c
72.7154 109.225 72.4658 109.071 72.1484 108.934  c
71.8310 108.796 71.5073 108.728 71.1772 108.728  c
70.9741 108.728 l
70.9741 108.537 l
71.3084 108.495 71.6438 108.374 71.9802 108.175  c
72.3166 107.976 72.5610 107.737 72.7133 107.458  c
72.8657 107.179 72.9418 106.872 72.9418 106.538  c
72.9418 106.102 72.8054 105.749 72.5324 105.481  c
72.2595 105.212 71.9199 105.078 71.5136 105.078  c
70.8577 105.078 70.3097 105.429 69.8696 106.131  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
79.0000 92.0000 m
79.0000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
87.0493 109.826 m
87.0493 110.727 l
85.8940 110.727 l
85.8940 113.000 l
84.8466 113.000 l
84.8466 110.727 l
81.2031 110.727 l
81.2031 109.915 l
85.1958 104.214 l
85.8940 104.214 l
85.8940 109.826 l
h
84.8466 109.826 m
84.8466 105.554 l
81.8252 109.826 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
91.0000 92.0000 m
91.0000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
98.6430 104.392 m
98.1479 105.471 l
95.5581 105.471 l
94.9931 106.627 l
96.1145 106.792 97.0032 107.208 97.6591 107.877  c
98.2220 108.453 98.5034 109.130 98.5034 109.908  c
98.5034 110.361 98.4113 110.780 98.2272 111.165  c
98.0432 111.550 97.8115 111.878 97.5322 112.149  c
97.2529 112.420 96.9418 112.638 96.5991 112.803  c
96.1124 113.036 95.6131 113.152 95.1010 113.152  c
94.5848 113.152 94.2092 113.064 93.9743 112.888  c
93.7395 112.713 93.6220 112.519 93.6220 112.308  c
93.6220 112.189 93.6707 112.084 93.7680 111.993  c
93.8654 111.902 93.9881 111.857 94.1362 111.857  c
94.2462 111.857 94.3425 111.874 94.4250 111.908  c
94.5075 111.942 94.6482 112.028 94.8471 112.168  c
95.1645 112.388 95.4861 112.498 95.8120 112.498  c
96.3071 112.498 96.7419 112.311 97.1164 111.936  c
97.4909 111.562 97.6782 111.106 97.6782 110.568  c
97.6782 110.048 97.5110 109.562 97.1767 109.112  c
96.8424 108.661 96.3811 108.313 95.7929 108.067  c
95.3317 107.877 94.7032 107.767 93.9077 107.737  c
95.5581 104.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
103.000 92.0000 m
103.000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
110.827 104.214 m
110.827 104.449 l
110.268 104.504 109.812 104.615 109.459 104.783  c
109.105 104.950 108.756 105.205 108.411 105.547  c
108.067 105.890 107.781 106.272 107.554 106.693  c
107.328 107.114 107.139 107.615 106.986 108.194  c
107.596 107.775 108.207 107.566 108.821 107.566  c
109.409 107.566 109.919 107.803 110.351 108.277  c
110.782 108.751 110.998 109.360 110.998 110.105  c
110.998 110.824 110.780 111.480 110.344 112.073  c
109.820 112.792 109.126 113.152 108.262 113.152  c
107.674 113.152 107.175 112.957 106.764 112.568  c
105.960 111.810 105.558 110.829 105.558 109.623  c
105.558 108.852 105.713 108.120 106.022 107.426  c
106.330 106.732 106.772 106.117 107.345 105.579  c
107.918 105.042 108.467 104.680 108.992 104.494  c
109.517 104.307 110.006 104.214 110.459 104.214  c
h
106.878 108.658 m
106.802 109.229 106.764 109.690 106.764 110.042  c
106.764 110.448 106.839 110.889 106.990 111.365  c
107.140 111.841 107.363 112.219 107.659 112.498  c
107.875 112.697 108.137 112.796 108.446 112.796  c
108.814 112.796 109.144 112.623 109.433 112.276  c
109.723 111.929 109.868 111.434 109.868 110.791  c
109.868 110.067 109.724 109.441 109.437 108.912  c
109.149 108.383 108.740 108.118 108.211 108.118  c
108.051 108.118 107.878 108.152 107.694 108.220  c
107.510 108.287 107.238 108.433 106.878 108.658  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
115.000 92.0000 m
115.000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
118.307 104.392 m
122.922 104.392 l
122.922 104.633 l
120.053 113.177 l
119.342 113.177 l
121.913 105.427 l
119.545 105.427 l
119.067 105.427 118.726 105.484 118.523 105.598  c
118.168 105.793 117.882 106.093 117.666 106.500  c
117.482 106.430 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
127.000 92.0000 m
127.000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
131.494 108.664 m
130.813 108.106 130.374 107.657 130.177 107.318  c
129.980 106.980 129.882 106.629 129.882 106.265  c
129.882 105.706 130.098 105.225 130.529 104.821  c
130.961 104.416 131.534 104.214 132.250 104.214  c
132.944 104.214 133.502 104.403 133.925 104.779  c
134.349 105.156 134.560 105.585 134.560 106.068  c
134.560 106.390 134.446 106.717 134.217 107.052  c
133.989 107.386 133.513 107.780 132.789 108.232  c
133.534 108.808 134.027 109.261 134.268 109.591  c
134.590 110.022 134.751 110.477 134.751 110.956  c
134.751 111.561 134.520 112.078 134.059 112.508  c
133.597 112.937 132.992 113.152 132.243 113.152  c
131.426 113.152 130.790 112.896 130.333 112.384  c
129.969 111.973 129.787 111.525 129.787 111.038  c
129.787 110.657 129.915 110.280 130.171 109.905  c
130.427 109.531 130.868 109.117 131.494 108.664  c
h
132.491 107.985 m
132.999 107.528 133.320 107.167 133.456 106.903  c
133.591 106.638 133.659 106.339 133.659 106.004  c
133.659 105.560 133.534 105.212 133.284 104.960  c
133.035 104.708 132.694 104.583 132.262 104.583  c
131.831 104.583 131.479 104.707 131.209 104.957  c
130.938 105.207 130.802 105.499 130.802 105.833  c
130.802 106.053 130.858 106.273 130.970 106.493  c
131.083 106.713 131.242 106.923 131.450 107.122  c
h
131.793 108.905 m
131.441 109.202 131.181 109.524 131.012 109.873  c
130.842 110.222 130.758 110.600 130.758 111.006  c
130.758 111.552 130.907 111.989 131.205 112.317  c
131.504 112.645 131.884 112.809 132.345 112.809  c
132.802 112.809 133.168 112.680 133.443 112.422  c
133.718 112.164 133.856 111.851 133.856 111.482  c
133.856 111.178 133.775 110.905 133.614 110.664  c
133.314 110.215 132.707 109.629 131.793 108.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
139.000 92.0000 m
139.000 95.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
141.685 113.177 m
141.685 112.942 l
142.235 112.934 142.747 112.806 143.221 112.558  c
143.695 112.311 144.153 111.878 144.595 111.260  c
145.038 110.642 145.346 109.963 145.519 109.223  c
144.855 109.650 144.254 109.864 143.716 109.864  c
143.111 109.864 142.593 109.630 142.161 109.162  c
141.730 108.695 141.514 108.074 141.514 107.299  c
141.514 106.546 141.730 105.875 142.161 105.287  c
142.682 104.572 143.361 104.214 144.199 104.214  c
144.905 104.214 145.511 104.506 146.014 105.090  c
146.632 105.814 146.941 106.707 146.941 107.769  c
146.941 108.725 146.706 109.617 146.236 110.445  c
145.767 111.272 145.113 111.959 144.275 112.504  c
143.594 112.953 142.851 113.177 142.047 113.177  c
h
145.621 108.753 m
145.697 108.203 145.735 107.763 145.735 107.433  c
145.735 107.022 145.665 106.579 145.525 106.103  c
145.386 105.627 145.188 105.262 144.932 105.008  c
144.676 104.754 144.385 104.627 144.059 104.627  c
143.682 104.627 143.352 104.796 143.069 105.135  c
142.785 105.473 142.644 105.977 142.644 106.646  c
142.644 107.538 142.832 108.237 143.209 108.740  c
143.484 109.104 143.822 109.286 144.224 109.286  c
144.419 109.286 144.649 109.240 144.916 109.147  c
145.183 109.053 145.418 108.922 145.621 108.753  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
37.0000 92.0000 m
37.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
49.0000 92.0000 m
49.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
61.0000 92.0000 m
61.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
73.0000 92.0000 m
73.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
85.0000 92.0000 m
85.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
97.0000 92.0000 m
97.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
109.000 92.0000 m
109.000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
121.000 92.0000 m
121.000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
133.000 92.0000 m
133.000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
31.0000 143.497 m
31.0000 1.00000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 39 8 15 rc
Q
cliprestore
newpath
0 0 m
0 152.000 l
144.000 152.000 l
144.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 J
1 j
newpath
31.0000 143.000 m
28.0000 143.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
16 142 7 13 rc
newpath
26.7900 149.438 m
18.2100 149.438 l
18.2100 148.762 l
26.7900 148.762 l
h
f
Q
newpath
30.9604 151.343 m
30.3574 153.000 l
25.2793 153.000 l
25.2793 152.765 l
26.7731 151.402 27.8247 150.289 28.4340 149.426  c
29.0434 148.563 29.3481 147.773 29.3481 147.058  c
29.3481 146.512 29.1809 146.064 28.8466 145.712  c
28.5123 145.361 28.1124 145.186 27.6469 145.186  c
27.2238 145.186 26.8439 145.309 26.5075 145.557  c
26.1711 145.804 25.9225 146.167 25.7617 146.646  c
25.5268 146.646 l
25.6326 145.863 25.9045 145.262 26.3425 144.843  c
26.7805 144.424 27.3274 144.214 27.9834 144.214  c
28.6816 144.214 29.2645 144.439 29.7321 144.887  c
30.1997 145.336 30.4335 145.865 30.4335 146.474  c
30.4335 146.910 30.3320 147.346 30.1289 147.782  c
29.8157 148.467 29.3079 149.193 28.6054 149.959  c
27.5517 151.110 26.8937 151.804 26.6313 152.041  c
28.8784 152.041 l
29.3354 152.041 29.6560 152.024 29.8400 151.990  c
30.0241 151.956 30.1902 151.888 30.3383 151.784  c
30.4864 151.680 30.6155 151.533 30.7255 151.343  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 118.000 m
28.0000 118.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
16 116 7 13 rc
newpath
26.7900 123.438 m
18.2100 123.438 l
18.2100 122.762 l
26.7900 122.762 l
h
f
Q
newpath
26.5234 119.236 m
28.6181 118.214 l
28.8276 118.214 l
28.8276 125.482 l
28.8276 125.965 28.8477 126.265 28.8879 126.384  c
28.9281 126.502 29.0117 126.593 29.1386 126.657  c
29.2656 126.720 29.5237 126.756 29.9130 126.765  c
29.9130 127.000 l
26.6757 127.000 l
26.6757 126.765 l
27.0820 126.756 27.3444 126.721 27.4628 126.660  c
27.5813 126.599 27.6639 126.516 27.7104 126.412  c
27.7570 126.309 27.7802 125.999 27.7802 125.482  c
27.7802 120.836 l
27.7802 120.210 27.7591 119.808 27.7168 119.630  c
27.6871 119.495 27.6332 119.395 27.5549 119.332  c
27.4766 119.268 27.3824 119.236 27.2724 119.236  c
27.1158 119.236 26.8979 119.302 26.6186 119.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 92.0000 m
28.0000 92.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.4697 97.7470 m
25.4697 96.7653 25.6178 95.9200 25.9140 95.2111  c
26.2102 94.5023 26.6038 93.9744 27.0947 93.6274  c
27.4755 93.3523 27.8691 93.2148 28.2753 93.2148  c
28.9355 93.2148 29.5279 93.5512 30.0527 94.2241  c
30.7086 95.0577 31.0366 96.1876 31.0366 97.6137  c
31.0366 98.6124 30.8927 99.4609 30.6049 100.159  c
30.3172 100.857 29.9501 101.364 29.5036 101.679  c
29.0572 101.994 28.6266 102.152 28.2119 102.152  c
27.3909 102.152 26.7075 101.667 26.1616 100.698  c
25.7003 99.8820 25.4697 98.8981 25.4697 97.7470  c
h
26.7138 97.9057 m
26.7138 99.0906 26.8598 100.057 27.1518 100.806  c
27.3930 101.437 27.7527 101.752 28.2309 101.752  c
28.4594 101.752 28.6964 101.649 28.9418 101.444  c
29.1873 101.239 29.3735 100.895 29.5004 100.413  c
29.6951 99.6852 29.7924 98.6590 29.7924 97.3344  c
29.7924 96.3527 29.6909 95.5338 29.4877 94.8779  c
29.3354 94.3912 29.1386 94.0463 28.8974 93.8432  c
28.7239 93.7036 28.5144 93.6337 28.2690 93.6337  c
27.9812 93.6337 27.7252 93.7628 27.5009 94.0210  c
27.1962 94.3722 26.9889 94.9244 26.8789 95.6777  c
26.7688 96.4309 26.7138 97.1736 26.7138 97.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 67.0000 m
28.0000 67.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
26.5234 68.2368 m
28.6181 67.2148 l
28.8276 67.2148 l
28.8276 74.4829 l
28.8276 74.9653 28.8477 75.2657 28.8879 75.3842  c
28.9281 75.5027 29.0117 75.5937 29.1386 75.6572  c
29.2656 75.7207 29.5237 75.7566 29.9130 75.7651  c
29.9130 76.0000 l
26.6757 76.0000 l
26.6757 75.7651 l
27.0820 75.7566 27.3444 75.7217 27.4628 75.6604  c
27.5813 75.5990 27.6639 75.5165 27.7104 75.4128  c
27.7570 75.3091 27.7802 74.9991 27.7802 74.4829  c
27.7802 69.8364 l
27.7802 69.2101 27.7591 68.8081 27.7168 68.6303  c
27.6871 68.4949 27.6332 68.3955 27.5549 68.3320  c
27.4766 68.2685 27.3824 68.2368 27.2724 68.2368  c
27.1158 68.2368 26.8979 68.3024 26.6186 68.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 41.0000 m
28.0000 41.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
30.9604 48.3432 m
30.3574 50.0000 l
25.2793 50.0000 l
25.2793 49.7651 l
26.7731 48.4025 27.8247 47.2895 28.4340 46.4262  c
29.0434 45.5629 29.3481 44.7737 29.3481 44.0585  c
29.3481 43.5127 29.1809 43.0641 28.8466 42.7128  c
28.5123 42.3616 28.1124 42.1860 27.6469 42.1860  c
27.2238 42.1860 26.8439 42.3098 26.5075 42.5573  c
26.1711 42.8049 25.9225 43.1678 25.7617 43.6460  c
25.5268 43.6460 l
25.6326 42.8631 25.9045 42.2622 26.3425 41.8432  c
26.7805 41.4243 27.3274 41.2148 27.9834 41.2148  c
28.6816 41.2148 29.2645 41.4391 29.7321 41.8877  c
30.1997 42.3362 30.4335 42.8652 30.4335 43.4746  c
30.4335 43.9104 30.3320 44.3463 30.1289 44.7822  c
29.8157 45.4677 29.3079 46.1935 28.6054 46.9594  c
27.5517 48.1105 26.8937 48.8045 26.6313 49.0415  c
28.8784 49.0415 l
29.3354 49.0415 29.6560 49.0245 29.8400 48.9907  c
30.0241 48.9568 30.1902 48.8881 30.3383 48.7844  c
30.4864 48.6807 30.6155 48.5336 30.7255 48.3432  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 15.0000 m
28.0000 15.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.6601 18.0302 m
25.9056 17.4505 26.2155 17.0030 26.5900 16.6877  c
26.9646 16.3724 27.4311 16.2148 27.9897 16.2148  c
28.6795 16.2148 29.2085 16.4391 29.5766 16.8877  c
29.8559 17.2220 29.9956 17.5795 29.9956 17.9604  c
29.9956 18.5867 29.6020 19.2342 28.8149 19.9028  c
29.3439 20.1101 29.7438 20.4064 30.0146 20.7915  c
30.2854 21.1766 30.4209 21.6293 30.4209 22.1499  c
30.4209 22.8946 30.1839 23.5400 29.7099 24.0859  c
29.0921 24.7968 28.1971 25.1523 27.0249 25.1523  c
26.4451 25.1523 26.0505 25.0804 25.8410 24.9365  c
25.6315 24.7926 25.5268 24.6381 25.5268 24.4731  c
25.5268 24.3504 25.5765 24.2425 25.6760 24.1494  c
25.7754 24.0563 25.8950 24.0097 26.0346 24.0097  c
26.1404 24.0097 26.2483 24.0266 26.3584 24.0605  c
26.4303 24.0817 26.5932 24.1589 26.8471 24.2922  c
27.1010 24.4255 27.2766 24.5048 27.3740 24.5302  c
27.5306 24.5768 27.6977 24.6001 27.8754 24.6001  c
28.3071 24.6001 28.6827 24.4329 29.0022 24.0986  c
29.3217 23.7643 29.4814 23.3686 29.4814 22.9116  c
29.4814 22.5773 29.4073 22.2514 29.2592 21.9340  c
29.1492 21.6971 29.0286 21.5172 28.8974 21.3945  c
28.7154 21.2252 28.4658 21.0718 28.1484 20.9343  c
27.8310 20.7967 27.5073 20.7280 27.1772 20.7280  c
26.9741 20.7280 l
26.9741 20.5376 l
27.3084 20.4952 27.6438 20.3746 27.9802 20.1757  c
28.3166 19.9768 28.5610 19.7377 28.7133 19.4585  c
28.8657 19.1792 28.9418 18.8724 28.9418 18.5380  c
28.9418 18.1022 28.8054 17.7499 28.5324 17.4812  c
28.2595 17.2124 27.9199 17.0781 27.5136 17.0781  c
26.8577 17.0781 26.3097 17.4293 25.8696 18.1318  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 131.000 m
30.0000 131.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 105.000 m
30.0000 105.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 79.0000 m
30.0000 79.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 54.0000 m
30.0000 54.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 28.0000 m
30.0000 28.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
31.0000 2.00000 m
30.0000 2.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 154 162 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
