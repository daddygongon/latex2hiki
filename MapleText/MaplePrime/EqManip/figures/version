[ksc-1x-dhcp-172-29-194-158:~] bob% !sssh bob@192.218.172.38Last login: Mon Mar 11 15:06:35 2013 from 172.29.194.158macmini-3c07544916f1% tcsh[macmini-3c07544916f1:~] bob% lsDesktop/          Lectures/         Movies/           Public/           book_v7_vjp1.pdfDocuments/        Library/          Music/            Sites/            vimcolor/Downloads/        Mike2jp.tar.gz    Pictures/         bin/[macmini-3c07544916f1:~] bob% cd vimcolor/[macmini-3c07544916f1:~/vimcolor] bob% lsa.html          lib/            test.rb         tmp.html        vimcolor-embed*[macmini-3c07544916f1:~/vimcolor] bob% /usr/bin/env ruby vimcolor-embed test.rb">PreProc>#!/usr/bin/env ruby<PreProc<\n\n>>p test<<\n"#!/usr/bin/env rubyp test[macmini-3c07544916f1:~/vimcolor] bob% cd[macmini-3c07544916f1:~] bob% cd /Users/yoshii/[macmini-3c07544916f1:/Users/yoshii] bob% lsDesktop/                               Music/                                 hikidoc-super-pre-plugin-20090730.tarDocuments/                             Pictures/                              misc/Downloads/                             Public/                                sakamoto/Library/                               Sites/Movies/                                hiki/[macmini-3c07544916f1:/Users/yoshii] bob% cd Sites/[macmini-3c07544916f1:/Users/yoshii/Sites] bob% lshiki/          images/        index.html*    x-hiki-0.21.3/[macmini-3c07544916f1:/Users/yoshii/Sites] bob% cd hiki[macmini-3c07544916f1:yoshii/Sites/hiki] bob% lsChangeLog*          debian/             hiki.cgi*           hikiconf.rb~*       style/attach.cgi*         doc/                hiki.cgi~*          messages/           template/contrib/            dot.htaccess*       hikiconf.rb*        misc/               test/data/               hiki/               hikiconf.rb.sample* plugin/             theme/[macmini-3c07544916f1:yoshii/Sites/hiki] bob% cd  style/default/hikidoc-super-pre/[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% lsvimcolor/        vimcolor-embed*  vimcolor-embed~* vimcolor.rb      vimcolor.rb~[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% sudo emacs vimcolor.rbPassword:Sorry, try again.Password:Suspended[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% /usr/bin/env ruby ./vimcolor-embed vimcolor.rb#!/usr/bin/env ruby## A ported version of Perl's Text::VimColor to Ruby.#class VimColor     VIM_COMMAND = "vim"     VIM_OPTIONS = %w[-R -X -Z -i NONE -u NONE -N]     VIM_PRESET  = ["+set nomodeline", '+set expandtab'] # +set shiftwidth     VIM_POSTSET = [":let b:is_bash=1", ":filetype on"]     VIM_MARK_SCRIPT = File.join(File.dirname(__FILE__), 'vimcolor', 'mark.vim')     VIM_UNESCAPE = {'&l' => '<', '&g' => '>', '&a' => '&'}     def initialize(vim_command = VIM_COMMAND, vim_options = VIM_OPTIONS, vim_preset = VIM_PRESET, vim_postset = VIM_POSTSET)               require 'tempfile'               @vim_command = vim_command.dup               @vim_options = vim_options.dup               @vim_preset  = vim_preset.dup               @vim_postset = vim_postset.dup       end     def run_file(path, options, formatter_class, *formatter_args)               if formatter_class.class == Symbol                     formatter_class = self.class.const_get("Format_#{formatter_class}")             end               if options.is_a? Hash                     if options.include? :filetype                             @vim_postset.push(":set filetype=#{options[:filetype]}")                     end                     if options.include? :encoding                             @vim_preset.push("+set encoding=#{options[:encoding]}")                     end             else                     @vim_postset.push(":set filetype=#{options}")             end               vimout = nil               tmp_stream = Tempfile.new('ruby-vimcolor')               begin                   tmp_path = tmp_stream.path                   tmp_stream.puts <<SCRIPT#{@vim_postset.join("\n")}:source #{VIM_MARK_SCRIPT}:write! #{tmp_path}:qall!SCRIPT                   tmp_stream.flush                   pid = Process.fork {                                STDIN.reopen "/dev/null"                                STDOUT.reopen "/dev/null", "a"                                STDERR.reopen "/dev/null", "a"                                args = []                                args.concat @vim_options                                args.concat ['-s', tmp_path]                                args.push path                                args.concat @vim_preset                                exec(@vim_command, *args)                                exit 127                        }                   Process.waitpid(pid)                   tmp_stream.seek(0)                   vimout = tmp_stream.read           ensure                   tmp_stream.close           end               require 'strscan'               s = StringScanner.new(vimout)               formatter = formatter_class.new(*formatter_args)               while s.scan_until(/(.*?)>(.*?)>(.*?)<\2</m)                  formatter.push('', s[1]) unless s[1].empty?                  type = s[2]                  text = s[3]                  text.gsub!(/&[agl]/) do                           VIM_UNESCAPE[$&]                   end                  formatter.push(type, text)          end               formatter.result#          vimout       end     def run_stream(stream, filetype, formatter_class, *formatter_args)               tmp_in = Tempfile.new('ruby-vimcolor-input')               begin                   tmp_in.write(stream.read)                   tmp_in.flush                   run_file(tmp_in.path, filetype, formatter_class, *formatter_args)           ensure                   tmp_in.close           end       end     def run(str, filetype, formatter_class, *formatter_args)               tmp_in = Tempfile.new('ruby-vimcolor-input')               begin                   tmp_in.write(str)                   tmp_in.flush                   run_file(tmp_in.path, filetype, formatter_class, *formatter_args)           ensure                   tmp_in.close           end       endendclass VimColor     class Format_array             def initialize                       @result = []               end             def push(type, text)                       @result.push [type, text]               end             attr_reader :result     end     class Format_xml             def initialize                       @result = ''               end             def push(type, text)                       VimColor._escape_xml!(text)                       type = 'Normal' if type.empty?                       @result << %[<#{type}>#{text}</#{type}>]               end             attr_reader :result     end     class Format_html             def initialize(class_prefix = 'syn')                       @result = ''                       @prefix = class_prefix               end             def push(type, text)                       VimColor._escape_xml!(text)                       if type.empty?                             @result << text                     else                             @result << %[<span class="#{@prefix}#{type}">#{text}</span>]                     end               end             attr_reader :result     end     def self._escape_xml!(text)               text.gsub!("&", "&amp;")               text.gsub!("<", "&lt;")               text.gsub!(">", "&gt;")               text.gsub!("'", "&#39;")               text.gsub!('"', "&quot;")               text       end     class Format_ansi             AnsiCodes = {                        :normal        =>  0,                        :reset         =>  0,                        :bold          =>  1,                        :dark          =>  2,                        :italic        =>  3,                        :underline     =>  4,                        :blink         =>  5,                        :rapid_blink   =>  6,                        :negative      =>  7,                        :concealed     =>  8,                        :strikethrough =>  9,                        :black         => 30,                        :red           => 31,                        :green         => 32,                        :yellow        => 33,                        :blue          => 34,                        :magenta       => 35,                        :cyan          => 36,                        :white         => 37,                        :on_black      => 40,                        :on_red        => 41,                        :on_green      => 42,                        :on_yellow     => 43,                        :on_blue       => 44,                        :on_magenta    => 45,                        :on_cyan       => 46,                        :on_white      => 47,                }             def initialize(colors = {})                       @result = ''                       @colors = Hash.new([])                       @colors.merge!({                                'Comment'    => [ :blue ],                                'Constant'   => [ :red ],                                'Identifier' => [ :green  ],                                'Statement'  => [ :yellow ],                                'PreProc'    => [ :magenta ],                                'Type'       => [ :green ],                                'Special'    => [ :magenta ],                                'Underlined' => [ :underline ],                                'Error'      => [ :red ],                                'Todo'       => [ :black, :on_yellow ],                        })                       @colors.merge!(colors)               end             def push(type, text)                       seq = ''                       codes = @colors[type].dup                       codes.unshift(:reset)                       codes.each {|c|                                num = AnsiCodes[c]                                seq << "\e[#{num}m" if num                        }                       @result << seq << text               end             def result                       @result << "\e[0m"                       @result               end     endend[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% fgsudo emacs vimcolor.rbSuspended[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% lsvimcolor/        vimcolor-embed*  vimcolor-embed~* vimcolor.rb      vimcolor.rb~[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% h     1	12:09	ls     2	12:09	cd hikidoc-super-pre/     3	12:09	ls     4	12:09	sudo emacs vimcolor.rb     5	12:11	which vim     6	15:22	ls     7	15:22	cd vimcolor/     8	15:22	ls     9	15:23	/usr/bin/env ruby vimcolor-embed test.rb    10	15:24	cd    11	15:24	cd /Users/yoshii/    12	15:24	ls    13	15:24	cd Sites/    14	15:24	ls    15	15:24	cd hiki    16	15:24	ls    17	15:24	cd style/default/hikidoc-super-pre/    18	15:24	ls    19	15:24	sudo emacs vimcolor.rb    20	15:25	/usr/bin/env ruby ./vimcolor-embed vimcolor.rb    21	15:25	fg    22	15:36	ls    23	15:36	h[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% !20/usr/bin/env ruby ./vimcolor-embed vimcolor.rb#!/usr/bin/env ruby## A ported version of Perl's Text::VimColor to Ruby.#class VimColor     VIM_COMMAND = "vim"     VIM_OPTIONS = %w[-R -X -Z -i NONE -u NONE -N]     VIM_PRESET  = ["+set nomodeline", '+set expandtab'] # +set shiftwidth     VIM_POSTSET = [":let b:is_bash=1", ":filetype on"]     VIM_MARK_SCRIPT = File.join(File.dirname(__FILE__), 'vimcolor', 'mark.vim')     VIM_UNESCAPE = {'&l' => '<', '&g' => '>', '&a' => '&'}     def initialize(vim_command = VIM_COMMAND, vim_options = VIM_OPTIONS, vim_preset = VIM_PRESET, vim_postset = VIM_POSTSET)               require 'tempfile'               @vim_command = vim_command.dup               @vim_options = vim_options.dup               @vim_preset  = vim_preset.dup               @vim_postset = vim_postset.dup       end     def run_file(path, options, formatter_class, *formatter_args)               if formatter_class.class == Symbol                     formatter_class = self.class.const_get("Format_#{formatter_class}")             end               if options.is_a? Hash                     if options.include? :filetype                             @vim_postset.push(":set filetype=#{options[:filetype]}")                     end                     if options.include? :encoding                             @vim_preset.push("+set encoding=#{options[:encoding]}")                     end             else                     @vim_postset.push(":set filetype=#{options}")             end               vimout = nil               tmp_stream = Tempfile.new('ruby-vimcolor')               begin                   tmp_path = tmp_stream.path                   tmp_stream.puts <<SCRIPT#{@vim_postset.join("\n")}:source #{VIM_MARK_SCRIPT}:write! #{tmp_path}:qall!SCRIPT                   tmp_stream.flush                   pid = Process.fork {                                STDIN.reopen "/dev/null"                                STDOUT.reopen "/dev/null", "a"                                STDERR.reopen "/dev/null", "a"                                args = []                                args.concat @vim_options                                args.concat ['-s', tmp_path]                                args.push path                                args.concat @vim_preset                                exec(@vim_command, *args)                                exit 127                        }                   Process.waitpid(pid)                   tmp_stream.seek(0)                   vimout = tmp_stream.read           ensure                   tmp_stream.close           end               require 'strscan'               s = StringScanner.new(vimout)               formatter = formatter_class.new(*formatter_args)               while s.scan_until(/(.*?)>(.*?)>(.*?)<\2</m)                  formatter.push('', s[1]) unless s[1].empty?                  type = s[2]                  text = s[3]                  text.gsub!(/&[agl]/) do                           VIM_UNESCAPE[$&]                   end                  formatter.push(type, text)          end               formatter.result#          vimout       end     def run_stream(stream, filetype, formatter_class, *formatter_args)               tmp_in = Tempfile.new('ruby-vimcolor-input')               begin                   tmp_in.write(stream.read)                   tmp_in.flush                   run_file(tmp_in.path, filetype, formatter_class, *formatter_args)           ensure                   tmp_in.close           end       end     def run(str, filetype, formatter_class, *formatter_args)               tmp_in = Tempfile.new('ruby-vimcolor-input')               begin                   tmp_in.write(str)                   tmp_in.flush                   run_file(tmp_in.path, filetype, formatter_class, *formatter_args)           ensure                   tmp_in.close           end       endendclass VimColor     class Format_array             def initialize                       @result = []               end             def push(type, text)                       @result.push [type, text]               end             attr_reader :result     end     class Format_xml             def initialize                       @result = ''               end             def push(type, text)                       VimColor._escape_xml!(text)                       type = 'Normal' if type.empty?                       @result << %[<#{type}>#{text}</#{type}>]               end             attr_reader :result     end     class Format_html             def initialize(class_prefix = 'syn')                       @result = ''                       @prefix = class_prefix               end             def push(type, text)                       VimColor._escape_xml!(text)                       if type.empty?                             @result << text                     else                             @result << %[<span class="#{@prefix}#{type}">#{text}</span>]                     end               end             attr_reader :result     end     def self._escape_xml!(text)               text.gsub!("&", "&amp;")               text.gsub!("<", "&lt;")               text.gsub!(">", "&gt;")               text.gsub!("'", "&#39;")               text.gsub!('"', "&quot;")               text       end     class Format_ansi             AnsiCodes = {                        :normal        =>  0,                        :reset         =>  0,                        :bold          =>  1,                        :dark          =>  2,                        :italic        =>  3,                        :underline     =>  4,                        :blink         =>  5,                        :rapid_blink   =>  6,                        :negative      =>  7,                        :concealed     =>  8,                        :strikethrough =>  9,                        :black         => 30,                        :red           => 31,                        :green         => 32,                        :yellow        => 33,                        :blue          => 34,                        :magenta       => 35,                        :cyan          => 36,                        :white         => 37,                        :on_black      => 40,                        :on_red        => 41,                        :on_green      => 42,                        :on_yellow     => 43,                        :on_blue       => 44,                        :on_magenta    => 45,                        :on_cyan       => 46,                        :on_white      => 47,                }             def initialize(colors = {})                       @result = ''                       @colors = Hash.new([])                       @colors.merge!({                                'Comment'    => [ :blue ],                                'Constant'   => [ :red ],                                'Identifier' => [ :green  ],                                'Statement'  => [ :yellow ],                                'PreProc'    => [ :magenta ],                                'Type'       => [ :green ],                                'Special'    => [ :magenta ],                                'Underlined' => [ :underline ],                                'Error'      => [ :red ],                                'Todo'       => [ :black, :on_yellow ],                        })                       @colors.merge!(colors)               end             def push(type, text)                       seq = ''                       codes = @colors[type].dup                       codes.unshift(:reset)                       codes.each {|c|                                num = AnsiCodes[c]                                seq << "\e[#{num}m" if num                        }                       @result << seq << text               end             def result                       @result << "\e[0m"                       @result               end     endend[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% lsvimcolor/        vimcolor-embed*  vimcolor-embed~* vimcolor.rb      vimcolor.rb~[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% fgsudo emacs vimcolor.rb[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% lsvimcolor/        vimcolor-embed*  vimcolor-embed~* vimcolor.rb      vimcolor.rb~[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% sudo emacs vimcolor-embedPassword:[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% sudo emacs vimcolor.rb[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% /usr/local/usr/local: Permission denied.[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% ls /usr/localgit/[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% cd gitgit: No such file or directory.[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% lsvimcolor/        vimcolor-embed*  vimcolor-embed~* vimcolor.rb      vimcolor.rb~[macmini-3c07544916f1:style/default/hikidoc-super-pre] bob% cd /usr/local/git[macmini-3c07544916f1:/usr/local/git] bob% lsLibrary/ bin/     contrib/ etc/     lib/     libexec/ share/[macmini-3c07544916f1:/usr/local/git] bob% ls bingit*                        git-cvsserver*              git-shell*                  git-upload-pack*git-credential-osxkeychain* git-receive-pack@           git-upload-archive@         gitk*[macmini-3c07544916f1:/usr/local/git] bob% xcode -vxcode: Command not found.[macmini-3c07544916f1:/usr/local/git] bob% 