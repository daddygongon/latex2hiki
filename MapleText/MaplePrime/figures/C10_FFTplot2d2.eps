%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 238 575 553
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N8ŒŽ16“ú 17Žž06•ª18•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
358 203 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
358.000 0 l
358.000 203.000 l
0 203.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 348 193 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
36.0087 2.01063 310.619 187.989 rc
newpath
37.0087 70.2007 m
38.2151 49.7598 l
39.4214 38.9662 l
40.6278 39.6219 l
41.8341 50.7405 l
43.0405 68.7939 l
44.2468 88.5810 l
45.4532 104.505 l
46.6595 111.950 l
47.8659 108.412 l
49.0722 94.1214 l
50.2786 71.9829 l
51.4849 46.8748 l
52.6913 24.4542 l
53.8976 9.77581 l
55.1040 6.05650 l
56.3103 13.8904 l
57.5167 31.1050 l
58.7230 53.2949 l
59.9294 74.9010 l
61.1358 90.5728 l
62.3421 96.4786 l
63.5485 91.2435 l
64.7548 76.2857 l
65.9612 55.4684 l
67.1675 34.1528 l
68.3739 17.8841 l
69.5802 11.0315 l
70.7866 15.7166 l
71.9929 31.2911 l
73.1993 54.4926 l
74.4056 80.2403 l
75.6120 102.875 l
76.8183 117.541 l
78.0247 121.372 l
79.2310 114.186 l
80.4374 98.5280 l
81.6437 79.0409 l
82.8501 61.3244 l
84.0564 50.5589 l
85.2628 50.2322 l
86.4691 61.2807 l
87.6755 81.8549 l
88.8819 107.767 l
90.0882 133.511 l
91.2946 153.609 l
92.5009 163.940 l
93.7073 162.752 l
94.9136 151.083 l
96.1200 132.503 l
97.3263 112.232 l
98.5327 95.8670 l
99.7390 87.9968 l
100.945 91.0839 l
102.151 104.854 l
103.358 126.361 l
104.564 150.707 l
105.770 172.238 l
106.977 185.927 l
108.183 188.602 l
109.389 179.725 l
110.596 161.519 l
111.802 138.426 l
113.008 116.017 l
114.215 99.6345 l
115.421 93.0759 l
116.628 97.6734 l
117.834 111.965 l
119.040 132.057 l
120.247 152.577 l
121.453 167.993 l
122.659 173.973 l
123.866 168.445 l
125.072 152.111 l
126.278 128.277 l
127.485 102.050 l
128.691 79.0903 l
129.897 64.2281 l
131.104 60.2902 l
132.310 67.4098 l
133.516 82.9991 l
134.723 102.388 l
135.929 119.973 l
137.136 130.594 l
138.342 130.802 l
139.548 119.709 l
140.755 99.2129 l
141.961 73.5313 l
143.167 48.1805 l
144.374 28.6259 l
145.580 18.9487 l
146.786 20.8514 l
147.993 33.2443 l
149.199 52.5165 l
150.405 73.4232 l
151.612 90.3728 l
152.818 98.7989 l
154.024 96.2807 l
155.231 83.1377 l
156.437 62.3536 l
157.644 38.8467 l
158.850 18.2671 l
160.056 5.61363 l
161.263 4.01063 l
162.469 13.9425 l
163.675 33.1347 l
164.882 57.1098 l
166.088 80.2820 l
167.294 97.3237 l
168.501 104.467 l
169.707 100.425 l
170.913 86.7028 l
172.120 67.2268 l
173.326 47.3798 l
174.532 32.6797 l
175.739 27.4240 l
176.945 33.6344 l
178.152 50.5566 l
179.358 74.8409 l
180.564 101.357 l
181.771 124.448 l
182.977 139.305 l
184.183 143.146 l
185.390 135.886 l
186.596 120.157 l
187.802 100.657 l
189.009 82.9948 l
190.215 72.3109 l
191.421 72.0161 l
192.628 82.9502 l
193.834 103.172 l
195.040 128.431 l
196.247 153.204 l
197.453 172.041 l
198.660 180.900 l
199.866 178.129 l
201.072 164.871 l
202.279 144.779 l
203.485 123.122 l
204.691 105.487 l
205.898 96.4185 l
207.104 98.2948 l
208.310 110.752 l
209.517 130.769 l
210.723 153.409 l
211.929 173.026 l
213.136 184.650 l
214.342 185.203 l
215.548 174.255 l
216.755 154.133 l
217.961 129.348 l
219.168 105.498 l
220.374 87.8995 l
221.580 80.2851 l
222.787 83.8981 l
223.993 97.1887 l
225.199 116.198 l
226.406 135.532 l
227.612 149.687 l
228.818 154.398 l
230.025 147.694 l
231.231 130.380 l
232.437 105.847 l
233.644 79.2477 l
234.850 56.2366 l
236.056 41.5950 l
237.263 38.0626 l
238.469 45.6724 l
239.675 61.7477 l
240.882 81.5620 l
242.088 99.5012 l
243.295 110.442 l
244.501 111.012 l
245.707 100.418 l
246.914 80.6449 l
248.120 55.9720 l
249.326 31.9309 l
250.533 13.9525 l
251.739 6.04058 l
252.945 9.79344 l
254.152 24.0151 l
255.358 45.0097 l
256.564 67.4872 l
257.771 85.8600 l
258.977 95.6111 l
260.183 94.4003 l
261.390 82.6369 l
262.596 63.3786 l
263.803 41.5822 l
265.009 22.8883 l
266.215 12.2383 l
267.422 12.6631 l
268.628 24.5377 l
269.834 45.4872 l
271.041 70.9647 l
272.247 95.3612 l
273.453 113.375 l
274.660 121.307 l
275.866 117.960 l
277.072 104.929 l
278.279 86.2058 l
279.485 67.1961 l
280.691 53.3927 l
281.898 49.0245 l
283.104 56.0162 l
284.311 73.5125 l
285.517 98.0821 l
286.723 124.552 l
287.930 147.272 l
289.136 161.489 l
290.342 164.509 l
291.549 156.350 l
292.755 139.736 l
293.961 119.421 l
295.168 101.027 l
296.374 89.6595 l
297.580 88.6534 l
298.787 98.7570 l
299.993 117.942 l
301.199 141.902 l
302.406 165.097 l
303.612 182.118 l
304.819 189.000 l
306.025 184.197 l
307.231 168.960 l
308.438 147.027 l
309.644 123.711 l
310.850 104.596 l
312.057 94.1760 l
313.263 94.7490 l
314.469 105.861 l
315.676 124.418 l
316.882 145.444 l
318.088 163.303 l
319.295 173.082 l
320.501 171.797 l
321.707 159.127 l
322.914 137.495 l
324.120 111.482 l
325.327 86.7057 l
326.533 68.4523 l
327.739 60.3865 l
328.946 63.6578 l
330.152 76.6251 l
331.358 95.2630 l
332.565 114.152 l
333.771 127.812 l
334.977 132.047 l
336.184 124.978 l
337.390 107.510 l
338.596 83.1137 l
339.803 56.9782 l
341.009 34.7500 l
342.215 21.1518 l
343.422 18.8313 l
344.628 27.7166 l
S
cliprestore
newpath
0 0 m
0 193.000 l
348.000 193.000 l
348.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
34.0087 96.0000 m
344.628 96.0000 l
S
Q
q
q
0 J
1 j
newpath
96.0000 96.0000 m
96.0000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
99.6430 110.392 m
99.1479 111.471 l
96.5581 111.471 l
95.9931 112.627 l
97.1145 112.792 98.0032 113.208 98.6591 113.877  c
99.2220 114.453 99.5034 115.130 99.5034 115.908  c
99.5034 116.361 99.4113 116.780 99.2272 117.165  c
99.0432 117.550 98.8115 117.878 98.5322 118.149  c
98.2529 118.420 97.9418 118.638 97.5991 118.803  c
97.1124 119.036 96.6131 119.152 96.1010 119.152  c
95.5848 119.152 95.2092 119.064 94.9743 118.888  c
94.7395 118.713 94.6220 118.519 94.6220 118.308  c
94.6220 118.189 94.6707 118.084 94.7680 117.993  c
94.8654 117.902 94.9881 117.857 95.1362 117.857  c
95.2462 117.857 95.3425 117.874 95.4250 117.908  c
95.5075 117.942 95.6482 118.028 95.8471 118.168  c
96.1645 118.388 96.4861 118.498 96.8120 118.498  c
97.3071 118.498 97.7419 118.311 98.1164 117.936  c
98.4909 117.562 98.6782 117.106 98.6782 116.568  c
98.6782 116.048 98.5110 115.562 98.1767 115.112  c
97.8424 114.661 97.3811 114.313 96.7929 114.067  c
96.3317 113.877 95.7032 113.767 94.9077 113.737  c
96.5581 110.392 l
h
101.469 114.747 m
101.469 113.765 101.617 112.920 101.914 112.211  c
102.210 111.502 102.603 110.974 103.094 110.627  c
103.475 110.352 103.869 110.214 104.275 110.214  c
104.935 110.214 105.528 110.551 106.052 111.224  c
106.708 112.057 107.036 113.187 107.036 114.613  c
107.036 115.612 106.892 116.460 106.605 117.159  c
106.317 117.857 105.950 118.364 105.503 118.679  c
105.057 118.994 104.626 119.152 104.211 119.152  c
103.391 119.152 102.707 118.667 102.161 117.698  c
101.700 116.882 101.469 115.898 101.469 114.747  c
h
102.713 114.905 m
102.713 116.090 102.859 117.057 103.151 117.806  c
103.393 118.437 103.752 118.752 104.231 118.752  c
104.459 118.752 104.696 118.649 104.941 118.444  c
105.187 118.239 105.373 117.895 105.500 117.413  c
105.695 116.685 105.792 115.659 105.792 114.334  c
105.792 113.352 105.690 112.533 105.487 111.877  c
105.335 111.391 105.138 111.046 104.897 110.843  c
104.724 110.703 104.514 110.633 104.269 110.633  c
103.981 110.633 103.725 110.762 103.501 111.021  c
103.196 111.372 102.988 111.924 102.878 112.677  c
102.768 113.431 102.713 114.173 102.713 114.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
156.000 96.0000 m
156.000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
152.523 111.236 m
154.618 110.214 l
154.827 110.214 l
154.827 117.482 l
154.827 117.965 154.847 118.265 154.887 118.384  c
154.928 118.502 155.011 118.593 155.138 118.657  c
155.265 118.720 155.523 118.756 155.913 118.765  c
155.913 119.000 l
152.675 119.000 l
152.675 118.765 l
153.082 118.756 153.344 118.721 153.462 118.660  c
153.581 118.599 153.663 118.516 153.710 118.412  c
153.757 118.309 153.780 117.999 153.780 117.482  c
153.780 112.836 l
153.780 112.210 153.759 111.808 153.716 111.630  c
153.687 111.495 153.633 111.395 153.554 111.332  c
153.476 111.268 153.382 111.236 153.272 111.236  c
153.115 111.236 152.897 111.302 152.618 111.433  c
h
158.469 114.747 m
158.469 113.765 158.617 112.920 158.914 112.211  c
159.210 111.502 159.603 110.974 160.094 110.627  c
160.475 110.352 160.869 110.214 161.275 110.214  c
161.935 110.214 162.528 110.551 163.052 111.224  c
163.708 112.057 164.036 113.187 164.036 114.613  c
164.036 115.612 163.892 116.460 163.605 117.159  c
163.317 117.857 162.950 118.364 162.503 118.679  c
162.057 118.994 161.626 119.152 161.211 119.152  c
160.391 119.152 159.707 118.667 159.161 117.698  c
158.700 116.882 158.469 115.898 158.469 114.747  c
h
159.713 114.905 m
159.713 116.090 159.859 117.057 160.151 117.806  c
160.393 118.437 160.752 118.752 161.231 118.752  c
161.459 118.752 161.696 118.649 161.941 118.444  c
162.187 118.239 162.373 117.895 162.500 117.413  c
162.695 116.685 162.792 115.659 162.792 114.334  c
162.792 113.352 162.690 112.533 162.487 111.877  c
162.335 111.391 162.138 111.046 161.897 110.843  c
161.724 110.703 161.514 110.633 161.269 110.633  c
160.981 110.633 160.725 110.762 160.501 111.021  c
160.196 111.372 159.988 111.924 159.878 112.677  c
159.768 113.431 159.713 114.173 159.713 114.905  c
h
165.469 114.747 m
165.469 113.765 165.617 112.920 165.914 112.211  c
166.210 111.502 166.603 110.974 167.094 110.627  c
167.475 110.352 167.869 110.214 168.275 110.214  c
168.935 110.214 169.528 110.551 170.052 111.224  c
170.708 112.057 171.036 113.187 171.036 114.613  c
171.036 115.612 170.892 116.460 170.605 117.159  c
170.317 117.857 169.950 118.364 169.503 118.679  c
169.057 118.994 168.626 119.152 168.211 119.152  c
167.391 119.152 166.707 118.667 166.161 117.698  c
165.700 116.882 165.469 115.898 165.469 114.747  c
h
166.713 114.905 m
166.713 116.090 166.859 117.057 167.151 117.806  c
167.393 118.437 167.752 118.752 168.231 118.752  c
168.459 118.752 168.696 118.649 168.941 118.444  c
169.187 118.239 169.373 117.895 169.500 117.413  c
169.695 116.685 169.792 115.659 169.792 114.334  c
169.792 113.352 169.690 112.533 169.487 111.877  c
169.335 111.391 169.138 111.046 168.897 110.843  c
168.724 110.703 168.514 110.633 168.269 110.633  c
167.981 110.633 167.725 110.762 167.501 111.021  c
167.196 111.372 166.988 111.924 166.878 112.677  c
166.768 113.431 166.713 114.173 166.713 114.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
217.000 96.0000 m
217.000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
212.523 111.236 m
214.618 110.214 l
214.827 110.214 l
214.827 117.482 l
214.827 117.965 214.847 118.265 214.887 118.384  c
214.928 118.502 215.011 118.593 215.138 118.657  c
215.265 118.720 215.523 118.756 215.913 118.765  c
215.913 119.000 l
212.675 119.000 l
212.675 118.765 l
213.082 118.756 213.344 118.721 213.462 118.660  c
213.581 118.599 213.663 118.516 213.710 118.412  c
213.757 118.309 213.780 117.999 213.780 117.482  c
213.780 112.836 l
213.780 112.210 213.759 111.808 213.716 111.630  c
213.687 111.495 213.633 111.395 213.554 111.332  c
213.476 111.268 213.382 111.236 213.272 111.236  c
213.115 111.236 212.897 111.302 212.618 111.433  c
h
223.643 110.392 m
223.147 111.471 l
220.558 111.471 l
219.993 112.627 l
221.114 112.792 222.003 113.208 222.659 113.877  c
223.222 114.453 223.503 115.130 223.503 115.908  c
223.503 116.361 223.411 116.780 223.227 117.165  c
223.043 117.550 222.811 117.878 222.532 118.149  c
222.252 118.420 221.941 118.638 221.599 118.803  c
221.112 119.036 220.613 119.152 220.101 119.152  c
219.584 119.152 219.209 119.064 218.974 118.888  c
218.739 118.713 218.622 118.519 218.622 118.308  c
218.622 118.189 218.670 118.084 218.768 117.993  c
218.865 117.902 218.988 117.857 219.136 117.857  c
219.246 117.857 219.342 117.874 219.425 117.908  c
219.507 117.942 219.648 118.028 219.847 118.168  c
220.164 118.388 220.486 118.498 220.812 118.498  c
221.307 118.498 221.741 118.311 222.116 117.936  c
222.491 117.562 222.678 117.106 222.678 116.568  c
222.678 116.048 222.511 115.562 222.176 115.112  c
221.842 114.661 221.381 114.313 220.793 114.067  c
220.331 113.877 219.703 113.767 218.907 113.737  c
220.558 110.392 l
h
225.469 114.747 m
225.469 113.765 225.617 112.920 225.914 112.211  c
226.210 111.502 226.603 110.974 227.094 110.627  c
227.475 110.352 227.869 110.214 228.275 110.214  c
228.935 110.214 229.528 110.551 230.052 111.224  c
230.708 112.057 231.036 113.187 231.036 114.613  c
231.036 115.612 230.892 116.460 230.605 117.159  c
230.317 117.857 229.950 118.364 229.503 118.679  c
229.057 118.994 228.626 119.152 228.211 119.152  c
227.391 119.152 226.707 118.667 226.161 117.698  c
225.700 116.882 225.469 115.898 225.469 114.747  c
h
226.713 114.905 m
226.713 116.090 226.859 117.057 227.151 117.806  c
227.393 118.437 227.752 118.752 228.231 118.752  c
228.459 118.752 228.696 118.649 228.941 118.444  c
229.187 118.239 229.373 117.895 229.500 117.413  c
229.695 116.685 229.792 115.659 229.792 114.334  c
229.792 113.352 229.690 112.533 229.487 111.877  c
229.335 111.391 229.138 111.046 228.897 110.843  c
228.724 110.703 228.514 110.633 228.269 110.633  c
227.981 110.633 227.725 110.762 227.501 111.021  c
227.196 111.372 226.988 111.924 226.878 112.677  c
226.768 113.431 226.713 114.173 226.713 114.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
277.000 96.0000 m
277.000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
277.960 117.343 m
277.357 119.000 l
272.279 119.000 l
272.279 118.765 l
273.773 117.402 274.824 116.289 275.434 115.426  c
276.043 114.563 276.348 113.773 276.348 113.058  c
276.348 112.512 276.181 112.064 275.846 111.712  c
275.512 111.361 275.112 111.186 274.647 111.186  c
274.223 111.186 273.844 111.309 273.507 111.557  c
273.171 111.804 272.922 112.167 272.761 112.646  c
272.526 112.646 l
272.632 111.863 272.904 111.262 273.342 110.843  c
273.780 110.424 274.327 110.214 274.983 110.214  c
275.681 110.214 276.264 110.439 276.732 110.887  c
277.199 111.336 277.433 111.865 277.433 112.474  c
277.433 112.910 277.332 113.346 277.128 113.782  c
276.815 114.467 276.307 115.193 275.605 115.959  c
274.551 117.110 273.893 117.804 273.631 118.041  c
275.878 118.041 l
276.335 118.041 276.656 118.024 276.840 117.990  c
277.024 117.956 277.190 117.888 277.338 117.784  c
277.486 117.680 277.615 117.533 277.725 117.343  c
h
279.469 114.747 m
279.469 113.765 279.617 112.920 279.914 112.211  c
280.210 111.502 280.603 110.974 281.094 110.627  c
281.475 110.352 281.869 110.214 282.275 110.214  c
282.935 110.214 283.528 110.551 284.052 111.224  c
284.708 112.057 285.036 113.187 285.036 114.613  c
285.036 115.612 284.892 116.460 284.605 117.159  c
284.317 117.857 283.950 118.364 283.503 118.679  c
283.057 118.994 282.626 119.152 282.211 119.152  c
281.391 119.152 280.707 118.667 280.161 117.698  c
279.700 116.882 279.469 115.898 279.469 114.747  c
h
280.713 114.905 m
280.713 116.090 280.859 117.057 281.151 117.806  c
281.393 118.437 281.752 118.752 282.231 118.752  c
282.459 118.752 282.696 118.649 282.941 118.444  c
283.187 118.239 283.373 117.895 283.500 117.413  c
283.695 116.685 283.792 115.659 283.792 114.334  c
283.792 113.352 283.690 112.533 283.487 111.877  c
283.335 111.391 283.138 111.046 282.897 110.843  c
282.724 110.703 282.514 110.633 282.269 110.633  c
281.981 110.633 281.725 110.762 281.501 111.021  c
281.196 111.372 280.988 111.924 280.878 112.677  c
280.768 113.431 280.713 114.173 280.713 114.905  c
h
286.469 114.747 m
286.469 113.765 286.617 112.920 286.914 112.211  c
287.210 111.502 287.603 110.974 288.094 110.627  c
288.475 110.352 288.869 110.214 289.275 110.214  c
289.935 110.214 290.528 110.551 291.052 111.224  c
291.708 112.057 292.036 113.187 292.036 114.613  c
292.036 115.612 291.892 116.460 291.605 117.159  c
291.317 117.857 290.950 118.364 290.503 118.679  c
290.057 118.994 289.626 119.152 289.211 119.152  c
288.391 119.152 287.707 118.667 287.161 117.698  c
286.700 116.882 286.469 115.898 286.469 114.747  c
h
287.713 114.905 m
287.713 116.090 287.859 117.057 288.151 117.806  c
288.393 118.437 288.752 118.752 289.231 118.752  c
289.459 118.752 289.696 118.649 289.941 118.444  c
290.187 118.239 290.373 117.895 290.500 117.413  c
290.695 116.685 290.792 115.659 290.792 114.334  c
290.792 113.352 290.690 112.533 290.487 111.877  c
290.335 111.391 290.138 111.046 289.897 110.843  c
289.724 110.703 289.514 110.633 289.269 110.633  c
288.981 110.633 288.725 110.762 288.501 111.021  c
288.196 111.372 287.988 111.924 287.878 112.677  c
287.768 113.431 287.713 114.173 287.713 114.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
337.000 96.0000 m
337.000 100.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
337.960 117.343 m
337.357 119.000 l
332.279 119.000 l
332.279 118.765 l
333.773 117.402 334.824 116.289 335.434 115.426  c
336.043 114.563 336.348 113.773 336.348 113.058  c
336.348 112.512 336.181 112.064 335.846 111.712  c
335.512 111.361 335.112 111.186 334.647 111.186  c
334.223 111.186 333.844 111.309 333.507 111.557  c
333.171 111.804 332.922 112.167 332.761 112.646  c
332.526 112.646 l
332.632 111.863 332.904 111.262 333.342 110.843  c
333.780 110.424 334.327 110.214 334.983 110.214  c
335.681 110.214 336.264 110.439 336.732 110.887  c
337.199 111.336 337.433 111.865 337.433 112.474  c
337.433 112.910 337.332 113.346 337.128 113.782  c
336.815 114.467 336.307 115.193 335.605 115.959  c
334.551 117.110 333.893 117.804 333.631 118.041  c
335.878 118.041 l
336.335 118.041 336.656 118.024 336.840 117.990  c
337.024 117.956 337.190 117.888 337.338 117.784  c
337.486 117.680 337.615 117.533 337.725 117.343  c
h
344.643 110.392 m
344.147 111.471 l
341.558 111.471 l
340.993 112.627 l
342.114 112.792 343.003 113.208 343.659 113.877  c
344.222 114.453 344.503 115.130 344.503 115.908  c
344.503 116.361 344.411 116.780 344.227 117.165  c
344.043 117.550 343.811 117.878 343.532 118.149  c
343.252 118.420 342.941 118.638 342.599 118.803  c
342.112 119.036 341.613 119.152 341.101 119.152  c
340.584 119.152 340.209 119.064 339.974 118.888  c
339.739 118.713 339.622 118.519 339.622 118.308  c
339.622 118.189 339.670 118.084 339.768 117.993  c
339.865 117.902 339.988 117.857 340.136 117.857  c
340.246 117.857 340.342 117.874 340.425 117.908  c
340.507 117.942 340.648 118.028 340.847 118.168  c
341.164 118.388 341.486 118.498 341.812 118.498  c
342.307 118.498 342.741 118.311 343.116 117.936  c
343.491 117.562 343.678 117.106 343.678 116.568  c
343.678 116.048 343.511 115.562 343.176 115.112  c
342.842 114.661 342.381 114.313 341.793 114.067  c
341.331 113.877 340.703 113.767 339.907 113.737  c
341.558 110.392 l
h
346.469 114.747 m
346.469 113.765 346.617 112.920 346.914 112.211  c
347.210 111.502 347.603 110.974 348.094 110.627  c
348.475 110.352 348.869 110.214 349.275 110.214  c
349.935 110.214 350.528 110.551 351.052 111.224  c
351.708 112.057 352.036 113.187 352.036 114.613  c
352.036 115.612 351.892 116.460 351.605 117.159  c
351.317 117.857 350.950 118.364 350.503 118.679  c
350.057 118.994 349.626 119.152 349.211 119.152  c
348.391 119.152 347.707 118.667 347.161 117.698  c
346.700 116.882 346.469 115.898 346.469 114.747  c
h
347.713 114.905 m
347.713 116.090 347.859 117.057 348.151 117.806  c
348.393 118.437 348.752 118.752 349.231 118.752  c
349.459 118.752 349.696 118.649 349.941 118.444  c
350.187 118.239 350.373 117.895 350.500 117.413  c
350.695 116.685 350.792 115.659 350.792 114.334  c
350.792 113.352 350.690 112.533 350.487 111.877  c
350.335 111.391 350.138 111.046 349.897 110.843  c
349.724 110.703 349.514 110.633 349.269 110.633  c
348.981 110.633 348.725 110.762 348.501 111.021  c
348.196 111.372 347.988 111.924 347.878 112.677  c
347.768 113.431 347.713 114.173 347.713 114.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
48.0000 96.0000 m
48.0000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
60.0000 96.0000 m
60.0000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
72.0000 96.0000 m
72.0000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
84.0000 96.0000 m
84.0000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
108.000 96.0000 m
108.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
120.000 96.0000 m
120.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
132.000 96.0000 m
132.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
144.000 96.0000 m
144.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
169.000 96.0000 m
169.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
181.000 96.0000 m
181.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
193.000 96.0000 m
193.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
205.000 96.0000 m
205.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
229.000 96.0000 m
229.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
241.000 96.0000 m
241.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
253.000 96.0000 m
253.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
265.000 96.0000 m
265.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
289.000 96.0000 m
289.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
301.000 96.0000 m
301.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
313.000 96.0000 m
313.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
325.000 96.0000 m
325.000 98.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
34.0000 189.000 m
34.0000 4.01063 l
S
Q
q
q
0 J
1 j
newpath
34.0000 166.000 m
30.0000 166.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 165 7 13 rc
newpath
16.7900 172.438 m
8.21000 172.438 l
8.21000 171.762 l
16.7900 171.762 l
h
f
Q
newpath
16.5234 168.236 m
18.6181 167.214 l
18.8276 167.214 l
18.8276 174.482 l
18.8276 174.965 18.8477 175.265 18.8879 175.384  c
18.9281 175.502 19.0117 175.593 19.1386 175.657  c
19.2656 175.720 19.5237 175.756 19.9130 175.765  c
19.9130 176.000 l
16.6757 176.000 l
16.6757 175.765 l
17.0820 175.756 17.3444 175.721 17.4628 175.660  c
17.5813 175.599 17.6639 175.516 17.7104 175.412  c
17.7570 175.309 17.7802 174.999 17.7802 174.482  c
17.7802 169.836 l
17.7802 169.210 17.7591 168.808 17.7168 168.630  c
17.6871 168.495 17.6332 168.395 17.5549 168.332  c
17.4766 168.268 17.3824 168.236 17.2724 168.236  c
17.1158 168.236 16.8979 168.302 16.6186 168.433  c
h
23.6250 174.768 m
23.8238 174.768 23.9910 174.837 24.1264 174.974  c
24.2618 175.112 24.3295 175.278 24.3295 175.473  c
24.3295 175.667 24.2608 175.833 24.1232 175.971  c
23.9857 176.109 23.8196 176.177 23.6250 176.177  c
23.4303 176.177 23.2642 176.109 23.1267 175.971  c
22.9891 175.833 22.9204 175.667 22.9204 175.473  c
22.9204 175.274 22.9891 175.107 23.1267 174.971  c
23.2642 174.836 23.4303 174.768 23.6250 174.768  c
h
30.6430 167.392 m
30.1479 168.471 l
27.5581 168.471 l
26.9931 169.627 l
28.1145 169.792 29.0032 170.208 29.6591 170.877  c
30.2220 171.453 30.5034 172.130 30.5034 172.908  c
30.5034 173.361 30.4113 173.780 30.2272 174.165  c
30.0432 174.550 29.8115 174.878 29.5322 175.149  c
29.2529 175.420 28.9418 175.638 28.5991 175.803  c
28.1124 176.036 27.6131 176.152 27.1010 176.152  c
26.5848 176.152 26.2092 176.064 25.9743 175.888  c
25.7395 175.713 25.6220 175.519 25.6220 175.308  c
25.6220 175.189 25.6707 175.084 25.7680 174.993  c
25.8654 174.902 25.9881 174.857 26.1362 174.857  c
26.2462 174.857 26.3425 174.874 26.4250 174.908  c
26.5075 174.942 26.6482 175.028 26.8471 175.168  c
27.1645 175.388 27.4861 175.498 27.8120 175.498  c
28.3071 175.498 28.7419 175.311 29.1164 174.936  c
29.4909 174.562 29.6782 174.106 29.6782 173.568  c
29.6782 173.048 29.5110 172.562 29.1767 172.112  c
28.8424 171.661 28.3811 171.313 27.7929 171.067  c
27.3317 170.877 26.7032 170.767 25.9077 170.737  c
27.5581 167.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 143.000 m
30.0000 143.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
16 141 7 13 rc
newpath
26.7900 148.438 m
18.2100 148.438 l
18.2100 147.762 l
26.7900 147.762 l
h
f
Q
newpath
26.5234 144.236 m
28.6181 143.214 l
28.8276 143.214 l
28.8276 150.482 l
28.8276 150.965 28.8477 151.265 28.8879 151.384  c
28.9281 151.502 29.0117 151.593 29.1386 151.657  c
29.2656 151.720 29.5237 151.756 29.9130 151.765  c
29.9130 152.000 l
26.6757 152.000 l
26.6757 151.765 l
27.0820 151.756 27.3444 151.721 27.4628 151.660  c
27.5813 151.599 27.6639 151.516 27.7104 151.412  c
27.7570 151.309 27.7802 150.999 27.7802 150.482  c
27.7802 145.836 l
27.7802 145.210 27.7591 144.808 27.7168 144.630  c
27.6871 144.495 27.6332 144.395 27.5549 144.332  c
27.4766 144.268 27.3824 144.236 27.2724 144.236  c
27.1158 144.236 26.8979 144.302 26.6186 144.433  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 119.000 m
30.0000 119.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 118 7 13 rc
newpath
16.7900 125.438 m
8.21000 125.438 l
8.21000 124.762 l
16.7900 124.762 l
h
f
Q
newpath
15.4697 124.747 m
15.4697 123.765 15.6178 122.920 15.9140 122.211  c
16.2102 121.502 16.6038 120.974 17.0947 120.627  c
17.4755 120.352 17.8691 120.214 18.2753 120.214  c
18.9355 120.214 19.5279 120.551 20.0527 121.224  c
20.7086 122.057 21.0366 123.187 21.0366 124.613  c
21.0366 125.612 20.8927 126.460 20.6049 127.159  c
20.3172 127.857 19.9501 128.364 19.5036 128.679  c
19.0572 128.994 18.6266 129.152 18.2119 129.152  c
17.3909 129.152 16.7075 128.667 16.1616 127.698  c
15.7003 126.882 15.4697 125.898 15.4697 124.747  c
h
16.7138 124.905 m
16.7138 126.090 16.8598 127.057 17.1518 127.806  c
17.3930 128.437 17.7527 128.752 18.2309 128.752  c
18.4594 128.752 18.6964 128.649 18.9418 128.444  c
19.1873 128.239 19.3735 127.895 19.5004 127.413  c
19.6951 126.685 19.7924 125.659 19.7924 124.334  c
19.7924 123.352 19.6909 122.533 19.4877 121.877  c
19.3354 121.391 19.1386 121.046 18.8974 120.843  c
18.7239 120.703 18.5144 120.633 18.2690 120.633  c
17.9812 120.633 17.7252 120.762 17.5009 121.021  c
17.1962 121.372 16.9889 121.924 16.8789 122.677  c
16.7688 123.431 16.7138 124.173 16.7138 124.905  c
h
23.6250 127.768 m
23.8238 127.768 23.9910 127.837 24.1264 127.974  c
24.2618 128.112 24.3295 128.278 24.3295 128.473  c
24.3295 128.667 24.2608 128.833 24.1232 128.971  c
23.9857 129.109 23.8196 129.177 23.6250 129.177  c
23.4303 129.177 23.2642 129.109 23.1267 128.971  c
22.9891 128.833 22.9204 128.667 22.9204 128.473  c
22.9204 128.274 22.9891 128.107 23.1267 127.971  c
23.2642 127.836 23.4303 127.768 23.6250 127.768  c
h
30.6430 120.392 m
30.1479 121.471 l
27.5581 121.471 l
26.9931 122.627 l
28.1145 122.792 29.0032 123.208 29.6591 123.877  c
30.2220 124.453 30.5034 125.130 30.5034 125.908  c
30.5034 126.361 30.4113 126.780 30.2272 127.165  c
30.0432 127.550 29.8115 127.878 29.5322 128.149  c
29.2529 128.420 28.9418 128.638 28.5991 128.803  c
28.1124 129.036 27.6131 129.152 27.1010 129.152  c
26.5848 129.152 26.2092 129.064 25.9743 128.888  c
25.7395 128.713 25.6220 128.519 25.6220 128.308  c
25.6220 128.189 25.6707 128.084 25.7680 127.993  c
25.8654 127.902 25.9881 127.857 26.1362 127.857  c
26.2462 127.857 26.3425 127.874 26.4250 127.908  c
26.5075 127.942 26.6482 128.028 26.8471 128.168  c
27.1645 128.388 27.4861 128.498 27.8120 128.498  c
28.3071 128.498 28.7419 128.311 29.1164 127.936  c
29.4909 127.562 29.6782 127.106 29.6782 126.568  c
29.6782 126.048 29.5110 125.562 29.1767 125.112  c
28.8424 124.661 28.3811 124.313 27.7929 124.067  c
27.3317 123.877 26.7032 123.767 25.9077 123.737  c
27.5581 120.392 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 96.0000 m
30.0000 96.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.4697 101.747 m
25.4697 100.765 25.6178 99.9200 25.9140 99.2111  c
26.2102 98.5023 26.6038 97.9744 27.0947 97.6274  c
27.4755 97.3523 27.8691 97.2148 28.2753 97.2148  c
28.9355 97.2148 29.5279 97.5512 30.0527 98.2241  c
30.7086 99.0577 31.0366 100.187 31.0366 101.613  c
31.0366 102.612 30.8927 103.460 30.6049 104.159  c
30.3172 104.857 29.9501 105.364 29.5036 105.679  c
29.0572 105.994 28.6266 106.152 28.2119 106.152  c
27.3909 106.152 26.7075 105.667 26.1616 104.698  c
25.7003 103.882 25.4697 102.898 25.4697 101.747  c
h
26.7138 101.905 m
26.7138 103.090 26.8598 104.057 27.1518 104.806  c
27.3930 105.437 27.7527 105.752 28.2309 105.752  c
28.4594 105.752 28.6964 105.649 28.9418 105.444  c
29.1873 105.239 29.3735 104.895 29.5004 104.413  c
29.6951 103.685 29.7924 102.659 29.7924 101.334  c
29.7924 100.352 29.6909 99.5338 29.4877 98.8779  c
29.3354 98.3912 29.1386 98.0463 28.8974 97.8432  c
28.7239 97.7036 28.5144 97.6337 28.2690 97.6337  c
27.9812 97.6337 27.7252 97.7628 27.5009 98.0210  c
27.1962 98.3722 26.9889 98.9244 26.8789 99.6777  c
26.7688 100.431 26.7138 101.173 26.7138 101.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 73.0000 m
30.0000 73.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
15.4697 77.7470 m
15.4697 76.7653 15.6178 75.9200 15.9140 75.2111  c
16.2102 74.5023 16.6038 73.9744 17.0947 73.6274  c
17.4755 73.3523 17.8691 73.2148 18.2753 73.2148  c
18.9355 73.2148 19.5279 73.5512 20.0527 74.2241  c
20.7086 75.0577 21.0366 76.1876 21.0366 77.6137  c
21.0366 78.6124 20.8927 79.4609 20.6049 80.1591  c
20.3172 80.8574 19.9501 81.3641 19.5036 81.6794  c
19.0572 81.9947 18.6266 82.1523 18.2119 82.1523  c
17.3909 82.1523 16.7075 81.6678 16.1616 80.6987  c
15.7003 79.8820 15.4697 78.8981 15.4697 77.7470  c
h
16.7138 77.9057 m
16.7138 79.0906 16.8598 80.0576 17.1518 80.8066  c
17.3930 81.4371 17.7527 81.7524 18.2309 81.7524  c
18.4594 81.7524 18.6964 81.6498 18.9418 81.4445  c
19.1873 81.2393 19.3735 80.8955 19.5004 80.4130  c
19.6951 79.6852 19.7924 78.6590 19.7924 77.3344  c
19.7924 76.3527 19.6909 75.5338 19.4877 74.8779  c
19.3354 74.3912 19.1386 74.0463 18.8974 73.8432  c
18.7239 73.7036 18.5144 73.6337 18.2690 73.6337  c
17.9812 73.6337 17.7252 73.7628 17.5009 74.0210  c
17.1962 74.3722 16.9889 74.9244 16.8789 75.6777  c
16.7688 76.4309 16.7138 77.1736 16.7138 77.9057  c
h
23.6250 80.7685 m
23.8238 80.7685 23.9910 80.8373 24.1264 80.9748  c
24.2618 81.1123 24.3295 81.2784 24.3295 81.4731  c
24.3295 81.6678 24.2608 81.8339 24.1232 81.9714  c
23.9857 82.1089 23.8196 82.1777 23.6250 82.1777  c
23.4303 82.1777 23.2642 82.1089 23.1267 81.9714  c
22.9891 81.8339 22.9204 81.6678 22.9204 81.4731  c
22.9204 81.2742 22.9891 81.1071 23.1267 80.9716  c
23.2642 80.8362 23.4303 80.7685 23.6250 80.7685  c
h
30.6430 73.3925 m
30.1479 74.4716 l
27.5581 74.4716 l
26.9931 75.6269 l
28.1145 75.7919 29.0032 76.2088 29.6591 76.8774  c
30.2220 77.4529 30.5034 78.1300 30.5034 78.9086  c
30.5034 79.3614 30.4113 79.7804 30.2272 80.1655  c
30.0432 80.5506 29.8115 80.8785 29.5322 81.1494  c
29.2529 81.4202 28.9418 81.6381 28.5991 81.8032  c
28.1124 82.0359 27.6131 82.1523 27.1010 82.1523  c
26.5848 82.1523 26.2092 82.0645 25.9743 81.8889  c
25.7395 81.7133 25.6220 81.5196 25.6220 81.3081  c
25.6220 81.1896 25.6707 81.0848 25.7680 80.9939  c
25.8654 80.9029 25.9881 80.8574 26.1362 80.8574  c
26.2462 80.8574 26.3425 80.8743 26.4250 80.9082  c
26.5075 80.9420 26.6482 81.0288 26.8471 81.1684  c
27.1645 81.3885 27.4861 81.4985 27.8120 81.4985  c
28.3071 81.4985 28.7419 81.3112 29.1164 80.9367  c
29.4909 80.5622 29.6782 80.1062 29.6782 79.5688  c
29.6782 79.0483 29.5110 78.5627 29.1767 78.1120  c
28.8424 77.6613 28.3811 77.3133 27.7929 77.0678  c
27.3317 76.8774 26.7032 76.7674 25.9077 76.7377  c
27.5581 73.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 50.0000 m
30.0000 50.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
26.5234 51.2368 m
28.6181 50.2148 l
28.8276 50.2148 l
28.8276 57.4829 l
28.8276 57.9653 28.8477 58.2657 28.8879 58.3842  c
28.9281 58.5027 29.0117 58.5937 29.1386 58.6572  c
29.2656 58.7207 29.5237 58.7566 29.9130 58.7651  c
29.9130 59.0000 l
26.6757 59.0000 l
26.6757 58.7651 l
27.0820 58.7566 27.3444 58.7217 27.4628 58.6604  c
27.5813 58.5990 27.6639 58.5165 27.7104 58.4128  c
27.7570 58.3091 27.7802 57.9991 27.7802 57.4829  c
27.7802 52.8364 l
27.7802 52.2101 27.7591 51.8081 27.7168 51.6303  c
27.6871 51.4949 27.6332 51.3955 27.5549 51.3320  c
27.4766 51.2685 27.3824 51.2368 27.2724 51.2368  c
27.1158 51.2368 26.8979 51.3024 26.6186 51.4335  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 26.0000 m
30.0000 26.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
16.5234 28.2368 m
18.6181 27.2148 l
18.8276 27.2148 l
18.8276 34.4829 l
18.8276 34.9653 18.8477 35.2657 18.8879 35.3842  c
18.9281 35.5027 19.0117 35.5937 19.1386 35.6572  c
19.2656 35.7207 19.5237 35.7566 19.9130 35.7651  c
19.9130 36.0000 l
16.6757 36.0000 l
16.6757 35.7651 l
17.0820 35.7566 17.3444 35.7217 17.4628 35.6604  c
17.5813 35.5990 17.6639 35.5165 17.7104 35.4128  c
17.7570 35.3091 17.7802 34.9991 17.7802 34.4829  c
17.7802 29.8364 l
17.7802 29.2101 17.7591 28.8081 17.7168 28.6303  c
17.6871 28.4949 17.6332 28.3955 17.5549 28.3320  c
17.4766 28.2685 17.3824 28.2368 17.2724 28.2368  c
17.1158 28.2368 16.8979 28.3024 16.6186 28.4335  c
h
23.6250 34.7685 m
23.8238 34.7685 23.9910 34.8373 24.1264 34.9748  c
24.2618 35.1123 24.3295 35.2784 24.3295 35.4731  c
24.3295 35.6678 24.2608 35.8339 24.1232 35.9714  c
23.9857 36.1089 23.8196 36.1777 23.6250 36.1777  c
23.4303 36.1777 23.2642 36.1089 23.1267 35.9714  c
22.9891 35.8339 22.9204 35.6678 22.9204 35.4731  c
22.9204 35.2742 22.9891 35.1071 23.1267 34.9716  c
23.2642 34.8362 23.4303 34.7685 23.6250 34.7685  c
h
30.6430 27.3925 m
30.1479 28.4716 l
27.5581 28.4716 l
26.9931 29.6269 l
28.1145 29.7919 29.0032 30.2088 29.6591 30.8774  c
30.2220 31.4529 30.5034 32.1300 30.5034 32.9086  c
30.5034 33.3614 30.4113 33.7804 30.2272 34.1655  c
30.0432 34.5506 29.8115 34.8785 29.5322 35.1494  c
29.2529 35.4202 28.9418 35.6381 28.5991 35.8032  c
28.1124 36.0359 27.6131 36.1523 27.1010 36.1523  c
26.5848 36.1523 26.2092 36.0645 25.9743 35.8889  c
25.7395 35.7133 25.6220 35.5196 25.6220 35.3081  c
25.6220 35.1896 25.6707 35.0848 25.7680 34.9939  c
25.8654 34.9029 25.9881 34.8574 26.1362 34.8574  c
26.2462 34.8574 26.3425 34.8743 26.4250 34.9082  c
26.5075 34.9420 26.6482 35.0288 26.8471 35.1684  c
27.1645 35.3885 27.4861 35.4985 27.8120 35.4985  c
28.3071 35.4985 28.7419 35.3112 29.1164 34.9367  c
29.4909 34.5622 29.6782 34.1062 29.6782 33.5688  c
29.6782 33.0483 29.5110 32.5627 29.1767 32.1120  c
28.8424 31.6613 28.3811 31.3133 27.7929 31.0678  c
27.3317 30.8774 26.7032 30.7674 25.9077 30.7377  c
27.5581 27.3925 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 185.000 m
32.0000 185.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 180.000 m
32.0000 180.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 175.000 m
32.0000 175.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 171.000 m
32.0000 171.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 161.000 m
32.0000 161.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 157.000 m
32.0000 157.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 152.000 m
32.0000 152.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 147.000 m
32.0000 147.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 138.000 m
32.0000 138.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 133.000 m
32.0000 133.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 129.000 m
32.0000 129.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 124.000 m
32.0000 124.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 115.000 m
32.0000 115.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 110.000 m
32.0000 110.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 105.000 m
32.0000 105.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 101.000 m
32.0000 101.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 91.0000 m
32.0000 91.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 87.0000 m
32.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 82.0000 m
32.0000 82.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 77.0000 m
32.0000 77.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 68.0000 m
32.0000 68.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 63.0000 m
32.0000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 59.0000 m
32.0000 59.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 54.0000 m
32.0000 54.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 45.0000 m
32.0000 45.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 40.0000 m
32.0000 40.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 36.0000 m
32.0000 36.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 31.0000 m
32.0000 31.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 22.0000 m
32.0000 22.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 17.0000 m
32.0000 17.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 12.0000 m
32.0000 12.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
34.0000 8.00000 m
32.0000 8.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 358 203 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
