%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 233 575 558
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2012”N9ŒŽ1“ú 7Žž24•ª58•b JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
340 199 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
340.000 0 l
340.000 199.000 l
0 199.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 330 189 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
27.8162 2.01204 300.177 165.987 rc
newpath
28.8162 162.420 m
29.9816 164.902 l
31.1470 167.000 l
32.3124 157.215 l
33.4778 161.841 l
34.6432 156.553 l
35.8086 161.935 l
36.9740 154.462 l
38.1394 162.163 l
39.3048 158.167 l
40.4702 157.092 l
41.6356 157.566 l
42.8010 165.571 l
43.9664 161.761 l
45.1318 154.547 l
46.2972 164.070 l
47.4626 156.928 l
48.6280 160.744 l
49.7934 156.937 l
50.9588 162.269 l
52.1243 158.377 l
53.2897 155.183 l
54.4551 160.160 l
55.6205 161.146 l
56.7859 155.014 l
57.9513 159.869 l
59.1167 163.230 l
60.2821 165.175 l
61.4475 156.168 l
62.6129 158.309 l
63.7783 155.387 l
64.9437 159.932 l
66.1091 153.597 l
67.2745 153.466 l
68.4399 151.877 l
69.6053 158.540 l
70.7707 157.559 l
71.9361 160.264 l
73.1015 150.891 l
74.2669 154.485 l
75.4323 155.949 l
76.5977 156.056 l
77.7631 164.658 l
78.9285 164.363 l
80.0939 158.047 l
81.2593 158.908 l
82.4247 153.321 l
83.5901 152.250 l
84.7555 161.891 l
85.9209 150.782 l
87.0863 158.729 l
88.2517 152.830 l
89.4171 148.922 l
90.5825 156.453 l
91.7479 157.907 l
92.9133 149.672 l
94.0787 148.852 l
95.2441 151.094 l
96.4095 160.308 l
97.5749 156.478 l
98.7403 155.357 l
99.9057 158.686 l
101.071 158.885 l
102.236 146.001 l
103.402 151.303 l
104.567 142.732 l
105.732 160.961 l
106.898 152.030 l
108.063 161.120 l
109.229 147.882 l
110.394 155.657 l
111.559 139.882 l
112.725 159.319 l
113.890 147.330 l
115.056 155.873 l
116.221 144.519 l
117.386 149.453 l
118.552 156.418 l
119.717 139.540 l
120.883 151.803 l
122.048 134.783 l
123.213 135.158 l
124.379 152.651 l
125.544 146.414 l
126.710 129.115 l
127.875 129.512 l
129.040 147.826 l
130.206 124.036 l
131.371 134.815 l
132.537 138.934 l
133.702 147.144 l
134.867 128.888 l
136.033 132.850 l
137.198 128.576 l
138.364 136.345 l
139.529 123.045 l
140.694 119.556 l
141.860 144.212 l
143.025 144.151 l
144.191 130.317 l
145.356 116.231 l
146.521 96.3188 l
147.687 99.1408 l
148.852 116.855 l
150.018 132.549 l
151.183 122.200 l
152.348 73.9604 l
153.514 79.4957 l
154.679 109.273 l
155.845 105.453 l
157.010 67.9866 l
158.175 72.6611 l
159.341 50.5768 l
160.506 81.5599 l
161.672 91.7296 l
162.837 43.5193 l
164.002 36.0634 l
165.168 55.9892 l
166.333 19.3295 l
167.499 30.7805 l
168.664 53.0324 l
169.829 4.01205 l
170.995 31.9499 l
172.160 31.4877 l
173.326 71.1434 l
174.491 76.4876 l
175.656 37.0522 l
176.822 54.2812 l
177.987 52.1518 l
179.153 34.5514 l
180.318 65.1797 l
181.484 24.3537 l
182.649 75.8942 l
183.814 51.3127 l
184.980 16.9453 l
186.145 64.6769 l
187.311 28.0065 l
188.476 105.112 l
189.641 91.7821 l
190.807 32.1393 l
191.972 97.2228 l
193.138 78.1973 l
194.303 49.8039 l
195.468 120.714 l
196.634 76.2884 l
197.799 98.4410 l
198.965 77.7593 l
200.130 70.5953 l
201.295 116.340 l
202.461 103.660 l
203.626 108.194 l
204.792 130.207 l
205.957 102.578 l
207.122 97.3947 l
208.288 125.390 l
209.453 130.503 l
210.619 110.406 l
211.784 109.685 l
212.949 109.242 l
214.115 123.824 l
215.280 140.764 l
216.446 126.821 l
217.611 128.689 l
218.776 134.176 l
219.942 141.025 l
221.107 145.670 l
222.273 151.688 l
223.438 152.338 l
224.603 126.891 l
225.769 146.742 l
226.934 135.845 l
228.100 135.837 l
229.265 149.738 l
230.430 142.557 l
231.596 152.377 l
232.761 153.664 l
233.927 150.205 l
235.092 142.062 l
236.257 146.942 l
237.423 151.718 l
238.588 144.795 l
239.754 140.666 l
240.919 143.307 l
242.084 154.017 l
243.250 149.459 l
244.415 150.022 l
245.581 145.448 l
246.746 154.037 l
247.911 160.545 l
249.077 145.741 l
250.242 145.235 l
251.408 146.631 l
252.573 155.773 l
253.738 145.465 l
254.904 150.402 l
256.069 149.076 l
257.235 151.675 l
258.400 152.060 l
259.565 148.597 l
260.731 162.743 l
261.896 158.194 l
263.062 150.175 l
264.227 159.246 l
265.392 158.428 l
266.558 156.205 l
267.723 161.220 l
268.889 158.857 l
270.054 161.949 l
271.219 161.300 l
272.385 162.035 l
273.550 162.893 l
274.716 153.902 l
275.881 152.613 l
277.046 152.621 l
278.212 159.612 l
279.377 162.663 l
280.543 159.275 l
281.708 161.015 l
282.873 163.422 l
284.039 151.601 l
285.204 161.915 l
286.370 161.109 l
287.535 156.704 l
288.701 154.701 l
289.866 160.744 l
291.031 152.655 l
292.197 154.602 l
293.362 159.087 l
294.528 156.005 l
295.693 159.471 l
296.858 165.873 l
298.024 165.984 l
299.189 153.343 l
300.355 156.448 l
301.520 163.420 l
302.685 165.110 l
303.851 160.796 l
305.016 165.849 l
306.182 154.255 l
307.347 161.263 l
308.512 155.411 l
309.678 163.911 l
310.843 159.927 l
312.009 163.878 l
313.174 157.572 l
314.339 161.129 l
315.505 158.479 l
316.670 155.198 l
317.836 162.425 l
319.001 154.990 l
320.166 166.448 l
321.332 158.789 l
322.497 166.078 l
323.663 163.811 l
324.828 158.440 l
325.993 157.039 l
S
cliprestore
newpath
0 0 m
0 189.000 l
330.000 189.000 l
330.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
25.8162 170.000 m
325.993 170.000 l
S
Q
q
q
0 J
1 j
newpath
86.0000 170.000 m
86.0000 174.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
88.6430 180.392 m
88.1479 181.471 l
85.5581 181.471 l
84.9931 182.627 l
86.1145 182.792 87.0032 183.208 87.6591 183.877  c
88.2220 184.453 88.5034 185.130 88.5034 185.908  c
88.5034 186.361 88.4113 186.780 88.2272 187.165  c
88.0432 187.550 87.8115 187.878 87.5322 188.149  c
87.2529 188.420 86.9418 188.638 86.5991 188.803  c
86.1124 189.036 85.6131 189.152 85.1010 189.152  c
84.5848 189.152 84.2092 189.064 83.9743 188.888  c
83.7395 188.713 83.6220 188.519 83.6220 188.308  c
83.6220 188.189 83.6707 188.084 83.7680 187.993  c
83.8654 187.902 83.9881 187.857 84.1362 187.857  c
84.2462 187.857 84.3425 187.874 84.4250 187.908  c
84.5075 187.942 84.6482 188.028 84.8471 188.168  c
85.1645 188.388 85.4861 188.498 85.8120 188.498  c
86.3071 188.498 86.7419 188.311 87.1164 187.936  c
87.4909 187.562 87.6782 187.106 87.6782 186.568  c
87.6782 186.048 87.5110 185.562 87.1767 185.112  c
86.8424 184.661 86.3811 184.313 85.7929 184.067  c
85.3317 183.877 84.7032 183.767 83.9077 183.737  c
85.5581 180.392 l
h
90.4697 184.747 m
90.4697 183.765 90.6178 182.920 90.9140 182.211  c
91.2102 181.502 91.6038 180.974 92.0947 180.627  c
92.4755 180.352 92.8691 180.214 93.2753 180.214  c
93.9355 180.214 94.5279 180.551 95.0527 181.224  c
95.7086 182.057 96.0366 183.187 96.0366 184.613  c
96.0366 185.612 95.8927 186.460 95.6049 187.159  c
95.3172 187.857 94.9501 188.364 94.5036 188.679  c
94.0572 188.994 93.6266 189.152 93.2119 189.152  c
92.3909 189.152 91.7075 188.667 91.1616 187.698  c
90.7003 186.882 90.4697 185.898 90.4697 184.747  c
h
91.7138 184.905 m
91.7138 186.090 91.8598 187.057 92.1518 187.806  c
92.3930 188.437 92.7527 188.752 93.2309 188.752  c
93.4594 188.752 93.6964 188.649 93.9418 188.444  c
94.1873 188.239 94.3735 187.895 94.5004 187.413  c
94.6951 186.685 94.7924 185.659 94.7924 184.334  c
94.7924 183.352 94.6909 182.533 94.4877 181.877  c
94.3354 181.391 94.1386 181.046 93.8974 180.843  c
93.7239 180.703 93.5144 180.633 93.2690 180.633  c
92.9812 180.633 92.7252 180.762 92.5009 181.021  c
92.1962 181.372 91.9889 181.924 91.8789 182.677  c
91.7688 183.431 91.7138 184.173 91.7138 184.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
144.000 170.000 m
144.000 174.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
140.523 181.236 m
142.618 180.214 l
142.827 180.214 l
142.827 187.482 l
142.827 187.965 142.847 188.265 142.887 188.384  c
142.928 188.502 143.011 188.593 143.138 188.657  c
143.265 188.720 143.523 188.756 143.913 188.765  c
143.913 189.000 l
140.675 189.000 l
140.675 188.765 l
141.082 188.756 141.344 188.721 141.462 188.660  c
141.581 188.599 141.663 188.516 141.710 188.412  c
141.757 188.309 141.780 187.999 141.780 187.482  c
141.780 182.836 l
141.780 182.210 141.759 181.808 141.716 181.630  c
141.687 181.495 141.633 181.395 141.554 181.332  c
141.476 181.268 141.382 181.236 141.272 181.236  c
141.115 181.236 140.897 181.302 140.618 181.433  c
h
146.469 184.747 m
146.469 183.765 146.617 182.920 146.914 182.211  c
147.210 181.502 147.603 180.974 148.094 180.627  c
148.475 180.352 148.869 180.214 149.275 180.214  c
149.935 180.214 150.528 180.551 151.052 181.224  c
151.708 182.057 152.036 183.187 152.036 184.613  c
152.036 185.612 151.892 186.460 151.605 187.159  c
151.317 187.857 150.950 188.364 150.503 188.679  c
150.057 188.994 149.626 189.152 149.211 189.152  c
148.391 189.152 147.707 188.667 147.161 187.698  c
146.700 186.882 146.469 185.898 146.469 184.747  c
h
147.713 184.905 m
147.713 186.090 147.859 187.057 148.151 187.806  c
148.393 188.437 148.752 188.752 149.231 188.752  c
149.459 188.752 149.696 188.649 149.941 188.444  c
150.187 188.239 150.373 187.895 150.500 187.413  c
150.695 186.685 150.792 185.659 150.792 184.334  c
150.792 183.352 150.690 182.533 150.487 181.877  c
150.335 181.391 150.138 181.046 149.897 180.843  c
149.724 180.703 149.514 180.633 149.269 180.633  c
148.981 180.633 148.725 180.762 148.501 181.021  c
148.196 181.372 147.988 181.924 147.878 182.677  c
147.768 183.431 147.713 184.173 147.713 184.905  c
h
153.469 184.747 m
153.469 183.765 153.617 182.920 153.914 182.211  c
154.210 181.502 154.603 180.974 155.094 180.627  c
155.475 180.352 155.869 180.214 156.275 180.214  c
156.935 180.214 157.528 180.551 158.052 181.224  c
158.708 182.057 159.036 183.187 159.036 184.613  c
159.036 185.612 158.892 186.460 158.605 187.159  c
158.317 187.857 157.950 188.364 157.503 188.679  c
157.057 188.994 156.626 189.152 156.211 189.152  c
155.391 189.152 154.707 188.667 154.161 187.698  c
153.700 186.882 153.469 185.898 153.469 184.747  c
h
154.713 184.905 m
154.713 186.090 154.859 187.057 155.151 187.806  c
155.393 188.437 155.752 188.752 156.231 188.752  c
156.459 188.752 156.696 188.649 156.941 188.444  c
157.187 188.239 157.373 187.895 157.500 187.413  c
157.695 186.685 157.792 185.659 157.792 184.334  c
157.792 183.352 157.690 182.533 157.487 181.877  c
157.335 181.391 157.138 181.046 156.897 180.843  c
156.724 180.703 156.514 180.633 156.269 180.633  c
155.981 180.633 155.725 180.762 155.501 181.021  c
155.196 181.372 154.988 181.924 154.878 182.677  c
154.768 183.431 154.713 184.173 154.713 184.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
202.000 170.000 m
202.000 174.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
198.523 181.236 m
200.618 180.214 l
200.827 180.214 l
200.827 187.482 l
200.827 187.965 200.847 188.265 200.887 188.384  c
200.928 188.502 201.011 188.593 201.138 188.657  c
201.265 188.720 201.523 188.756 201.913 188.765  c
201.913 189.000 l
198.675 189.000 l
198.675 188.765 l
199.082 188.756 199.344 188.721 199.462 188.660  c
199.581 188.599 199.663 188.516 199.710 188.412  c
199.757 188.309 199.780 187.999 199.780 187.482  c
199.780 182.836 l
199.780 182.210 199.759 181.808 199.716 181.630  c
199.687 181.495 199.633 181.395 199.554 181.332  c
199.476 181.268 199.382 181.236 199.272 181.236  c
199.115 181.236 198.897 181.302 198.618 181.433  c
h
209.643 180.392 m
209.147 181.471 l
206.558 181.471 l
205.993 182.627 l
207.114 182.792 208.003 183.208 208.659 183.877  c
209.222 184.453 209.503 185.130 209.503 185.908  c
209.503 186.361 209.411 186.780 209.227 187.165  c
209.043 187.550 208.811 187.878 208.532 188.149  c
208.252 188.420 207.941 188.638 207.599 188.803  c
207.112 189.036 206.613 189.152 206.101 189.152  c
205.584 189.152 205.209 189.064 204.974 188.888  c
204.739 188.713 204.622 188.519 204.622 188.308  c
204.622 188.189 204.670 188.084 204.768 187.993  c
204.865 187.902 204.988 187.857 205.136 187.857  c
205.246 187.857 205.342 187.874 205.425 187.908  c
205.507 187.942 205.648 188.028 205.847 188.168  c
206.164 188.388 206.486 188.498 206.812 188.498  c
207.307 188.498 207.741 188.311 208.116 187.936  c
208.491 187.562 208.678 187.106 208.678 186.568  c
208.678 186.048 208.511 185.562 208.176 185.112  c
207.842 184.661 207.381 184.313 206.793 184.067  c
206.331 183.877 205.703 183.767 204.907 183.737  c
206.558 180.392 l
h
211.469 184.747 m
211.469 183.765 211.617 182.920 211.914 182.211  c
212.210 181.502 212.603 180.974 213.094 180.627  c
213.475 180.352 213.869 180.214 214.275 180.214  c
214.935 180.214 215.528 180.551 216.052 181.224  c
216.708 182.057 217.036 183.187 217.036 184.613  c
217.036 185.612 216.892 186.460 216.605 187.159  c
216.317 187.857 215.950 188.364 215.503 188.679  c
215.057 188.994 214.626 189.152 214.211 189.152  c
213.391 189.152 212.707 188.667 212.161 187.698  c
211.700 186.882 211.469 185.898 211.469 184.747  c
h
212.713 184.905 m
212.713 186.090 212.859 187.057 213.151 187.806  c
213.393 188.437 213.752 188.752 214.231 188.752  c
214.459 188.752 214.696 188.649 214.941 188.444  c
215.187 188.239 215.373 187.895 215.500 187.413  c
215.695 186.685 215.792 185.659 215.792 184.334  c
215.792 183.352 215.690 182.533 215.487 181.877  c
215.335 181.391 215.138 181.046 214.897 180.843  c
214.724 180.703 214.514 180.633 214.269 180.633  c
213.981 180.633 213.725 180.762 213.501 181.021  c
213.196 181.372 212.988 181.924 212.878 182.677  c
212.768 183.431 212.713 184.173 212.713 184.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
261.000 170.000 m
261.000 174.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
260.960 187.343 m
260.357 189.000 l
255.279 189.000 l
255.279 188.765 l
256.773 187.402 257.824 186.289 258.434 185.426  c
259.043 184.563 259.348 183.773 259.348 183.058  c
259.348 182.512 259.181 182.064 258.846 181.712  c
258.512 181.361 258.112 181.186 257.647 181.186  c
257.223 181.186 256.844 181.309 256.507 181.557  c
256.171 181.804 255.922 182.167 255.761 182.646  c
255.526 182.646 l
255.632 181.863 255.904 181.262 256.342 180.843  c
256.780 180.424 257.327 180.214 257.983 180.214  c
258.681 180.214 259.264 180.439 259.732 180.887  c
260.199 181.336 260.433 181.865 260.433 182.474  c
260.433 182.910 260.332 183.346 260.128 183.782  c
259.815 184.467 259.307 185.193 258.605 185.959  c
257.551 187.110 256.893 187.804 256.631 188.041  c
258.878 188.041 l
259.335 188.041 259.656 188.024 259.840 187.990  c
260.024 187.956 260.190 187.888 260.338 187.784  c
260.486 187.680 260.615 187.533 260.725 187.343  c
h
262.469 184.747 m
262.469 183.765 262.617 182.920 262.914 182.211  c
263.210 181.502 263.603 180.974 264.094 180.627  c
264.475 180.352 264.869 180.214 265.275 180.214  c
265.935 180.214 266.528 180.551 267.052 181.224  c
267.708 182.057 268.036 183.187 268.036 184.613  c
268.036 185.612 267.892 186.460 267.605 187.159  c
267.317 187.857 266.950 188.364 266.503 188.679  c
266.057 188.994 265.626 189.152 265.211 189.152  c
264.391 189.152 263.707 188.667 263.161 187.698  c
262.700 186.882 262.469 185.898 262.469 184.747  c
h
263.713 184.905 m
263.713 186.090 263.859 187.057 264.151 187.806  c
264.393 188.437 264.752 188.752 265.231 188.752  c
265.459 188.752 265.696 188.649 265.941 188.444  c
266.187 188.239 266.373 187.895 266.500 187.413  c
266.695 186.685 266.792 185.659 266.792 184.334  c
266.792 183.352 266.690 182.533 266.487 181.877  c
266.335 181.391 266.138 181.046 265.897 180.843  c
265.724 180.703 265.514 180.633 265.269 180.633  c
264.981 180.633 264.725 180.762 264.501 181.021  c
264.196 181.372 263.988 181.924 263.878 182.677  c
263.768 183.431 263.713 184.173 263.713 184.905  c
h
269.469 184.747 m
269.469 183.765 269.617 182.920 269.914 182.211  c
270.210 181.502 270.603 180.974 271.094 180.627  c
271.475 180.352 271.869 180.214 272.275 180.214  c
272.935 180.214 273.528 180.551 274.052 181.224  c
274.708 182.057 275.036 183.187 275.036 184.613  c
275.036 185.612 274.892 186.460 274.605 187.159  c
274.317 187.857 273.950 188.364 273.503 188.679  c
273.057 188.994 272.626 189.152 272.211 189.152  c
271.391 189.152 270.707 188.667 270.161 187.698  c
269.700 186.882 269.469 185.898 269.469 184.747  c
h
270.713 184.905 m
270.713 186.090 270.859 187.057 271.151 187.806  c
271.393 188.437 271.752 188.752 272.231 188.752  c
272.459 188.752 272.696 188.649 272.941 188.444  c
273.187 188.239 273.373 187.895 273.500 187.413  c
273.695 186.685 273.792 185.659 273.792 184.334  c
273.792 183.352 273.690 182.533 273.487 181.877  c
273.335 181.391 273.138 181.046 272.897 180.843  c
272.724 180.703 272.514 180.633 272.269 180.633  c
271.981 180.633 271.725 180.762 271.501 181.021  c
271.196 181.372 270.988 181.924 270.878 182.677  c
270.768 183.431 270.713 184.173 270.713 184.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
319.000 170.000 m
319.000 174.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
319.960 187.343 m
319.357 189.000 l
314.279 189.000 l
314.279 188.765 l
315.773 187.402 316.824 186.289 317.434 185.426  c
318.043 184.563 318.348 183.773 318.348 183.058  c
318.348 182.512 318.181 182.064 317.846 181.712  c
317.512 181.361 317.112 181.186 316.647 181.186  c
316.223 181.186 315.844 181.309 315.507 181.557  c
315.171 181.804 314.922 182.167 314.761 182.646  c
314.526 182.646 l
314.632 181.863 314.904 181.262 315.342 180.843  c
315.780 180.424 316.327 180.214 316.983 180.214  c
317.681 180.214 318.264 180.439 318.732 180.887  c
319.199 181.336 319.433 181.865 319.433 182.474  c
319.433 182.910 319.332 183.346 319.128 183.782  c
318.815 184.467 318.307 185.193 317.605 185.959  c
316.551 187.110 315.893 187.804 315.631 188.041  c
317.878 188.041 l
318.335 188.041 318.656 188.024 318.840 187.990  c
319.024 187.956 319.190 187.888 319.338 187.784  c
319.486 187.680 319.615 187.533 319.725 187.343  c
h
326.643 180.392 m
326.147 181.471 l
323.558 181.471 l
322.993 182.627 l
324.114 182.792 325.003 183.208 325.659 183.877  c
326.222 184.453 326.503 185.130 326.503 185.908  c
326.503 186.361 326.411 186.780 326.227 187.165  c
326.043 187.550 325.811 187.878 325.532 188.149  c
325.252 188.420 324.941 188.638 324.599 188.803  c
324.112 189.036 323.613 189.152 323.101 189.152  c
322.584 189.152 322.209 189.064 321.974 188.888  c
321.739 188.713 321.622 188.519 321.622 188.308  c
321.622 188.189 321.670 188.084 321.768 187.993  c
321.865 187.902 321.988 187.857 322.136 187.857  c
322.246 187.857 322.342 187.874 322.425 187.908  c
322.507 187.942 322.648 188.028 322.847 188.168  c
323.164 188.388 323.486 188.498 323.812 188.498  c
324.307 188.498 324.741 188.311 325.116 187.936  c
325.491 187.562 325.678 187.106 325.678 186.568  c
325.678 186.048 325.511 185.562 325.176 185.112  c
324.842 184.661 324.381 184.313 323.793 184.067  c
323.331 183.877 322.703 183.767 321.907 183.737  c
323.558 180.392 l
h
328.469 184.747 m
328.469 183.765 328.617 182.920 328.914 182.211  c
329.210 181.502 329.603 180.974 330.094 180.627  c
330.475 180.352 330.869 180.214 331.275 180.214  c
331.935 180.214 332.528 180.551 333.052 181.224  c
333.708 182.057 334.036 183.187 334.036 184.613  c
334.036 185.612 333.892 186.460 333.605 187.159  c
333.317 187.857 332.950 188.364 332.503 188.679  c
332.057 188.994 331.626 189.152 331.211 189.152  c
330.391 189.152 329.707 188.667 329.161 187.698  c
328.700 186.882 328.469 185.898 328.469 184.747  c
h
329.713 184.905 m
329.713 186.090 329.859 187.057 330.151 187.806  c
330.393 188.437 330.752 188.752 331.231 188.752  c
331.459 188.752 331.696 188.649 331.941 188.444  c
332.187 188.239 332.373 187.895 332.500 187.413  c
332.695 186.685 332.792 185.659 332.792 184.334  c
332.792 183.352 332.690 182.533 332.487 181.877  c
332.335 181.391 332.138 181.046 331.897 180.843  c
331.724 180.703 331.514 180.633 331.269 180.633  c
330.981 180.633 330.725 180.762 330.501 181.021  c
330.196 181.372 329.988 181.924 329.878 182.677  c
329.768 183.431 329.713 184.173 329.713 184.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
39.0000 170.000 m
39.0000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
51.0000 170.000 m
51.0000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
63.0000 170.000 m
63.0000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
74.0000 170.000 m
74.0000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
98.0000 170.000 m
98.0000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
109.000 170.000 m
109.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
121.000 170.000 m
121.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
133.000 170.000 m
133.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
156.000 170.000 m
156.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
167.000 170.000 m
167.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
179.000 170.000 m
179.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
191.000 170.000 m
191.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
214.000 170.000 m
214.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
226.000 170.000 m
226.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
237.000 170.000 m
237.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
249.000 170.000 m
249.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
272.000 170.000 m
272.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
284.000 170.000 m
284.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
296.000 170.000 m
296.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
307.000 170.000 m
307.000 172.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
26.0000 170.000 m
26.0000 4.01205 l
S
Q
q
q
0 J
1 j
newpath
26.0000 152.000 m
22.0000 152.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.9604 159.343 m
18.3574 161.000 l
13.2793 161.000 l
13.2793 160.765 l
14.7731 159.402 15.8247 158.289 16.4340 157.426  c
17.0434 156.563 17.3481 155.773 17.3481 155.058  c
17.3481 154.512 17.1809 154.064 16.8466 153.712  c
16.5123 153.361 16.1124 153.186 15.6469 153.186  c
15.2238 153.186 14.8439 153.309 14.5075 153.557  c
14.1711 153.804 13.9225 154.167 13.7617 154.646  c
13.5268 154.646 l
13.6326 153.863 13.9045 153.262 14.3425 152.843  c
14.7805 152.424 15.3274 152.214 15.9834 152.214  c
16.6816 152.214 17.2645 152.439 17.7321 152.887  c
18.1997 153.336 18.4335 153.865 18.4335 154.474  c
18.4335 154.910 18.3320 155.346 18.1289 155.782  c
17.8157 156.467 17.3079 157.193 16.6054 157.959  c
15.5517 159.110 14.8937 159.804 14.6313 160.041  c
16.8784 160.041 l
17.3354 160.041 17.6560 160.024 17.8400 159.990  c
18.0241 159.956 18.1902 159.888 18.3383 159.784  c
18.4864 159.680 18.6155 159.533 18.7255 159.343  c
h
20.4697 156.747 m
20.4697 155.765 20.6178 154.920 20.9140 154.211  c
21.2102 153.502 21.6038 152.974 22.0947 152.627  c
22.4755 152.352 22.8691 152.214 23.2753 152.214  c
23.9355 152.214 24.5279 152.551 25.0527 153.224  c
25.7086 154.057 26.0366 155.187 26.0366 156.613  c
26.0366 157.612 25.8927 158.460 25.6049 159.159  c
25.3172 159.857 24.9501 160.364 24.5036 160.679  c
24.0572 160.994 23.6266 161.152 23.2119 161.152  c
22.3909 161.152 21.7075 160.667 21.1616 159.698  c
20.7003 158.882 20.4697 157.898 20.4697 156.747  c
h
21.7138 156.905 m
21.7138 158.090 21.8598 159.057 22.1518 159.806  c
22.3930 160.437 22.7527 160.752 23.2309 160.752  c
23.4594 160.752 23.6964 160.649 23.9418 160.444  c
24.1873 160.239 24.3735 159.895 24.5004 159.413  c
24.6951 158.685 24.7924 157.659 24.7924 156.334  c
24.7924 155.352 24.6909 154.533 24.4877 153.877  c
24.3354 153.391 24.1386 153.046 23.8974 152.843  c
23.7239 152.703 23.5144 152.633 23.2690 152.633  c
22.9812 152.633 22.7252 152.762 22.5009 153.021  c
22.1962 153.372 21.9889 153.924 21.8789 154.677  c
21.7688 155.431 21.7138 156.173 21.7138 156.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 127.000 m
22.0000 127.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
19.0493 132.826 m
19.0493 133.727 l
17.8940 133.727 l
17.8940 136.000 l
16.8466 136.000 l
16.8466 133.727 l
13.2031 133.727 l
13.2031 132.915 l
17.1958 127.214 l
17.8940 127.214 l
17.8940 132.826 l
h
16.8466 132.826 m
16.8466 128.554 l
13.8252 132.826 l
h
20.4697 131.747 m
20.4697 130.765 20.6178 129.920 20.9140 129.211  c
21.2102 128.502 21.6038 127.974 22.0947 127.627  c
22.4755 127.352 22.8691 127.214 23.2753 127.214  c
23.9355 127.214 24.5279 127.551 25.0527 128.224  c
25.7086 129.057 26.0366 130.187 26.0366 131.613  c
26.0366 132.612 25.8927 133.460 25.6049 134.159  c
25.3172 134.857 24.9501 135.364 24.5036 135.679  c
24.0572 135.994 23.6266 136.152 23.2119 136.152  c
22.3909 136.152 21.7075 135.667 21.1616 134.698  c
20.7003 133.882 20.4697 132.898 20.4697 131.747  c
h
21.7138 131.905 m
21.7138 133.090 21.8598 134.057 22.1518 134.806  c
22.3930 135.437 22.7527 135.752 23.2309 135.752  c
23.4594 135.752 23.6964 135.649 23.9418 135.444  c
24.1873 135.239 24.3735 134.895 24.5004 134.413  c
24.6951 133.685 24.7924 132.659 24.7924 131.334  c
24.7924 130.352 24.6909 129.533 24.4877 128.877  c
24.3354 128.391 24.1386 128.046 23.8974 127.843  c
23.7239 127.703 23.5144 127.633 23.2690 127.633  c
22.9812 127.633 22.7252 127.762 22.5009 128.021  c
22.1962 128.372 21.9889 128.924 21.8789 129.677  c
21.7688 130.431 21.7138 131.173 21.7138 131.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 102.000 m
22.0000 102.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
18.8271 102.214 m
18.8271 102.449 l
18.2685 102.504 17.8125 102.615 17.4592 102.783  c
17.1058 102.950 16.7567 103.205 16.4118 103.547  c
16.0669 103.890 15.7813 104.272 15.5549 104.693  c
15.3285 105.114 15.1391 105.615 14.9868 106.194  c
15.5961 105.775 16.2076 105.566 16.8212 105.566  c
17.4095 105.566 17.9194 105.803 18.3510 106.277  c
18.7827 106.751 18.9985 107.360 18.9985 108.105  c
18.9985 108.824 18.7806 109.480 18.3447 110.073  c
17.8199 110.792 17.1259 111.152 16.2627 111.152  c
15.6744 111.152 15.1751 110.957 14.7646 110.568  c
13.9606 109.810 13.5585 108.829 13.5585 107.623  c
13.5585 106.852 13.7130 106.120 14.0219 105.426  c
14.3308 104.732 14.7720 104.117 15.3454 103.579  c
15.9188 103.042 16.4679 102.680 16.9926 102.494  c
17.5174 102.307 18.0061 102.214 18.4589 102.214  c
h
14.8789 106.658 m
14.8027 107.229 14.7646 107.690 14.7646 108.042  c
14.7646 108.448 14.8397 108.889 14.9899 109.365  c
15.1402 109.841 15.3634 110.219 15.6596 110.498  c
15.8754 110.697 16.1378 110.796 16.4467 110.796  c
16.8149 110.796 17.1439 110.623 17.4338 110.276  c
17.7237 109.929 17.8686 109.434 17.8686 108.791  c
17.8686 108.067 17.7247 107.441 17.4370 106.912  c
17.1492 106.383 16.7408 106.118 16.2119 106.118  c
16.0511 106.118 15.8786 106.152 15.6945 106.220  c
15.5105 106.287 15.2386 106.433 14.8789 106.658  c
h
20.4697 106.747 m
20.4697 105.765 20.6178 104.920 20.9140 104.211  c
21.2102 103.502 21.6038 102.974 22.0947 102.627  c
22.4755 102.352 22.8691 102.214 23.2753 102.214  c
23.9355 102.214 24.5279 102.551 25.0527 103.224  c
25.7086 104.057 26.0366 105.187 26.0366 106.613  c
26.0366 107.612 25.8927 108.460 25.6049 109.159  c
25.3172 109.857 24.9501 110.364 24.5036 110.679  c
24.0572 110.994 23.6266 111.152 23.2119 111.152  c
22.3909 111.152 21.7075 110.667 21.1616 109.698  c
20.7003 108.882 20.4697 107.898 20.4697 106.747  c
h
21.7138 106.905 m
21.7138 108.090 21.8598 109.057 22.1518 109.806  c
22.3930 110.437 22.7527 110.752 23.2309 110.752  c
23.4594 110.752 23.6964 110.649 23.9418 110.444  c
24.1873 110.239 24.3735 109.895 24.5004 109.413  c
24.6951 108.685 24.7924 107.659 24.7924 106.334  c
24.7924 105.352 24.6909 104.533 24.4877 103.877  c
24.3354 103.391 24.1386 103.046 23.8974 102.843  c
23.7239 102.703 23.5144 102.633 23.2690 102.633  c
22.9812 102.633 22.7252 102.762 22.5009 103.021  c
22.1962 103.372 21.9889 103.924 21.8789 104.677  c
21.7688 105.431 21.7138 106.173 21.7138 106.905  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 77.0000 m
22.0000 77.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
15.4946 81.6645 m
14.8133 81.1059 14.3742 80.6573 14.1774 80.3188  c
13.9807 79.9803 13.8823 79.6290 13.8823 79.2651  c
13.8823 78.7065 14.0981 78.2251 14.5297 77.8210  c
14.9614 77.4169 15.5348 77.2148 16.2500 77.2148  c
16.9440 77.2148 17.5026 77.4031 17.9257 77.7797  c
18.3489 78.1564 18.5605 78.5859 18.5605 79.0683  c
18.5605 79.3899 18.4462 79.7179 18.2177 80.0522  c
17.9892 80.3865 17.5131 80.7801 16.7895 81.2329  c
17.5343 81.8084 18.0273 82.2612 18.2685 82.5913  c
18.5901 83.0229 18.7509 83.4778 18.7509 83.9560  c
18.7509 84.5612 18.5203 85.0785 18.0590 85.5080  c
17.5978 85.9375 16.9926 86.1523 16.2436 86.1523  c
15.4269 86.1523 14.7900 85.8963 14.3330 85.3842  c
13.9690 84.9738 13.7871 84.5252 13.7871 84.0385  c
13.7871 83.6577 13.9151 83.2800 14.1711 82.9055  c
14.4271 82.5310 14.8683 82.1173 15.4946 81.6645  c
h
16.4912 80.9853 m
16.9990 80.5283 17.3206 80.1675 17.4560 79.9030  c
17.5914 79.6385 17.6591 79.3391 17.6591 79.0048  c
17.6591 78.5605 17.5343 78.2124 17.2846 77.9606  c
17.0349 77.7089 16.6943 77.5830 16.2627 77.5830  c
15.8310 77.5830 15.4798 77.7078 15.2089 77.9575  c
14.9381 78.2071 14.8027 78.4991 14.8027 78.8335  c
14.8027 79.0535 14.8588 79.2736 14.9709 79.4936  c
15.0830 79.7137 15.2428 79.9231 15.4502 80.1220  c
h
15.7929 81.9057 m
15.4417 82.2019 15.1814 82.5246 15.0122 82.8737  c
14.8429 83.2229 14.7583 83.6005 14.7583 84.0068  c
14.7583 84.5527 14.9074 84.9896 15.2058 85.3176  c
15.5041 85.6455 15.8839 85.8095 16.3452 85.8095  c
16.8022 85.8095 17.1682 85.6805 17.4433 85.4223  c
17.7184 85.1642 17.8559 84.8510 17.8559 84.4829  c
17.8559 84.1782 17.7755 83.9052 17.6147 83.6640  c
17.3142 83.2154 16.7070 82.6293 15.7929 81.9057  c
h
20.4697 81.7470 m
20.4697 80.7653 20.6178 79.9200 20.9140 79.2111  c
21.2102 78.5023 21.6038 77.9744 22.0947 77.6274  c
22.4755 77.3523 22.8691 77.2148 23.2753 77.2148  c
23.9355 77.2148 24.5279 77.5512 25.0527 78.2241  c
25.7086 79.0577 26.0366 80.1876 26.0366 81.6137  c
26.0366 82.6124 25.8927 83.4609 25.6049 84.1591  c
25.3172 84.8574 24.9501 85.3641 24.5036 85.6794  c
24.0572 85.9947 23.6266 86.1523 23.2119 86.1523  c
22.3909 86.1523 21.7075 85.6678 21.1616 84.6987  c
20.7003 83.8820 20.4697 82.8981 20.4697 81.7470  c
h
21.7138 81.9057 m
21.7138 83.0906 21.8598 84.0576 22.1518 84.8066  c
22.3930 85.4371 22.7527 85.7524 23.2309 85.7524  c
23.4594 85.7524 23.6964 85.6498 23.9418 85.4445  c
24.1873 85.2393 24.3735 84.8955 24.5004 84.4130  c
24.6951 83.6852 24.7924 82.6590 24.7924 81.3344  c
24.7924 80.3527 24.6909 79.5338 24.4877 78.8779  c
24.3354 78.3912 24.1386 78.0463 23.8974 77.8432  c
23.7239 77.7036 23.5144 77.6337 23.2690 77.6337  c
22.9812 77.6337 22.7252 77.7628 22.5009 78.0210  c
22.1962 78.3722 21.9889 78.9244 21.8789 79.6777  c
21.7688 80.4309 21.7138 81.1736 21.7138 81.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 52.0000 m
22.0000 52.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
7.52343 53.2368 m
9.61816 52.2148 l
9.82763 52.2148 l
9.82763 59.4829 l
9.82763 59.9653 9.84773 60.2657 9.88793 60.3842  c
9.92814 60.5027 10.0117 60.5937 10.1386 60.6572  c
10.2656 60.7207 10.5237 60.7566 10.9130 60.7651  c
10.9130 61.0000 l
7.67578 61.0000 l
7.67578 60.7651 l
8.08203 60.7566 8.34440 60.7217 8.46289 60.6604  c
8.58138 60.5990 8.66390 60.5165 8.71044 60.4128  c
8.75699 60.3091 8.78027 59.9991 8.78027 59.4829  c
8.78027 54.8364 l
8.78027 54.2101 8.75911 53.8081 8.71679 53.6303  c
8.68717 53.4949 8.63321 53.3955 8.55493 53.3320  c
8.47664 53.2685 8.38248 53.2368 8.27246 53.2368  c
8.11588 53.2368 7.89794 53.3024 7.61865 53.4335  c
h
13.4697 56.7470 m
13.4697 55.7653 13.6178 54.9200 13.9140 54.2111  c
14.2102 53.5023 14.6038 52.9744 15.0947 52.6274  c
15.4755 52.3523 15.8691 52.2148 16.2753 52.2148  c
16.9355 52.2148 17.5279 52.5512 18.0527 53.2241  c
18.7086 54.0577 19.0366 55.1876 19.0366 56.6137  c
19.0366 57.6124 18.8927 58.4609 18.6049 59.1591  c
18.3172 59.8574 17.9501 60.3641 17.5036 60.6794  c
17.0572 60.9947 16.6266 61.1523 16.2119 61.1523  c
15.3909 61.1523 14.7075 60.6678 14.1616 59.6987  c
13.7003 58.8820 13.4697 57.8981 13.4697 56.7470  c
h
14.7138 56.9057 m
14.7138 58.0906 14.8598 59.0576 15.1518 59.8066  c
15.3930 60.4371 15.7527 60.7524 16.2309 60.7524  c
16.4594 60.7524 16.6964 60.6498 16.9418 60.4445  c
17.1873 60.2393 17.3735 59.8955 17.5004 59.4130  c
17.6951 58.6852 17.7924 57.6590 17.7924 56.3344  c
17.7924 55.3527 17.6909 54.5338 17.4877 53.8779  c
17.3354 53.3912 17.1386 53.0463 16.8974 52.8432  c
16.7239 52.7036 16.5144 52.6337 16.2690 52.6337  c
15.9812 52.6337 15.7252 52.7628 15.5009 53.0210  c
15.1962 53.3722 14.9889 53.9244 14.8789 54.6777  c
14.7688 55.4309 14.7138 56.1736 14.7138 56.9057  c
h
20.4697 56.7470 m
20.4697 55.7653 20.6178 54.9200 20.9140 54.2111  c
21.2102 53.5023 21.6038 52.9744 22.0947 52.6274  c
22.4755 52.3523 22.8691 52.2148 23.2753 52.2148  c
23.9355 52.2148 24.5279 52.5512 25.0527 53.2241  c
25.7086 54.0577 26.0366 55.1876 26.0366 56.6137  c
26.0366 57.6124 25.8927 58.4609 25.6049 59.1591  c
25.3172 59.8574 24.9501 60.3641 24.5036 60.6794  c
24.0572 60.9947 23.6266 61.1523 23.2119 61.1523  c
22.3909 61.1523 21.7075 60.6678 21.1616 59.6987  c
20.7003 58.8820 20.4697 57.8981 20.4697 56.7470  c
h
21.7138 56.9057 m
21.7138 58.0906 21.8598 59.0576 22.1518 59.8066  c
22.3930 60.4371 22.7527 60.7524 23.2309 60.7524  c
23.4594 60.7524 23.6964 60.6498 23.9418 60.4445  c
24.1873 60.2393 24.3735 59.8955 24.5004 59.4130  c
24.6951 58.6852 24.7924 57.6590 24.7924 56.3344  c
24.7924 55.3527 24.6909 54.5338 24.4877 53.8779  c
24.3354 53.3912 24.1386 53.0463 23.8974 52.8432  c
23.7239 52.7036 23.5144 52.6337 23.2690 52.6337  c
22.9812 52.6337 22.7252 52.7628 22.5009 53.0210  c
22.1962 53.3722 21.9889 53.9244 21.8789 54.6777  c
21.7688 55.4309 21.7138 56.1736 21.7138 56.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 27.0000 m
22.0000 27.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
7.52343 28.2368 m
9.61816 27.2148 l
9.82763 27.2148 l
9.82763 34.4829 l
9.82763 34.9653 9.84773 35.2657 9.88793 35.3842  c
9.92814 35.5027 10.0117 35.5937 10.1386 35.6572  c
10.2656 35.7207 10.5237 35.7566 10.9130 35.7651  c
10.9130 36.0000 l
7.67578 36.0000 l
7.67578 35.7651 l
8.08203 35.7566 8.34440 35.7217 8.46289 35.6604  c
8.58138 35.5990 8.66390 35.5165 8.71044 35.4128  c
8.75699 35.3091 8.78027 34.9991 8.78027 34.4829  c
8.78027 29.8364 l
8.78027 29.2101 8.75911 28.8081 8.71679 28.6303  c
8.68717 28.4949 8.63321 28.3955 8.55493 28.3320  c
8.47664 28.2685 8.38248 28.2368 8.27246 28.2368  c
8.11588 28.2368 7.89794 28.3024 7.61865 28.4335  c
h
18.9604 34.3432 m
18.3574 36.0000 l
13.2793 36.0000 l
13.2793 35.7651 l
14.7731 34.4025 15.8247 33.2895 16.4340 32.4262  c
17.0434 31.5629 17.3481 30.7737 17.3481 30.0585  c
17.3481 29.5127 17.1809 29.0641 16.8466 28.7128  c
16.5123 28.3616 16.1124 28.1860 15.6469 28.1860  c
15.2238 28.1860 14.8439 28.3098 14.5075 28.5573  c
14.1711 28.8049 13.9225 29.1678 13.7617 29.6460  c
13.5268 29.6460 l
13.6326 28.8631 13.9045 28.2622 14.3425 27.8432  c
14.7805 27.4243 15.3274 27.2148 15.9834 27.2148  c
16.6816 27.2148 17.2645 27.4391 17.7321 27.8877  c
18.1997 28.3362 18.4335 28.8652 18.4335 29.4746  c
18.4335 29.9104 18.3320 30.3463 18.1289 30.7822  c
17.8157 31.4677 17.3079 32.1935 16.6054 32.9594  c
15.5517 34.1105 14.8937 34.8045 14.6313 35.0415  c
16.8784 35.0415 l
17.3354 35.0415 17.6560 35.0245 17.8400 34.9907  c
18.0241 34.9568 18.1902 34.8881 18.3383 34.7844  c
18.4864 34.6807 18.6155 34.5336 18.7255 34.3432  c
h
20.4697 31.7470 m
20.4697 30.7653 20.6178 29.9200 20.9140 29.2111  c
21.2102 28.5023 21.6038 27.9744 22.0947 27.6274  c
22.4755 27.3523 22.8691 27.2148 23.2753 27.2148  c
23.9355 27.2148 24.5279 27.5512 25.0527 28.2241  c
25.7086 29.0577 26.0366 30.1876 26.0366 31.6137  c
26.0366 32.6124 25.8927 33.4609 25.6049 34.1591  c
25.3172 34.8574 24.9501 35.3641 24.5036 35.6794  c
24.0572 35.9947 23.6266 36.1523 23.2119 36.1523  c
22.3909 36.1523 21.7075 35.6678 21.1616 34.6987  c
20.7003 33.8820 20.4697 32.8981 20.4697 31.7470  c
h
21.7138 31.9057 m
21.7138 33.0906 21.8598 34.0576 22.1518 34.8066  c
22.3930 35.4371 22.7527 35.7524 23.2309 35.7524  c
23.4594 35.7524 23.6964 35.6498 23.9418 35.4445  c
24.1873 35.2393 24.3735 34.8955 24.5004 34.4130  c
24.6951 33.6852 24.7924 32.6590 24.7924 31.3344  c
24.7924 30.3527 24.6909 29.5338 24.4877 28.8779  c
24.3354 28.3912 24.1386 28.0463 23.8974 27.8432  c
23.7239 27.7036 23.5144 27.6337 23.2690 27.6337  c
22.9812 27.6337 22.7252 27.7628 22.5009 28.0210  c
22.1962 28.3722 21.9889 28.9244 21.8789 29.6777  c
21.7688 30.4309 21.7138 31.1736 21.7138 31.9057  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 164.000 m
24.0000 164.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 139.000 m
24.0000 139.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 114.000 m
24.0000 114.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 89.0000 m
24.0000 89.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 64.0000 m
24.0000 64.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 39.0000 m
24.0000 39.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 J
1 j
newpath
26.0000 14.0000 m
24.0000 14.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 340 199 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
