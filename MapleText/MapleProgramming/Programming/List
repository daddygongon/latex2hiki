配列は変数を入れる箱が沢山用意されていると考えればよい．配列を使うときは，箱を指す数(示数，index)をいじっているのか，箱の中身(要素)をいじっているのかを区別すれば，動作を理解しやすい．Mapleにはいくつかの配列構造が用意されている．もっとも，頻繁に使うlistを示す．


!!!基本 
リスト構造は，中に入れる要素を[]でくくる．
<<<maple
> restart; list1:=[1,3,5,7];
>>>
{{dmath ' {\it list1}\, := \,[1,3,5,7]
 '}}

要素にアクセスするには，以下のようにインデックスを指定する．
<<<maple
> list1[2]; list1[-1]; list1[2..4];
>>>
{{dmath ' 3  '}}
{{dmath ' 7  '}}
{{dmath ' [3, 5, 7]  '}}
{{dmath '  '}}
-1,-2等は後ろから1番目，2番目を指す．C言語と違い0番目はない．

<<<maple
> list1[0];
>>>
<<<maple
Error, invalid subscript selector
>>>

ひとつの要素を書き換えるには，以下のようにする．
<<<maple
> list1[3]:=x: list1;
>>>
{{dmath ' [1, 3, x, 7]
 '}}

要素の数，および要素の中身を取り出すには以下のようにする．
<<<maple
> nops(list1); 
> op(list1);
>>>
{{dmath ' 4  '}}
{{dmath ' 1, 3, x, 7  '}}
{{dmath '  '}}


!!!for-loopの省略形 
for-loopを省略するのによく使う手を二つ.
(#より後ろはコメント文です)


!!!!!配列の生成(seq) 
<<<maple
> aa:=[]; #空で初期化 
  for i from 1 to 3 do 
    aa:=[op(aa),i]; #付け足していく
  end do:
  print(aa);
>>>
{{dmath ' {\it aa}\, := \,[]  '}}
{{dmath ' [1, 2, 3]  '}}
{{dmath '  '}}
同じことをseqを使って短く書くことができる．
<<<maple
> aa :=[seq(i,i=1..3)];
>>>
{{dmath ' {\it aa}\, := \,[1,2,3]
 '}}


!!!!!配列の和(sum) 
<<<maple
> n:=nops(aa): 
  total:=0: 
  for i from 1 to n do 
    total:=total+aa[i]; 
  end do:
  print(total):
>>>
{{dmath ' 6
 '}}

同じことをsumを使って短く書くことができる．
<<<maple
> sum(aa[i],i=1..nops(aa));
>>>
<<<maple
Error, invalid subscript selector
>>>

sumやseqを使っていると，このようなエラーがよくでる．これは，for-loopをまわすときにiに値が代入されているため引っかかる．変数を換えるか，iを初期化すればよい．
<<<maple
> i;
>>>
{{dmath ' 4
 '}}

                                      
<<<maple
> sum(aa[j],j=1..nops(aa));
>>>
{{dmath ' 6
 '}}


!!!リストへの付け足し(append, prepend) 
opを用いると，リストに新たな要素を前後，あるいは途中に付け足すことができる．
<<<maple
> list1:=[op(list1),9];
>>>
{{dmath ' {\it list1}\, := \,[1,3,x,7,9]
 '}}


!!!2つの要素の入れ替え 
要素の３，４番目の入れ替えは以下の通り．
<<<maple
> tmp:=list1[3]: 
  list1[3]:=list1[4]: 
  list1[4]:=tmp: 
  list1;
>>>
{{dmath ' [1, 3, 7, x, 9]
 '}}


!!!2次元配列(listlist) 
[ ] を二重化することで 2 次元の配列を作ることも可能で,リストのリスト (listlist) と呼ばれる.
<<<maple
> l2:=[[1,2,3,4],[1,3,5,7]];
>>>
{{dmath ' {\it l2}\, := \,[[1,2,3,4],[1,3,5,7]]
 '}}

                         
要素へのアクセスは以下の通り．
<<<maple
> l2[2]; l2[2,3]; l2[2][3];
>>>
{{dmath ' [1, 3, 5, 7]  '}}
{{dmath ' 5  '}}
{{dmath ' 5  '}}
{{dmath '  '}}


!!!listの表示(listplot) 
listに入っている数値を視覚化するのにはlistplotが便利．
<<<maple
> la:=[1,2,3,4,3,2,1]; 
  with(plots): 
  listplot(la);
>>>
{{dmath ' [1, 2, 3, 4, 3, 2, 1]
 '}}
||{{attach_view(MapleProgrammingplot2d1.png,Programming)}}||


